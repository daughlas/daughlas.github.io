<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NGINX 相关</title>
    <url>/2020/06/02/OPS/NGINX%20%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h3 id="nginx-如何开启gzip"><a href="#nginx-如何开启gzip" class="headerlink" title="nginx 如何开启gzip"></a>nginx 如何开启gzip</h3><pre class=" language-bash"><code class="language-bash">  <span class="token function">gzip</span> on<span class="token punctuation">;</span>
  gzip_buffers 32 4K<span class="token punctuation">;</span>
  gzip_comp_level 6<span class="token punctuation">;</span>
  gzip_min_length 100<span class="token punctuation">;</span>
  gzip_types application/javascript text/css text/xml<span class="token punctuation">;</span>
  gzip_disable <span class="token string">"MSIE [1-6]\."</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span>
  gzip_vary on<span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>PM2</title>
    <url>/2020/06/02/OPS/PM2/</url>
    <content><![CDATA[<h2 id="PM2"><a href="#PM2" class="headerlink" title="PM2"></a>PM2</h2><p>pm2（process manager）是一个进程管理工具，维护一个进程列表，可以用它来管理你的node进程，负责所有正在运行的进程，并查看node进程的状态，也支持性能监控，负载均衡等功能。</p>
<ul>
<li>进程守护，系统崩溃自动重启</li>
<li>启动多进程，充分利用 CPU 和内存</li>
<li>自带日志记录功能</li>
</ul>
<h3 id="PM2-介绍"><a href="#PM2-介绍" class="headerlink" title="PM2 介绍"></a>PM2 介绍</h3><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p><code>npm install pm2 -g</code></p>
<p><code>pm2 --version</code></p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>启动 <code>cross-env NODE_ENV=production pm2 start app.js</code></p>
<p>查看 <code>pm2 list</code></p>
<h4 id="核心价值"><a href="#核心价值" class="headerlink" title="核心价值"></a>核心价值</h4><ul>
<li>进程守护</li>
<li>多进程启动</li>
<li>线上日志记录</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><code>pm2 start …</code> 可以跟配置文件作为参数</p>
<p><code>pm2 list</code> 程序列表</p>
<p><code>pm2 restart ${appName|/${id}</code>  重启进程</p>
<p><code>pm2 stop ${appName|/${id}</code>停止</p>
<p><code>pm2 delete ${appName|/${id}</code> 删除</p>
<p><code>pm2 info ${appName|/${id}</code> 信息</p>
<p><code>pm2 log ${appName|/${id}</code> 日志</p>
<p><code>pm2 monit ${appName|/${id}</code> 监控</p>
<h3 id="PM2-进程守护"><a href="#PM2-进程守护" class="headerlink" title="PM2 进程守护"></a>PM2 进程守护</h3><p>pm2 遇到进程崩溃，会自动重启</p>
<h3 id="PM2-配置和日志记录"><a href="#PM2-配置和日志记录" class="headerlink" title="PM2 配置和日志记录"></a>PM2 配置和日志记录</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>新建 PM2 配置文件（包括进程数量，日志文件目录等）</li>
</ul>
<p>pm2.config.json</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"pm2-test-server"</span><span class="token punctuation">,</span>
  <span class="token string">"script"</span><span class="token punctuation">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>
  <span class="token string">"watch"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否监听文件变化</span>
  <span class="token string">"ignore_watch"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token string">"node_modules"</span><span class="token punctuation">,</span>
    <span class="token string">"logs"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"error_file"</span><span class="token punctuation">:</span> <span class="token string">"logs/err.log"</span><span class="token punctuation">,</span>
  <span class="token string">"out_file"</span><span class="token punctuation">:</span> <span class="token string">"logs/out.log"</span><span class="token punctuation">,</span>
  <span class="token string">"log_date_format"</span><span class="token punctuation">:</span> <span class="token string">"YYYY-MM-DD HH:mm:ss"</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>修改 PM2 启动命令，重启</li>
<li>访问 server，检查日志文件的内容（日志记录是否生效）</li>
</ul>
<h3 id="PM2-多进程"><a href="#PM2-多进程" class="headerlink" title="PM2 多进程"></a>PM2 多进程</h3><h4 id="为何使用多进程"><a href="#为何使用多进程" class="headerlink" title="为何使用多进程"></a>为何使用多进程</h4><p><img src="/images/image-20190628101837144.png" alt="image-20190628101837144"></p>
<ul>
<li>单个进程的内存是受到限制的</li>
<li>一个进程无法利用机器的全部内存</li>
<li>多进程能够充分利用 CPU 多核的优势</li>
</ul>
<h4 id="多进程和-redis"><a href="#多进程和-redis" class="headerlink" title="多进程和 redis"></a>多进程和 redis</h4><p>多个进程的 session 无法共享</p>
<p><img src="/images/image-20190628102048890.png" alt="image-20190628102048890"></p>
<p>使用redis 解决</p>
<p><img src="/images/image-20190628102123289.png" alt="image-20190628102123289"></p>
<p>pm2 会自动在寻找空闲进程进行负载均衡</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>LINUX 增加安全性</title>
    <url>/2020/06/02/OPS/%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="LINUX-增加安全性"><a href="#LINUX-增加安全性" class="headerlink" title="LINUX 增加安全性"></a>LINUX 增加安全性</h1><h2 id="添加用户，提升用户的权限"><a href="#添加用户，提升用户的权限" class="headerlink" title="添加用户，提升用户的权限"></a>添加用户，提升用户的权限</h2><p>adduser lvjiawen</p>
<p>gpasswd -a lvjiawen sudo 让 lvjiawen 可以以 sudo 角色调用系统命令</p>
<p>sudo visudo 修改</p>
<pre class=" language-shell"><code class="language-shell">root ALL=(ALL:ALL) ALL
lvjiawen ALL=(ALL:ALL) ALL</code></pre>
<p>第一个 ALL 对所有宿主生效，第二个lvjiawen 可以以任何用户来执行命令，第三个 all，lvjiawen 可以以任何的组来执行命令，第四个all，规则适用于所有命令</p>
<p>按下 ctrl + X，选shift + Y，再按回车</p>
<h2 id="ssh-登录服务器"><a href="#ssh-登录服务器" class="headerlink" title="ssh 登录服务器"></a>ssh 登录服务器</h2><p>看看本地有没有配置过</p>
<pre class=" language-shell"><code class="language-shell">cd ~
pwd
cd ~/.ssh
ls</code></pre>
<p>重新添加</p>
<pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -b 4096 -C "daughlas@gmail.com"</code></pre>
<p>开启 ssh 代理</p>
<pre class=" language-shell"><code class="language-shell">eval "$(ssh-agent -s)"</code></pre>
<pre class=" language-shell"><code class="language-shell">ssh-add ~/.ssh/id_rsa</code></pre>
<p>在 .ssh 目录下 </p>
<pre class=" language-shell"><code class="language-shell">vi /usr/lvjiawen/.ssh/authorized_keys</code></pre>
<p>shift + :</p>
<p>然后 wq</p>
<p>复制本地 id_rsa.pub 到远程 /usr/lvjiawen/.ssh/authorized_keys</p>
<pre class=" language-shell"><code class="language-shell">chmod 600 authorized_keys
sudo systemctl restart sshd</code></pre>
<h2 id="端口的安全性"><a href="#端口的安全性" class="headerlink" title="端口的安全性"></a>端口的安全性</h2><pre class=" language-shell"><code class="language-shell">sudo vi /etc/ssh/sshd_config</code></pre>
<p>port 1025-65536</p>
<p>设置 39876</p>
<p>在最末增加一行</p>
<pre class=" language-shell"><code class="language-shell">AllowUsers lvjiawen
sudo systemctl restart sshd
// 启动 firewall
systemctl start firewalld
// 修改端口
firewall-cmd --zone=public --add-port=39876/tcp --permanent
// reload 
firewall-cmd --reload
// 查看是否成功
sudo firewall-cmd --zone=public --query-port=39876/tcp</code></pre>
<h2 id="关闭服务器-root-登录"><a href="#关闭服务器-root-登录" class="headerlink" title="关闭服务器 root 登录"></a>关闭服务器 root 登录</h2><pre class=" language-shell"><code class="language-shell">sudo vi /etc/ssh/sshd_config</code></pre>
<p>中间一段</p>
<pre class=" language-shell"><code class="language-shell">PermitEmptyPassowrds no</code></pre>
<p>修改最底下</p>
<pre class=" language-shell"><code class="language-shell">PermitRootLogin no
PasswordAuthentication no</code></pre>
<h2 id="配置-iptables-增强安全防护"><a href="#配置-iptables-增强安全防护" class="headerlink" title="配置 iptables 增强安全防护"></a>配置 iptables 增强安全防护</h2><p>iptables 是一个防火墙</p>
<pre class=" language-shell"><code class="language-shell">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
yum makecache
yum -y update

iptables -F // 清空所有 iptables 现有规则
sudo vi /etc/iptables.up.rules</code></pre>
<p>编辑</p>
<pre class=" language-shell"><code class="language-shell">*filter

# allow all connections
-A INPUT -m state --state ESTABLISHED,RELATED  -j ACCEPT 

# allow out traffic
-A OUTPUT -j ACCEPT

# allow http & https
-A INPUT -p tcp --dport 443 -j ACCEPT // 允许 http
-A INPUT -p tcp --dport 80 -j ACCEPT // 允许 80

# allow ssh port loogin
-A INPUT -p tcp -m state --state NEW --dport 39876 -j ACCEPT

# ping
-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT 

# log denied calls
-A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied:" --log-level 7

# drop incoming sensitive connections
-A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --set
-A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --update --seconds 60 --hitcount 150 -j DROP

# reject all other inbound
-A INPUT -j REJECT
-A FORWARD -j REJECT

COMMIT</code></pre>
<p>告诉 iptables 防火墙配置文件在哪里</p>
<pre class=" language-shell"><code class="language-shell">sudo iptables-restore < /etc/iptables.up.rules</code></pre>
<p>查看是否成功启动</p>
<pre class=" language-shell"><code class="language-shell"># ubuntu
sudo ufw status
# active
sudo ufw enable
# 输入 y 确认</code></pre>
<p>设置开机自动启动</p>
<pre class=" language-shell"><code class="language-shell">sudo vi /etc/network/if-up.d/iptables</code></pre>
<p>写入脚本</p>
<pre class=" language-shell"><code class="language-shell">#!/bin/sh
iptables-restore /etc/iptables.up.rules</code></pre>
<p>给脚本执行的全新啊</p>
<pre class=" language-shell"><code class="language-shell">sudo chmod +x /etc/network/if-up.d/iptables</code></pre>
<h2 id="配置-Fail2ban-增强安全防护"><a href="#配置-Fail2ban-增强安全防护" class="headerlink" title="配置  Fail2ban 增强安全防护"></a>配置  Fail2ban 增强安全防护</h2><p>防御性的动作库，根据可疑行为执行防御动作</p>
<pre class=" language-shell"><code class="language-shell"># ubuntu
sudo apt-get install fail2ban</code></pre>
<p>打开配置文件</p>
<pre class=" language-shell"><code class="language-shell">sudo vi /etc/fail2ban/jail.conf</code></pre>
<p>修改</p>
<pre class=" language-shell"><code class="language-shell"># bantime
bantime = 3600

# Destination email
destemail = daughlas@gmail.com

# choose default action
action = %(action_mw)s
</code></pre>
<p>查看状态</p>
<pre class=" language-shell"><code class="language-shell"># ubuntu
sudo service fail2ban status
# 停用
sudo service fail2ban stop
# 开启
sudo service fail2ban start</code></pre>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>域名相关</title>
    <url>/2020/06/02/OPS/%E5%9F%9F%E5%90%8D%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h3 id="配置解析项目的域名-A-记录和-CNAME"><a href="#配置解析项目的域名-A-记录和-CNAME" class="headerlink" title="配置解析项目的域名 A 记录和 CNAME"></a>配置解析项目的域名 A 记录和 CNAME</h3><h4 id="主机记录"><a href="#主机记录" class="headerlink" title="主机记录"></a>主机记录</h4><p>填个 @ 直接解析顶级域名，lvjiawen.tech</p>
<p>填入 www 解析 <a href="http://www.lvjiawen.tech" target="_blank" rel="noopener">www.lvjiawen.tech</a></p>
<p>填入 * ，泛解析，陪陪其他所有域名 *.lvjiawen.tech</p>
<h4 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h4><p>A 记录，address，将域名指向一个 IPV4地址</p>
<p>CNAME，将域名指向另外一个域名</p>
<p>MX，将域名指向邮件服务器地址</p>
<p>TXT，可以填任何东西，反垃圾邮件，搜索引擎。。。。。用途</p>
<h4 id="权重-和-MX-优先级"><a href="#权重-和-MX-优先级" class="headerlink" title="权重 和 MX 优先级"></a>权重 和 MX 优先级</h4><p>规则冲突的时候决定解析哪个</p>
<h4 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h4><p>一般600s，设置 DNS 域名解析的缓存时间，超过时间，再次去 DNS 服务器请求地址</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>LINUX 配置 Node 生产环境</title>
    <url>/2020/06/02/OPS/%E9%85%8D%E7%BD%AE%20Node.js%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="LINUX-配置-Node-生产环境"><a href="#LINUX-配置-Node-生产环境" class="headerlink" title="LINUX 配置 Node 生产环境"></a>LINUX 配置 Node 生产环境</h1><h2 id="安装-Node-js-生产环境"><a href="#安装-Node-js-生产环境" class="headerlink" title="安装 Node.js 生产环境"></a>安装 Node.js 生产环境</h2><p>更新</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum update
<span class="token function">sudo</span> yum <span class="token function">install</span> vim openssl build-essential libssl-dev <span class="token function">wget</span> curl <span class="token function">git</span>
<span class="token function">sudo</span> yum groupinstall <span class="token string">"Development Tools"</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> openssl-devel</code></pre>
<p>nvm</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
nvm <span class="token function">install</span> v6.9.5
nvm use v6.9.5
nvm <span class="token function">alias</span> default v6.9.5
node -v
<span class="token function">npm</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org <span class="token function">install</span> -g <span class="token function">npm</span>
<span class="token keyword">echo</span> fs.inotify.max_user_watches<span class="token operator">=</span>524288 <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> -a /etc/sysctl.conf <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> sysctl </code></pre>
<p>npm 常用 工具包</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i pm2 webpack gulp grunt-cli -g</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/iptables.up.rules</code></pre>
<h2 id="pm2-使用"><a href="#pm2-使用" class="headerlink" title="pm2 使用"></a>pm2 使用</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启服务</span>
pm2 start app.js

<span class="token comment" spellcheck="true"># 查看所有服务</span>
pm2 list

<span class="token comment" spellcheck="true"># 详情</span>
pm2 show app<span class="token punctuation">(</span>name<span class="token punctuation">)</span> 

<span class="token comment" spellcheck="true"># 当前的日志</span>
pm2 logs</code></pre>
<h2 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h2><p>停掉阿帕奇(ubuntu)</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> apache2 stop</code></pre>
<p>卸载阿帕奇(ubuntu)</p>
<pre class=" language-bash"><code class="language-bash">update-rc.d -f apache2 remove

<span class="token function">sudo</span> <span class="token function">apt-get</span> remove apache2</code></pre>
<p>安装 nginx </p>
<p>配置 nginx</p>
<pre class=" language-bash"><code class="language-bash">upstream blog <span class="token punctuation">{</span>
    server 127.0.0.1:8080<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

server <span class="token punctuation">{</span>
    listen 80<span class="token punctuation">;</span>
    server_name 47.106.204.77<span class="token punctuation">;</span>

    location / <span class="token punctuation">{</span>
        proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
        proxy_set_header X-Forward-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
        proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>
        proxy_set_header X-Nginx-Proxy <span class="token boolean">true</span><span class="token punctuation">;</span>

        proxy_pass http://blog<span class="token punctuation">;</span>
        proxy_redirect off<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>CentOS</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>CENTOS 7 学习</title>
    <url>/2020/06/02/OS/CENTOS%20%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h1><p>安装好之后，配置 yum 源</p>
<p>vim /etc/yum.repos.d/CentOS-163.repo，并且将 yum 文件复制进去</p>
<h2 id="系统管理配置"><a href="#系统管理配置" class="headerlink" title="系统管理配置"></a>系统管理配置</h2><h3 id="主机名修改"><a href="#主机名修改" class="headerlink" title="主机名修改"></a>主机名修改</h3><h4 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">hostname</span> <span class="token punctuation">[</span>新主机名<span class="token punctuation">]</span></code></pre>
<h4 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h4><p>修改这个就无效了</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/sysconfig/network</code></pre>
<p>要修改下面的文件 </p>
<pre class=" language-bash"><code class="language-bash">vim /ect/hostname</code></pre>
<h3 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h3><p> <img src="/images/image-20191109062349992.png" alt="image-20191109062349992"></p>
<p>/home 普通用户的 ~ 目录，root 用户的 家目录是 /root</p>
<p>/etc 系统和应用的相关配置文件</p>
<p>bin 和 sbin 链接到 usr/bin 和 usr/sbin 可执行命令 ls 之类的都在这儿，sbin 是 super bin，root 用户执行的目录</p>
<p>/boot 操作系统启动的引导文件</p>
<p>lib 和 lib64 链接到 usr/lib64和usr/lib 系统的库文件</p>
<p>/tmp 和 /run 临时文件，会定时清理</p>
<p>/var 系统日志，帮助文档等等，还有一些系统的库文件</p>
<p>/proc 系统进程的动态信息</p>
<p>/dev 系统的设备文件</p>
<h3 id="操作系统的时区修改"><a href="#操作系统的时区修改" class="headerlink" title="操作系统的时区修改"></a>操作系统的时区修改</h3><p><img src="/images/image-20191109063942086.png" alt="image-20191109063942086"></p>
<p><code>date -R</code> 查看时区</p>
<p>RTC 主板时间</p>
<p><code>timedatectl</code> 查看时间</p>
<pre class=" language-bash"><code class="language-bash">timedatectl set-timezone Asia/Shangehai // 修改操作系统的时间
timedatectl set-local-rtc 1 // 将硬件的时间跟系统的时间保持一致
timedatectl list-timezone</code></pre>
<h3 id="操作系统网卡命名"><a href="#操作系统网卡命名" class="headerlink" title="操作系统网卡命名"></a>操作系统网卡命名</h3><p>网卡1 eth0 em0</p>
<p>网卡2 eth1 em1</p>
<p>网卡3 eth2 em2</p>
<p>centos7 网卡命名默认是基于固件、拓扑、位置信息来分配，想要关闭它，配置</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/sysconfig/grub
grub2-mkconfig -o /boot/grub2/grub.cfg</code></pre>
<p>修改</p>
<pre class=" language-bash"><code class="language-bash">GRUB_CMDLINE_LINUX<span class="token operator">=</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span>
net.ifnames<span class="token operator">=</span>0 biosdevname<span class="token operator">=</span>0

<span class="token punctuation">..</span>.</code></pre>
<p>阿里云不建议对网卡进行设置</p>
<p>查看网卡信息</p>
<pre class=" language-bash"><code class="language-bash">ip a </code></pre>
<h3 id="网络接口及-IP-详解"><a href="#网络接口及-IP-详解" class="headerlink" title="网络接口及 IP 详解"></a>网络接口及 IP 详解</h3><h2 id="命令和其他"><a href="#命令和其他" class="headerlink" title="命令和其他"></a>命令和其他</h2><p>ls -l ./ 打印出文件详细信息</p>
<p>pid 是进程的id 的意思</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>CentOS</tag>
        <tag>待续</tag>
      </tags>
  </entry>
  <entry>
    <title>LINUX 学习</title>
    <url>/2020/06/02/OS/LINUX%20%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="一些命令示例"><a href="#一些命令示例" class="headerlink" title="一些命令示例"></a>一些命令示例</h3><p><code>ip addr</code> 改</p>
<p><code>service network restart</code></p>
<p><code>yum update</code></p>
<p>grep 过滤，-v 不包含，反转一下</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> anaconda-ks.cfg <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"net"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"off"</span></code></pre>
<h2 id="帐号管理"><a href="#帐号管理" class="headerlink" title="帐号管理"></a>帐号管理</h2><h3 id="添加新的用户账号"><a href="#添加新的用户账号" class="headerlink" title="添加新的用户账号"></a>添加新的用户账号</h3><p>user add </p>
<ul>
<li>-c 注释性描述</li>
<li>-d 指定主目录，一般不指定</li>
<li>-g 用户组</li>
<li>-G 用户组的附属组</li>
<li>-s 用户登录的shell 文件</li>
<li>-u 用户号</li>
</ul>
<pre class=" language-bash"><code class="language-bash"><span class="token function">groupadd</span> ljs
<span class="token function">useradd</span> -s /bin/sh -g ljw -G adm,root ljw</code></pre>
<h3 id="删除账户"><a href="#删除账户" class="headerlink" title="删除账户"></a>删除账户</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">userdel</span> -r ljw

<span class="token function">userdel</span> ljw
<span class="token function">rm</span> -rf /home/ljw</code></pre>
<h3 id="修改账户"><a href="#修改账户" class="headerlink" title="修改账户"></a>修改账户</h3><p>usermod，加上-c, -d, -m, -g, -G, -s, -u, -o</p>
<h3 id="用户密码管理"><a href="#用户密码管理" class="headerlink" title="用户密码管理"></a>用户密码管理</h3><p>passwd</p>
<ul>
<li>-l 锁定口令，禁用账号</li>
<li>-u 口令解锁</li>
<li>-d 使账号无口令</li>
<li>-f 强迫用户下次登录时修改口令</li>
</ul>
<h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><h3 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h3><p>groupadd</p>
<ul>
<li>-g GID 指定新用户组的 GID（一定是数字）</li>
<li>-o</li>
</ul>
<h3 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h3><p>groupdel</p>
<h3 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h3><p>groupmod</p>
<ul>
<li>-n 新组名 + 旧组名</li>
<li>-g</li>
<li>-o</li>
</ul>
<p>newgrp</p>
<p>su user1 切换用户</p>
<p>exit 退出当前所有用户</p>
<h3 id="linux-用户权限相关"><a href="#linux-用户权限相关" class="headerlink" title="linux 用户权限相关"></a>linux 用户权限相关</h3><p>/etc/passwd</p>
<p>/etc/shadow</p>
<p>/etc/group</p>
<p>修改 /etc/sudoers</p>
<pre class=" language-bash"><code class="language-bash">user1     ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>        NOPASSWD: /bin/mkdir,/bin/rm</code></pre>
<h2 id="linux-文件常用命令"><a href="#linux-文件常用命令" class="headerlink" title="linux 文件常用命令"></a>linux 文件常用命令</h2><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><ul>
<li>touch，<code>touch file_test</code></li>
<li>cat，<code>cat file_test &gt; file_test_copy</code> 或者 <code>cat file_test &gt;&gt; file_test_copy</code></li>
<li>echo，<code>echo &quot;I love you&quot; &gt; file_test2</code></li>
<li>vi，<code>vi new_file</code></li>
</ul>
<h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><ul>
<li>cat，<code>cat file_test &gt; file-test_copy</code></li>
<li>cp，<code>cp file_test file_test_test2</code></li>
</ul>
<h4 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h4><ul>
<li>ln -s 源文件 目标文件 （软链接，类似windows 的快捷方式）</li>
<li>ln 源文件 目标文件（同样的文件，两个出口）</li>
</ul>
<h4 id="重命名（移动）文件"><a href="#重命名（移动）文件" class="headerlink" title="重命名（移动）文件"></a>重命名（移动）文件</h4><p>mv 源文件 目标文件</p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>rm</p>
<ul>
<li>-r recursive 递归删除，牵扯目录</li>
<li>-f </li>
</ul>
<h2 id="linux-目录常用命令"><a href="#linux-目录常用命令" class="headerlink" title="linux 目录常用命令"></a>linux 目录常用命令</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>mkdir</p>
<p>-p 创建多级目录</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> test_dir/child_1/child_2/child_3</code></pre>
<h3 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h3><p>cp -r 源目录 目标目录</p>
<p>-r 是递归的意思，必须要传</p>
<h3 id="链接目录"><a href="#链接目录" class="headerlink" title="链接目录"></a>链接目录</h3><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p>ln -s 源目录 目标目录（软连接）</p>
<h4 id="目录不可硬链接"><a href="#目录不可硬链接" class="headerlink" title="目录不可硬链接"></a>目录不可硬链接</h4><h3 id="重命名（移动）目录"><a href="#重命名（移动）目录" class="headerlink" title="重命名（移动）目录"></a>重命名（移动）目录</h3><p>mv 源目录 目标目录</p>
<h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><p>rm -r[f] 源目录 </p>
<p>-r 递归</p>
<p>-f 强制删除</p>
<p>rm -rf / 删除全部文件</p>
<h2 id="查看文件信息"><a href="#查看文件信息" class="headerlink" title="查看文件信息"></a>查看文件信息</h2><p>ls -l[hdi]</p>
<p>-l 以列表的形式展示</p>
<p>-h 优化文件大小的可读性</p>
<p>-i 展示文件的信息</p>
<p>-c 排序 按最后修改时间</p>
<p>文件信息 = 节点号 + 文件类型及权限 + 硬链接数 + 属主 + 所归属的组 + 文件或目录的大小 + 最近修改时间 + 文件或目录名</p>
<p>ls -ld */ 指数出目录，而不输出文件</p>
<p>文件类型及权限，第一个字符为d代表文件夹，为-表示是文件</p>
<h2 id="linux-统计技巧"><a href="#linux-统计技巧" class="headerlink" title="linux 统计技巧"></a>linux 统计技巧</h2><p>grep </p>
<p>“^d” 表示目录</p>
<p>“^-“ 表示文件</p>
<p>wc （word count） -l（line）-c(character)</p>
<p>查看当前目录下的文件数量（不包含子目录中的文件）</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -l <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^-"</span> <span class="token operator">|</span> <span class="token function">wc</span></code></pre>
<p>查看当前目录下的文件数量（包含子目录的文件），注意，R，代表递归子目录</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -lR <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^-"</span> <span class="token operator">|</span> <span class="token function">wc</span></code></pre>
<p>使用通配符查询目录下的所有文件数量</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -lR 20161124*/ <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^-"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l</code></pre>
<h2 id="Linux-文件属性"><a href="#Linux-文件属性" class="headerlink" title="Linux 文件属性"></a>Linux 文件属性</h2><p>stat 命令（display file or file system status）</p>
<p>stat -f, —file-system</p>
<p>atime(Access time) 最后一次访问文件或目录的时间</p>
<p>mtime(modify time) 最后一次修改文件或目录的时间</p>
<p>ctime(change time) 最后一次改变文件或目录的时间</p>
<h2 id="Linux-文件类型"><a href="#Linux-文件类型" class="headerlink" title="Linux 文件类型"></a>Linux 文件类型</h2><h3 id="普通文件类型"><a href="#普通文件类型" class="headerlink" title="普通文件类型"></a>普通文件类型</h3><ul>
<li>纯文本文件</li>
<li>二进制文件</li>
<li>数据格式的文件</li>
<li>各种压缩文件</li>
<li>第一个属性为 [-]</li>
</ul>
<h3 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h3><ul>
<li>能用 # cd 命令进入的</li>
<li>第一个属性为 [d]，例如 [drwxrwxrwx]</li>
</ul>
<h3 id="块设备文件"><a href="#块设备文件" class="headerlink" title="块设备文件"></a>块设备文件</h3><ul>
<li>就是存储数据以供系统存取的接口设备，简单而言就是硬盘。例如一号硬盘的代码时 /dev/hda1 等文件</li>
<li>第一个属性为 [b]</li>
</ul>
<h3 id="字符设备文件"><a href="#字符设备文件" class="headerlink" title="字符设备文件"></a>字符设备文件</h3><ul>
<li>串行端口的接口设备，例如键盘、鼠标等等。</li>
<li>第一个属性名为 [c]</li>
</ul>
<h3 id="套接字文件"><a href="#套接字文件" class="headerlink" title="套接字文件"></a>套接字文件</h3><ul>
<li>这类文件通常用在网络数据链接。</li>
<li>可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。</li>
<li>第一个属性为 [s]</li>
<li>最常在 /var/run 目录中看到这种类型</li>
</ul>
<h3 id="管道文件"><a href="#管道文件" class="headerlink" title="管道文件"></a>管道文件</h3><ul>
<li>FIFO 也是一种特殊的文件类型</li>
<li>它主要的目的是，解决多个程序同时存取一个文件所造成的错误</li>
<li>第一个属性为 [p]</li>
</ul>
<h3 id="链接文件-1"><a href="#链接文件-1" class="headerlink" title="链接文件"></a>链接文件</h3><ul>
<li>蕾丝windows 的快捷方式。</li>
<li>软链接，第一个属性为 [l]</li>
</ul>
<h2 id="Linux-文件与目录查找技巧"><a href="#Linux-文件与目录查找技巧" class="headerlink" title="Linux 文件与目录查找技巧"></a>Linux 文件与目录查找技巧</h2><p>find path [-option] [-print] [exec -ok command] {} \</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ls -l a*</span>
<span class="token comment" spellcheck="true"># find -name a</span>
<span class="token comment" spellcheck="true"># find -name "a*"</span>
<span class="token comment" spellcheck="true"># find -name "*copy"</span>
<span class="token comment" spellcheck="true"># find -name "a*" -type f</span>
<span class="token comment" spellcheck="true"># find -name "a*" -type d</span>
<span class="token comment" spellcheck="true"># find -name "a*" -type d -maxdepth 1</span>
<span class="token comment" spellcheck="true"># find -maxdepth 3 -type f -exec rm -rf {} +</span>
<span class="token comment" spellcheck="true"># find -maxdepth 1 -type f -exec cat {} +</span></code></pre>
<ul>
<li>-name</li>
<li>-perm 执行权限来查找</li>
<li>-user 按文件属主来查找</li>
<li>-group 按组来查找</li>
<li>-ctime -1 一天之内创建的文件</li>
<li>-mtime +1 一天之前修改的文件</li>
<li>-atime 按文件的访问时间来查</li>
<li>-nogroup 查找无有效属组的文件</li>
<li>-nouser 查找无有效属主的文件</li>
<li>-newer f1 !f2  查找更改时间比 f1 新 但比 f2 旧的文件</li>
<li>-type b/d/c/p/l/f 块设备，目录，字符设备，管道，链接，文件</li>
<li>-size n[c] 查找长度为 n 块或 n 字节的文件</li>
<li>-depth 使查找在进入子目录之前先行查找完本目录</li>
<li>-fstype 查找位于某一类型文件系统中的文件，这些文件系统类型通常可在 /etc/fstab中找到</li>
<li>-mount 查找文件时，不跨越文件系统 mount 点</li>
<li>-follow 如果遇到符号链接文件，就跟踪链接所指的文件</li>
<li>-cpio 对匹配文件使用cpio 命令，将他们备份到磁带设备中</li>
<li>-prune 忽略某个目录</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>CentOS</tag>
        <tag>待续</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2020/06/02/algorithms/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<p>1</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>alist<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">"二分查找，递归版本"</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>
    <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
        mid <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> alist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">elif</span> alist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> item<span class="token punctuation">:</span>
            <span class="token keyword">return</span> binary_search<span class="token punctuation">(</span>alist<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> binary_search<span class="token punctuation">(</span>alist<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre>
<p>2</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search_2</span><span class="token punctuation">(</span>alist<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">"二分查找，非递归版本"</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>
    first <span class="token operator">=</span> <span class="token number">0</span>
    end <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> end <span class="token operator">>=</span> first<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>first <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> alist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">elif</span> alist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> item<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># 右边查找</span>
            first <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># 左边查找</span>
            end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2020/06/02/algorithms/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span>
<span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">"冒泡排序"</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 产生了 n - 1 次</span>
        count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> alist<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> alist<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                count <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
    <span class="token keyword">return</span> alist


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>bubble_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Python</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>imooc 前端入门人工智能</title>
    <url>/2020/06/02/ai/imooc%20%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    <content><![CDATA[<h1 id="第2章-机器学习与神经网络简介"><a href="#第2章-机器学习与神经网络简介" class="headerlink" title="第2章 机器学习与神经网络简介"></a>第2章 机器学习与神经网络简介</h1><h2 id="2-1-机器学习简介"><a href="#2-1-机器学习简介" class="headerlink" title="2-1 机器学习简介"></a>2-1 机器学习简介</h2><h3 id="2-1-1-机器学习是什么？"><a href="#2-1-1-机器学习是什么？" class="headerlink" title="2-1-1 机器学习是什么？"></a>2-1-1 机器学习是什么？</h3><ul>
<li>机器学习是指对能通过 <strong><em>经验</em></strong> 自动改进的计算机算法的研究。</li>
<li>机器学习使用 <strong><em>数据</em></strong> 或以往的 <strong><em>经验</em></strong> ，以此优化计算机程序的性能标准。</li>
</ul>
<h3 id="2-1-2-机器学习例子（以往的经验-数据）"><a href="#2-1-2-机器学习例子（以往的经验-数据）" class="headerlink" title="2-1-2 机器学习例子（以往的经验 / 数据）"></a>2-1-2 机器学习例子（以往的经验 / 数据）</h3><ul>
<li>用很多男子的脚长的平均值，估计男子脚长</li>
<li>线性回归<ul>
<li>身高体重预测</li>
<li>房价预测（面积、价格）</li>
</ul>
</li>
<li>逻辑回归</li>
<li>语音助手</li>
</ul>
<h3 id="2-1-3-为何要用机器学习？"><a href="#2-1-3-为何要用机器学习？" class="headerlink" title="2-1-3 为何要用机器学习？"></a>2-1-3 为何要用机器学习？</h3><ul>
<li>有些棘手问题只能用机器学习来解决（程序员写代码来解决，可能吗？）</li>
<li>获取数据比编写规则更加容易</li>
<li>GPU 等计算能力显著提升（使用机器学习成本将下来了）</li>
</ul>
<h3 id="2-1-3-机器学习如何运作？"><a href="#2-1-3-机器学习如何运作？" class="headerlink" title="2-1-3 机器学习如何运作？"></a>2-1-3 机器学习如何运作？</h3><ul>
<li>神经网络（重点）</li>
<li>决策树、支持向量机、贝叶斯分类器、强化学习….</li>
</ul>
<h2 id="2-2-神经网络简介"><a href="#2-2-神经网络简介" class="headerlink" title="2-2 神经网络简介"></a>2-2 神经网络简介</h2><ul>
<li><p>运算模型（输入到输出的映射）</p>
</li>
<li><p>人工神经网络是一种运算模型（就是输入输出的映射），由大量的节点（或称神经元）之间相互连接构成</p>
</li>
<li><p>下图，用输入相亲对象的信息，得出是否满意。</p>
</li>
</ul>
<p>![image-20200208093440239](/Users/lvjiawen/Library/Application Support/typora-user-images/image-20200208093440239.png)</p>
<ul>
<li>其他复杂因素：<ul>
<li>偏置</li>
<li>激活函数，到一定程度就可以了，不要再线性增长了</li>
<li>权重</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>每个神经元里存储着若干权重（weight）、偏置（bias）、和一个激活函数（activation）</li>
<li>输入乘上权重加上偏置，经过激活函数得到输出</li>
<li>激活函数用于添加一些非线性的变化</li>
<li>神经网络通常包含一个输入层、若干隐藏层，一个输出层，输入层通常不用于计算神经网络的层数</li>
</ul>
<h3 id="2-3-神经网络的训练"><a href="#2-3-神经网络的训练" class="headerlink" title="2-3 神经网络的训练"></a>2-3 神经网络的训练</h3><h3 id="什么是神经网络的训练？"><a href="#什么是神经网络的训练？" class="headerlink" title="什么是神经网络的训练？"></a>什么是神经网络的训练？</h3><ul>
<li><p>给大量输入和输出，算出神经网络里所有神经元的权重、偏置，然后给定新的输入，可以算出新的输出</p>
</li>
<li><p>在机器学习力，输入输出被称为 <strong><em>特征</em></strong> 和 <strong><em>标签</em></strong> ，大连输入输出被称为 <strong><em>训练集</em></strong></p>
</li>
<li><p>给1000 个相亲对象的数据（特征），和对应的满意程度（标签），训练完后，给一份新的相亲对象的数据，就可以判断满意程度了。</p>
</li>
</ul>
<h3 id="如何训练神经网络？"><a href="#如何训练神经网络？" class="headerlink" title="如何训练神经网络？"></a>如何训练神经网络？</h3><ul>
<li>初始化：随机生成一些权重和偏置</li>
<li>计算损失：给定特征，计算出标签，得到它与真实标签差的多远</li>
<li>优化：微调权重和偏置，使损失变小</li>
</ul>
<h3 id="前向传播与反向传播"><a href="#前向传播与反向传播" class="headerlink" title="前向传播与反向传播"></a>前向传播与反向传播</h3><ul>
<li>前向传播：将训练的数据的特征送入网络，得到标签（第一 =》 第二层 =》。。。 =》 最后一层）</li>
<li>反向传播：计算损失并优化（先调整最后一层，再调整倒数第二层）<ul>
<li>注：原理见微积分的链式法则</li>
</ul>
</li>
</ul>
<h3 id="如何计算损失？"><a href="#如何计算损失？" class="headerlink" title="如何计算损失？"></a>如何计算损失？</h3><ul>
<li>使用 <strong><em>损失函数</em></strong>（科学家研究出来的）</li>
<li>例如：均方误差、对数损失、交叉熵</li>
<li>了解原理即可，工作中可以直接从第三方库中调用</li>
</ul>
<h3 id="如何优化？"><a href="#如何优化？" class="headerlink" title="如何优化？"></a>如何优化？</h3><ul>
<li>使用 <strong><em>优化器</em></strong> （科学家研究出来的）</li>
<li>例如：随机梯度下降（SGD）、Adam</li>
<li>了解原理即可，工作中可以直接从第三方库中调用</li>
</ul>
<h1 id="第3章-Tensorflow-js-简介"><a href="#第3章-Tensorflow-js-简介" class="headerlink" title="第3章 Tensorflow.js 简介"></a>第3章 Tensorflow.js 简介</h1><h2 id="3-1-Tensorflow-js-是什么"><a href="#3-1-Tensorflow-js-是什么" class="headerlink" title="3-1 Tensorflow.js 是什么"></a>3-1 Tensorflow.js 是什么</h2><h3 id="Tensorflow-js-是什么"><a href="#Tensorflow-js-是什么" class="headerlink" title="Tensorflow.js 是什么"></a>Tensorflow.js 是什么</h3><ul>
<li>一个用 javascript 实现的机器学习库</li>
<li>可以直接在浏览器和 Node.js 中使用机器学习技术了</li>
</ul>
<h3 id="Tensorflow-js-具体功能"><a href="#Tensorflow-js-具体功能" class="headerlink" title="Tensorflow.js 具体功能"></a>Tensorflow.js 具体功能</h3><ul>
<li>运行现有模型</li>
<li>重新训练现有模型</li>
<li>使用 javascript 开发机器学习模型</li>
</ul>
<h2 id="3-2-安装-Tensorflow-js"><a href="#3-2-安装-Tensorflow-js" class="headerlink" title="3-2 安装 Tensorflow.js"></a>3-2 安装 Tensorflow.js</h2><h3 id="在浏览器中安装"><a href="#在浏览器中安装" class="headerlink" title="在浏览器中安装"></a>在浏览器中安装</h3><ul>
<li>使用 script 标签<ul>
<li>使用 <code>npm i nrm -g</code>，然后 <code>nrm ls</code>，然后 <code>nrm use taobao</code>，安装 http-server <code>npm i http-server -g</code>，使用http-server 命令行输入 <code>hs</code> 即可</li>
</ul>
</li>
<li>使用 npm 包安装，并使用 parcel 或者 webpack 构建<ul>
<li><code>npm install @tensorflow/tfjs</code></li>
<li><code>npm install -g parcel-bundler</code></li>
</ul>
</li>
</ul>
<h3 id="在-Node-js-中安装"><a href="#在-Node-js-中安装" class="headerlink" title="在 Node.js 中安装"></a>在 Node.js 中安装</h3><ul>
<li>安装带有原生 C++ 绑定的 TensorFlow.js（推荐，但是麻烦）<ul>
<li>安装 node-gyp，专门用来构建底层库<ul>
<li>windows：<code>npm i node-gyp windows-build-tools@4.0.0 -g</code></li>
</ul>
</li>
<li></li>
</ul>
</li>
<li>在 GPU 上安装 TensorFlow.js</li>
<li>安装纯 Javascript 版本，这是性能方面最慢的选项</li>
</ul>
<h2 id="3-3-为何要用-Tensor？"><a href="#3-3-为何要用-Tensor？" class="headerlink" title="3-3 为何要用 Tensor？"></a>3-3 为何要用 Tensor？</h2><h3 id="什么是-Tensor？"><a href="#什么是-Tensor？" class="headerlink" title="什么是 Tensor？"></a>什么是 Tensor？</h3><ul>
<li>中文名字是 <strong><em>张量</em></strong></li>
<li>张量是向量和矩阵向更高维度的推广</li>
<li>相当于多维数组，但是有别的属性，例如形状、大小，关注rank，size，shape</li>
</ul>
<h3 id="Tensor-和机器学习有什么关系？"><a href="#Tensor-和机器学习有什么关系？" class="headerlink" title="Tensor 和机器学习有什么关系？"></a>Tensor 和机器学习有什么关系？</h3><ul>
<li><p>神经网络是什么样子</p>
</li>
<li><p>如果放你设计神经网络的数据结构，你会怎么设计？</p>
<ul>
<li>上面例子中</li>
<li>五官、身材、学历、家境，作为输入的数值</li>
<li>那形象这个神经元举例，他要存储五官、身材、学历、家境这四个输入的权重。财富、品质、有趣是一样的</li>
<li>形象、财富、品质、有趣乘以各自的权重得到满意程度，满意程度之中包含了形象、财富、品质、有趣的权重</li>
<li>按照这个例子，每一个神经元是一个四个元素的数组，每一层的神经元可以设计成一个二维数组</li>
<li>这个例子中一层要进行两次循环</li>
</ul>
<h3 id="神经网络数据结构设计"><a href="#神经网络数据结构设计" class="headerlink" title="神经网络数据结构设计"></a>神经网络数据结构设计</h3><ul>
<li>神经网络每一层要存储 N 堆数据</li>
<li>N 层的 For 循环运算</li>
<li>Tensor 作为高位数据结构完美解决以上问题</li>
</ul>
</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> tf <span class="token keyword">from</span> <span class="token string">'@tensorflow/tfjs'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 传统 for 循环</span>
<span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> w<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 使用 tensor</span>
tf<span class="token punctuation">.</span><span class="token function">tensor</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span><span class="token function">tensor</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>数学原理，点乘，旋转</p>
</blockquote>
<h1 id="第4章-线性回归"><a href="#第4章-线性回归" class="headerlink" title="第4章 线性回归"></a>第4章 线性回归</h1><h2 id="4-1-线性回归任务简介"><a href="#4-1-线性回归任务简介" class="headerlink" title="4-1 线性回归任务简介"></a>4-1 线性回归任务简介</h2><h3 id="什么是线性回归？"><a href="#什么是线性回归？" class="headerlink" title="什么是线性回归？"></a>什么是线性回归？</h3><ul>
<li>利用数理统计中回归分析，来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法</li>
<li>例子：身高体重数据，预测身高体重</li>
</ul>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>准备、可视化训练数据</li>
<li>使用 Tensorflow.js 的 API 构建神经网络</li>
<li>训练模型并预测</li>
</ul>
<h2 id="4-2-准备、可视化训练数据"><a href="#4-2-准备、可视化训练数据" class="headerlink" title="4-2 准备、可视化训练数据"></a>4-2 准备、可视化训练数据</h2><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>准备线性回归训练数据</li>
<li>使用 tfvis 可视化训练数据</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> tfvis <span class="token keyword">from</span> <span class="token string">'@tensorflow/tfjs-vis'</span>

window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> xs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> ys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// 散点图</span>
  tfvis<span class="token punctuation">.</span>render<span class="token punctuation">.</span><span class="token function">scatterplot</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'线性回归训练集'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> values<span class="token punctuation">:</span> xs
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          x<span class="token punctuation">,</span>
          y<span class="token punctuation">:</span> ys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> xAxisDomain<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> yAxisDomain<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="4-3-定义模型结构：单层单个神经元组成的神经网络"><a href="#4-3-定义模型结构：单层单个神经元组成的神经网络" class="headerlink" title="4-3 定义模型结构：单层单个神经元组成的神经网络"></a>4-3 定义模型结构：单层单个神经元组成的神经网络</h3><h3 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>初始化一个神经网络模型</li>
<li>为神经网络添加层</li>
<li>设计层的神经元个数 和 输入形状（inputShape）</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 连续的模型，这一层的输入是下一层的输出</span>
  <span class="token keyword">const</span> model <span class="token operator">=</span> tf<span class="token punctuation">.</span><span class="token function">sequential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// 给模型添加层</span>
  <span class="token comment" spellcheck="true">// dense 全链接层</span>
  model<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>layers<span class="token punctuation">.</span><span class="token function">dense</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    units<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 神经元个数</span>
    inputShape<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 输入形状</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>imooc 实战</tag>
      </tags>
  </entry>
  <entry>
    <title>imooc-JavaScript版 数据结构与算法笔记</title>
    <url>/2020/06/02/algorithms/imooc-JavaScript%E7%89%88%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h2><h3 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h3><ol>
<li>通过解题，夯实基础算法</li>
<li>理解算法的本质是学会挖掘规律</li>
<li>举一反三学会变通和延伸</li>
</ol>
<h3 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h3><ol>
<li>基础算法<ol>
<li>字符串<ol>
<li>反转字符串中的单词</li>
<li>计算二进制子串</li>
</ol>
</li>
<li>数组<ol>
<li>电话号码组合</li>
<li>卡牌分组</li>
<li>种花问题</li>
<li>格雷编码</li>
</ol>
</li>
<li>正则表达式<ol>
<li>重复的子字符串</li>
<li>正则表达式匹配</li>
</ol>
</li>
<li>排序<ol>
<li>冒泡排序</li>
<li>选择排序</li>
<li>按奇偶排序数组</li>
<li>数组中的第K个最大元素</li>
<li>最大间距</li>
<li>缺失的第一个正数</li>
</ol>
</li>
<li>递归<ol>
<li>复原 IP 地址</li>
<li>与所有单词相关联的字符串</li>
</ol>
</li>
</ol>
</li>
<li>数据结构<ol>
<li>堆<ol>
<li>根据字符出现频率排序</li>
<li>超级丑数</li>
</ol>
</li>
<li>栈<ol>
<li>棒球比赛</li>
<li>最大矩形</li>
</ol>
</li>
<li>队列<ol>
<li>设计循环队列</li>
<li>任务调度器</li>
</ol>
</li>
<li>链表<ol>
<li>排序链表</li>
<li>环形链表</li>
</ol>
</li>
<li>矩阵<ol>
<li>螺旋矩阵</li>
<li>旋转图像</li>
</ol>
</li>
<li>二叉树<ol>
<li>对称二叉树</li>
<li>验证二叉树</li>
</ol>
</li>
</ol>
</li>
<li>进阶算法<ol>
<li>贪心算法<ol>
<li>买卖股票的最佳世纪</li>
<li>柠檬水找零</li>
</ol>
</li>
<li>动态规划<ol>
<li>不同路径II</li>
<li>K 站中转内最便宜的航班</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>避免浮躁、按部就班</li>
<li>不投机取巧、循序渐</li>
</ol>
<h3 id="学习姿势"><a href="#学习姿势" class="headerlink" title="学习姿势"></a>学习姿势</h3><ul>
<li>目的：<ul>
<li>面试：见多识广、反应迅速、过程大于结果</li>
<li>进阶：打开思路、快速迭代、精益求精</li>
</ul>
</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>基础知识：ES6 + Jest + NPM + Git</p>
<p>知识：<a href="https://github.com/cucygh/fe-material" target="_blank" rel="noopener">https://github.com/cucygh/fe-material</a></p>
<p>源码核心配置文件 <code>.babelrc</code>， <code>.eslintrc.js</code>，<code>packgage.json</code></p>
<p>使用源码步骤：<code>git clone 源码地址 leetcode</code></p>
<p>分支</p>
<ul>
<li>master 分支：环境搭建原始内容，<code>git checkout master</code></li>
<li>dev 分支：所有源码，<code>git checkout dev</code></li>
<li>代码改动，而且没有提交，这个时候 checkout 会失败</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2020/06/02/algorithms/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span>
<span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">,</span> first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> first <span class="token operator">>=</span> last<span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    mid_value <span class="token operator">=</span> alist<span class="token punctuation">[</span>first<span class="token punctuation">]</span>
    low <span class="token operator">=</span> first
    high <span class="token operator">=</span> last
    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>
        <span class="token keyword">while</span> alist<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> mid_value<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># high 左移</span>
            high <span class="token operator">-=</span> <span class="token number">1</span>
        alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>high<span class="token punctuation">]</span>
        <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high <span class="token operator">and</span> alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid_value<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># low 右移</span>
            low <span class="token operator">+=</span> <span class="token number">1</span>
        alist<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># 从整个循环退出来的时候 ，low == high</span>
    alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> mid_value
    <span class="token comment" spellcheck="true"># 对 low 左边的列表执行快排</span>
    quick_sort<span class="token punctuation">(</span>alist<span class="token punctuation">,</span> first<span class="token punctuation">,</span> low <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 对 low 右边的列表执行快排</span>
    quick_sort<span class="token punctuation">(</span>alist<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> last<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
    quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Python</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/2020/06/02/algorithms/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span>

<span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># for i in range(j + 1, 0, -1):</span>
        <span class="token comment" spellcheck="true">#     if (alist[i] &lt; alist[i - 1]):</span>
        <span class="token comment" spellcheck="true">#         alist[i - 1], alist[i] = alist[i], alist[i - 1]</span>
        <span class="token comment" spellcheck="true">#     else:</span>
        <span class="token comment" spellcheck="true">#         break</span>

        i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">while</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> alist<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                alist<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> alist<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
                i <span class="token operator">-=</span><span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
    <span class="token keyword">return</span> alist


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>insert_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
    li2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>insert_sort<span class="token punctuation">(</span>li2<span class="token punctuation">)</span><span class="token punctuation">)</span>
    li3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>insert_sort<span class="token punctuation">(</span>li3<span class="token punctuation">)</span><span class="token punctuation">)</span>
    li4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>insert_sort<span class="token punctuation">(</span>li4<span class="token punctuation">)</span><span class="token punctuation">)</span>
    li5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>insert_sort<span class="token punctuation">(</span>li5<span class="token punctuation">)</span><span class="token punctuation">)</span>
    li6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>insert_sort<span class="token punctuation">(</span>li6<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Python</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重</title>
    <url>/2020/06/02/algorithms/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 数组去重</span>
<span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/* 方案1 SET */</span> 
<span class="token comment" spellcheck="true">// let arr = [...new Set(ary)]</span>
<span class="token comment" spellcheck="true">// let arr = Array.from(new Set(ary))</span>


<span class="token comment" spellcheck="true">/* 方案2 拿出当前项和后面的内容进行比较 */</span>
<span class="token comment" spellcheck="true">// 用当前项和后面的项去比较</span>
<span class="token comment" spellcheck="true">// 双重 for 循环</span>
<span class="token comment" spellcheck="true">/* 方案2.1 */</span> 
<span class="token comment" spellcheck="true">// for (let i = 0; i&lt; ary.length - 1; i++) {</span>
<span class="token comment" spellcheck="true">//   let item = ary[i]</span>
<span class="token comment" spellcheck="true">//   let left  = ary.slice(i+1)</span>
<span class="token comment" spellcheck="true">//   if (left.indexOf(item) >= 0) {</span>
<span class="token comment" spellcheck="true">//     // splice 删除的问题：</span>
<span class="token comment" spellcheck="true">//     // 1. 数组塌陷</span>
<span class="token comment" spellcheck="true">//     // 2. 性能不好</span>
<span class="token comment" spellcheck="true">//     ary.splice(i, 1)</span>
<span class="token comment" spellcheck="true">//     i--</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">// }</span>

<span class="token comment" spellcheck="true">/* 方案2.2 */</span>
<span class="token comment" spellcheck="true">// 每一个新数组都是一个堆</span>
<span class="token comment" spellcheck="true">// let arr = []</span>
<span class="token comment" spellcheck="true">// for (let i = 0; i&lt;= ary.length - 1; i++) {</span>
<span class="token comment" spellcheck="true">//   let item = ary[i]</span>
<span class="token comment" spellcheck="true">//   let left  = ary.slice(i+1)</span>
<span class="token comment" spellcheck="true">//   if (left.indexOf(item) === -1) {</span>
<span class="token comment" spellcheck="true">//     arr.push(item)</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">// }</span>

<span class="token comment" spellcheck="true">/* 方案2.3 */</span>
<span class="token comment" spellcheck="true">// 赋值为 null 再 filter 一下</span>
<span class="token comment" spellcheck="true">// for (let i = 0; i&lt; ary.length - 1; i++) {</span>
<span class="token comment" spellcheck="true">//   let item = ary[i]</span>
<span class="token comment" spellcheck="true">//   let left  = ary.slice(i+1)</span>
<span class="token comment" spellcheck="true">//   if (left.indexOf(item) >= 0) {</span>
<span class="token comment" spellcheck="true">//     ary[i] = null</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">// }</span>
<span class="token comment" spellcheck="true">// let arr = ary</span>
<span class="token comment" spellcheck="true">// arr = ary.filter(item => item !== null)</span>

<span class="token comment" spellcheck="true">/* 方案2.4 */</span>
<span class="token comment" spellcheck="true">// 用最后一项替换</span>
<span class="token comment" spellcheck="true">// for (let i = 0; i&lt; ary.length - 1; i++) {</span>
<span class="token comment" spellcheck="true">//   let item = ary[i]</span>
<span class="token comment" spellcheck="true">//   let left  = ary.slice(i+1)</span>
<span class="token comment" spellcheck="true">//   if (left.indexOf(item) >= 0) {</span>
<span class="token comment" spellcheck="true">//     ary[i] = ary[ary.length - 1]</span>
<span class="token comment" spellcheck="true">//     ary.length</span>
<span class="token comment" spellcheck="true">//     i--</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">// }</span>
<span class="token comment" spellcheck="true">// let arr = ary</span>

<span class="token comment" spellcheck="true">/* 方案3 */</span>
<span class="token comment" spellcheck="true">// 创建空容器，拿出一项，放到空容器中，之前看看还有没有</span>
<span class="token comment" spellcheck="true">/* 方案3.1 对象键值对 */</span>
<span class="token comment" spellcheck="true">// let obj = {}</span>
<span class="token comment" spellcheck="true">// for (let i = 0; i &lt; ary.length; i++) {</span>
<span class="token comment" spellcheck="true">//   let item = ary[i]</span>
<span class="token comment" spellcheck="true">//   if(typeof obj[item] !== 'undefined') {</span>
<span class="token comment" spellcheck="true">//     ary[i] = ary[ary.length - 1]</span>
<span class="token comment" spellcheck="true">//     ary.length--</span>
<span class="token comment" spellcheck="true">//     i--</span>
<span class="token comment" spellcheck="true">//     continue</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">//   obj[ary[i]] = ary[i]</span>
<span class="token comment" spellcheck="true">// }</span>
<span class="token comment" spellcheck="true">// obj = null</span>
<span class="token comment" spellcheck="true">// let arr = ary</span>

<span class="token comment" spellcheck="true">/* 方案3.2 数组 */</span>
<span class="token comment" spellcheck="true">// let arr = []</span>
<span class="token comment" spellcheck="true">// for (let i = 0; i &lt; ary.length; i++) {</span>
<span class="token comment" spellcheck="true">//   let item = ary[i]</span>
<span class="token comment" spellcheck="true">//   if (arr.indexOf(item) === -1) {</span>
<span class="token comment" spellcheck="true">//     arr.push(item)</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">// }</span>

<span class="token comment" spellcheck="true">/* 方案4 先排序，相邻项比较，给予正则 */</span> 

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2020/06/02/algorithms/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span>
<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> alist
    mid <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>

    <span class="token comment" spellcheck="true"># 采用归并排序后形成的有序的，新的列表</span>
    left_li <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>alist<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
    right_li <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>alist<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 将两个有序的子序列合并为一个新的整体</span>
    left_pointer<span class="token punctuation">,</span> right_pointer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> left_pointer <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>left_li<span class="token punctuation">)</span> <span class="token operator">and</span> right_pointer <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>right_li<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> left_li<span class="token punctuation">[</span>left_pointer<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right_li<span class="token punctuation">[</span>right_pointer<span class="token punctuation">]</span><span class="token punctuation">:</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left_li<span class="token punctuation">[</span>left_pointer<span class="token punctuation">]</span><span class="token punctuation">)</span>
            left_pointer <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right_li<span class="token punctuation">[</span>right_pointer<span class="token punctuation">]</span><span class="token punctuation">)</span>
            right_pointer <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token comment" spellcheck="true"># 越界的切片返回空数组</span>
    result <span class="token operator">+=</span> left_li<span class="token punctuation">[</span>left_pointer<span class="token punctuation">:</span><span class="token punctuation">]</span>
    result <span class="token operator">+=</span> right_li<span class="token punctuation">[</span>right_pointer<span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> result


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>merge_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Python</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2020/06/02/algorithms/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span>
<span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">"选择排序"</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 产生了 n - 2次</span>
        min <span class="token operator">=</span> i
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> alist<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                min <span class="token operator">=</span> j
        alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> alist<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">,</span> alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">return</span> alist


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>select_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Python</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2020/06/02/algorithms/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span>
<span class="token comment" spellcheck="true"># coding:utf-8</span>
<span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>
    gap <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>
    <span class="token keyword">while</span> gap <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 希尔排序与普通的插入算法的区别就是步长</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>gap<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            i <span class="token operator">=</span> j
            <span class="token keyword">while</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> alist<span class="token punctuation">[</span>i <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> alist<span class="token punctuation">[</span>i <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>i <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">,</span> alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                    i <span class="token operator">-=</span> gap
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">break</span>
        <span class="token comment" spellcheck="true"># 缩短 gap 步长</span>
        gap <span class="token operator">//=</span> <span class="token number">2</span>
    <span class="token keyword">return</span> alist


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>shell_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
    li2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>shell_sort<span class="token punctuation">(</span>li2<span class="token punctuation">)</span><span class="token punctuation">)</span>
    li3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>shell_sort<span class="token punctuation">(</span>li3<span class="token punctuation">)</span><span class="token punctuation">)</span>
    li4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>shell_sort<span class="token punctuation">(</span>li4<span class="token punctuation">)</span><span class="token punctuation">)</span>
    li5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>shell_sort<span class="token punctuation">(</span>li5<span class="token punctuation">)</span><span class="token punctuation">)</span>
    li6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>shell_sort<span class="token punctuation">(</span>li6<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Python</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 数据类型</title>
    <url>/2020/02/19/code-section/JS%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="JS-数据类型"><a href="#JS-数据类型" class="headerlink" title="JS 数据类型"></a>JS 数据类型</h1><blockquote>
<p>每个对象都有一个 toString() 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，toString() 方法被每个 Object 对象继承。如果此方法在自定义对象中未被覆盖，toString() 返回 “[object type]”，其中 type 是对象的类型。  —MDN</p>
</blockquote>
<p>事实上，比如Array、Date、RegExp等都重写了toString方法。为了防止或得到被覆盖的值，我们通常直接调用Object原型上未被覆盖的toString()方法，使用call来改变this指向来达到我们想要的效果。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> target<span class="token punctuation">;</span>
    <span class="token keyword">return</span> target <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> mapTag <span class="token operator">=</span> <span class="token string">'[object Map]'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> setTag <span class="token operator">=</span> <span class="token string">'[object Set]'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arrayTag <span class="token operator">=</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> objectTag <span class="token operator">=</span> <span class="token string">'[object Object]'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> boolTag <span class="token operator">=</span> <span class="token string">'[object Boolean]'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> dateTag <span class="token operator">=</span> <span class="token string">'[object Date]'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> errorTag <span class="token operator">=</span> <span class="token string">'[object Error]'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> numberTag <span class="token operator">=</span> <span class="token string">'[object Number]'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regexpTag <span class="token operator">=</span> <span class="token string">'[object RegExp]'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stringTag <span class="token operator">=</span> <span class="token string">'[object String]'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> symbolTag <span class="token operator">=</span> <span class="token string">'[object Symbol]'</span><span class="token punctuation">;</span>
</code></pre>
<table>
<thead>
<tr>
<th align="left">代码</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Object.prototype.toString.call(true)</td>
<td align="left">“[object Boolean]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(123)</td>
<td align="left">“[object Number]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(“string”)</td>
<td align="left">“[object String]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(null)</td>
<td align="left">“[object Null]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(undefined)</td>
<td align="left">“[object Undefined]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(Symbol())</td>
<td align="left">“[object Symbol]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call({})</td>
<td align="left">“[object Object]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(function(){})</td>
<td align="left">“[object Function]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call([])</td>
<td align="left">“[object Array]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(new Error())</td>
<td align="left">“[object Error]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(new RegExp())</td>
<td align="left">“[object RegExp]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(Math)</td>
<td align="left">“[object Math]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(JSON)</td>
<td align="left">“[object JSON]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(document)</td>
<td align="left">“[object HTMLDocument]”</td>
</tr>
<tr>
<td align="left">Object.prototype.toString.call(window)</td>
<td align="left">“[object Window]”</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>一段代码</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>debounce 防抖</title>
    <url>/2020/06/01/code-section/debounce/</url>
    <content><![CDATA[<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>防抖函数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token id">#container</span> </span><span class="token punctuation">{</span>
      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#444444</span><span class="token punctuation">;</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>使用场景：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>监听 window 的 resize、scroll<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>监听鼠标的 mousedown、mouseover<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>监听键盘的 keyup、keydown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取消debounce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getUserAction</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 第 0 版</span>
<span class="token comment" spellcheck="true">// container.onmousemove = getUserAction;</span>

<span class="token comment" spellcheck="true">// 第一版</span>
<span class="token comment" spellcheck="true">// function debounce(func, wait) {</span>
<span class="token comment" spellcheck="true">//   var timeout;</span>
<span class="token comment" spellcheck="true">//   return function() {</span>
<span class="token comment" spellcheck="true">//     clearInterval(timeout)</span>
<span class="token comment" spellcheck="true">//     timeout = setTimeout(func, wait)</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">// }</span>

<span class="token comment" spellcheck="true">// 第二版</span>
<span class="token comment" spellcheck="true">// 修复 this</span>
<span class="token comment" spellcheck="true">// function debounce(func, wait) {</span>
<span class="token comment" spellcheck="true">//   var timeout;</span>
<span class="token comment" spellcheck="true">//   return function() {</span>
<span class="token comment" spellcheck="true">//     var context = this;</span>
<span class="token comment" spellcheck="true">//     clearInterval(timeout)</span>
<span class="token comment" spellcheck="true">//     timeout = setTimeout(function() {</span>
<span class="token comment" spellcheck="true">//       func.apply(context)</span>
<span class="token comment" spellcheck="true">//     }, wait)</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">// }</span>

<span class="token comment" spellcheck="true">// 第三版</span>
<span class="token comment" spellcheck="true">// 修复event</span>
<span class="token comment" spellcheck="true">// function debounce(func, wait) {</span>
<span class="token comment" spellcheck="true">//   var timeout;</span>
<span class="token comment" spellcheck="true">//   return function() {</span>
<span class="token comment" spellcheck="true">//     var context = this;</span>
<span class="token comment" spellcheck="true">//     var args = arguments;</span>

<span class="token comment" spellcheck="true">//     clearInterval(timeout);</span>
<span class="token comment" spellcheck="true">//     timeout = setTimeout(function() {</span>
<span class="token comment" spellcheck="true">//       func.apply(context, args)</span>
<span class="token comment" spellcheck="true">//     }, wait);</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">// }</span>

<span class="token comment" spellcheck="true">// 第四版</span>
<span class="token comment" spellcheck="true">// 让他可以立即执行</span>
<span class="token comment" spellcheck="true">// function debounce(func, wait, immediate) {</span>
<span class="token comment" spellcheck="true">//   var timer;</span>

<span class="token comment" spellcheck="true">//   return function() {</span>
<span class="token comment" spellcheck="true">//     var context = this;</span>
<span class="token comment" spellcheck="true">//     var args = arguments;</span>

<span class="token comment" spellcheck="true">//       if (timeout) {</span>
<span class="token comment" spellcheck="true">//         clearTimeout(timer);</span>
<span class="token comment" spellcheck="true">//       }</span>

<span class="token comment" spellcheck="true">//     if (immediate) {</span>
<span class="token comment" spellcheck="true">//       var callNow = !timer;</span>
<span class="token comment" spellcheck="true">//       timer = setTimeout(function() {</span>
<span class="token comment" spellcheck="true">//         timer = null;</span>
<span class="token comment" spellcheck="true">//       }, wait)</span>
<span class="token comment" spellcheck="true">//       if (callNow) {</span>
<span class="token comment" spellcheck="true">//         result = func.apply(context, args)</span>
<span class="token comment" spellcheck="true">//       }</span>
<span class="token comment" spellcheck="true">//     } else {</span>
<span class="token comment" spellcheck="true">//       timer = setTimeout(function() {</span>
<span class="token comment" spellcheck="true">//         func.apply(context, args);</span>
<span class="token comment" spellcheck="true">//       }, wait)</span>
<span class="token comment" spellcheck="true">//     }</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">// }</span>

<span class="token comment" spellcheck="true">// 第五版</span>
<span class="token comment" spellcheck="true">// 增加一个取消的功能</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> timer<span class="token punctuation">;</span>

  <span class="token keyword">var</span> debounced <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>timer<span class="token punctuation">;</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  debounced<span class="token punctuation">.</span>cancel <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> debounced<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> setUserAction <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>getUserAction<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> setUserAction<span class="token punctuation">;</span>
<span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  setUserAction<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
]]></content>
      <categories>
        <category>一段代码</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - new</title>
    <url>/2020/02/20/code-section/js-new/</url>
    <content><![CDATA[<h1 id="JS-new"><a href="#JS-new" class="headerlink" title="JS - new"></a>JS - new</h1><h2 id="new-操作符都做了什么"><a href="#new-操作符都做了什么" class="headerlink" title="new 操作符都做了什么"></a>new 操作符都做了什么</h2><ul>
<li>创建了一个全新的对象。</li>
<li>把这个对象链接到原型对象上</li>
<li>生成的新对象会绑定到函数调用的this。</li>
<li>如果这个函数不返回任何东西，那么就会默认return this</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span>ctor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ctor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token string">'new Operator need a function param'</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// ES6</span>
  myNew<span class="token punctuation">.</span>target <span class="token operator">=</span> ctor

  <span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ctor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token keyword">var</span> argsArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> ctorReturnResult <span class="token operator">=</span> ctor<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> argsArr<span class="token punctuation">)</span>
  <span class="token keyword">var</span> isObject <span class="token operator">=</span> <span class="token keyword">typeof</span> ctorReturnResult <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> ctorReturnResult <span class="token operator">!==</span> <span class="token keyword">null</span>
  <span class="token keyword">var</span> isFunction <span class="token operator">=</span> <span class="token keyword">typeof</span> ctorReturnResult <span class="token operator">===</span> <span class="token string">'function'</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isObject <span class="token operator">||</span> isFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ctorReturnResult
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> newObj
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>一段代码</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 深拷贝性能优化版</title>
    <url>/2020/02/19/code-section/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%89%88/</url>
    <content><![CDATA[<h1 id="JS-深拷贝性能优化版"><a href="#JS-深拷贝性能优化版" class="headerlink" title="JS 深拷贝性能优化版"></a>JS 深拷贝性能优化版</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">forEach</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> iteratee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">iteratee</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> array<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// WeakMap 不用手动会回收内存空间</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 下一句，不要把数组变成对象</span>
    <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> cloneTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> keys <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token operator">?</span> undefined <span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">forEach</span><span class="token punctuation">(</span>keys <span class="token operator">||</span> target<span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        key <span class="token operator">=</span> value<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cloneTarget
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>
  attr1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  attr2<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>
  attr3<span class="token punctuation">:</span> <span class="token string">'Lvjiawen'</span><span class="token punctuation">,</span>
  attr4<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    sonAttr1<span class="token punctuation">:</span> <span class="token string">'son'</span><span class="token punctuation">,</span>
    sonAttr2<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      grandSonAttr<span class="token punctuation">:</span> <span class="token string">'grandSonAttr'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  attr5<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
target<span class="token punctuation">.</span>target <span class="token operator">=</span> target
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>一段代码</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>简易模块管理</title>
    <url>/2020/06/01/code-section/%E7%AE%80%E6%98%93%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="简易模块管理"><a href="#简易模块管理" class="headerlink" title="简易模块管理"></a>简易模块管理</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> MyModules <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">define</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> impl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> modules<span class="token punctuation">[</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> impl<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> impl<span class="token punctuation">,</span> deps <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        define<span class="token punctuation">:</span> define<span class="token punctuation">,</span>
        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">get</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

MyModules<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>who<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Let me introduce: "</span> <span class="token operator">+</span> who
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        hello<span class="token punctuation">:</span> hello
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

MyModules<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> hungry <span class="token operator">=</span> <span class="token string">'hippo'</span>
    <span class="token keyword">function</span> <span class="token function">awesome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>hungry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        awesI ome<span class="token punctuation">:</span> awesome
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> MyModules<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> MyModules<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'hippo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
foo<span class="token punctuation">.</span><span class="token function">awesome</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>一段代码</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>throttle 节流函数</title>
    <url>/2020/06/01/code-section/%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>节流函数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token id">#container</span> </span><span class="token punctuation">{</span>
      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#444444</span><span class="token punctuation">;</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>使用场景：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>监听 window 的 resize、scroll<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>监听鼠标的 mousedown、mouseover<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>监听键盘的 keyup、keydown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取消debounce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">getUserAction</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// function throttle(func, wait) {</span>
  <span class="token comment" spellcheck="true">//   var previous = 0;</span>

  <span class="token comment" spellcheck="true">//   return function() {</span>
  <span class="token comment" spellcheck="true">//     var context = this;</span>
  <span class="token comment" spellcheck="true">//     var args = arguments;</span>

  <span class="token comment" spellcheck="true">//     var now = +new Date()</span>

  <span class="token comment" spellcheck="true">//     if (now - previous > wait) {</span>
  <span class="token comment" spellcheck="true">//       func.apply(context, args);</span>
  <span class="token comment" spellcheck="true">//       previous = now;</span>
  <span class="token comment" spellcheck="true">//     }</span>
  <span class="token comment" spellcheck="true">//   }</span>
  <span class="token comment" spellcheck="true">// }</span>

  <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args<span class="token punctuation">,</span> result<span class="token punctuation">;</span>
    <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> later <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      previous <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> throttled <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
      args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
      <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
          timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        previous <span class="token operator">=</span> now<span class="token punctuation">;</span>
        func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> throttled<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  container<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>getUserAction<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
]]></content>
      <categories>
        <category>一段代码</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 深拷贝</title>
    <url>/2020/02/19/code-section/%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h1 id="JS-深拷贝"><a href="#JS-深拷贝" class="headerlink" title="JS 深拷贝"></a>JS 深拷贝</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// WeakMap 不用手动会回收内存空间</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 下一句，不要把数组变成对象</span>
    <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> cloneTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cloneTarget
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>




<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>
  attr1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  attr2<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>
  attr3<span class="token punctuation">:</span> <span class="token string">'Lvjiawen'</span><span class="token punctuation">,</span>
  attr4<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    sonAttr1<span class="token punctuation">:</span> <span class="token string">'son'</span><span class="token punctuation">,</span>
    sonAttr2<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      grandSonAttr<span class="token punctuation">:</span> <span class="token string">'grandSonAttr'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  attr5<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
target<span class="token punctuation">.</span>target <span class="token operator">=</span> target
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>一段代码</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>获取地址栏参数</title>
    <url>/2020/06/01/code-section/%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9D%80%E6%A0%8F/</url>
    <content><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">parseParam</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> paramArr <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paramArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> item <span class="token operator">=</span> paramArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> tmp <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      obj<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">GetQueryString</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^|&amp;)"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=([^&amp;]*)(&amp;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> r <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>一段代码</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2020/06/02/data-structure/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<p>简单搞一个完全二叉树</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>elem <span class="token operator">=</span> item
        self<span class="token punctuation">.</span>l_child <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>r_child <span class="token operator">=</span> None


<span class="token keyword">class</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>root <span class="token operator">=</span> None

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 往最后添加，向完全二叉树去努力</span>
        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root <span class="token keyword">is</span> None<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>root <span class="token operator">=</span> node
            <span class="token keyword">return</span>
        queue <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>root<span class="token punctuation">]</span>
        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># 队列不为空就一直可以进行</span>
            cur_node <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>l_child <span class="token keyword">is</span> None<span class="token punctuation">:</span>
                cur_node<span class="token punctuation">.</span>l_child <span class="token operator">=</span> node
                <span class="token keyword">return</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>l_child<span class="token punctuation">)</span>

            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>r_child <span class="token keyword">is</span> None<span class="token punctuation">:</span>
                cur_node<span class="token punctuation">.</span>r_child <span class="token operator">=</span> node
                <span class="token keyword">return</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>r_child<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">breadth_travel</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root <span class="token keyword">is</span> None<span class="token punctuation">:</span>
            <span class="token keyword">return</span> None
        queue <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>root<span class="token punctuation">]</span>
        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>
            cur_node <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>l_child <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>l_child<span class="token punctuation">)</span>
            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>r_child <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>r_child<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pre_order_travel</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pre_order_travel<span class="token punctuation">(</span>root<span class="token punctuation">.</span>l_child<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pre_order_travel<span class="token punctuation">(</span>root<span class="token punctuation">.</span>r_child<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">mid_order_travel</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        self<span class="token punctuation">.</span>mid_order_travel<span class="token punctuation">(</span>root<span class="token punctuation">.</span>l_child<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>mid_order_travel<span class="token punctuation">(</span>root<span class="token punctuation">.</span>r_child<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">rear_order_travel</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        self<span class="token punctuation">.</span>rear_order_travel<span class="token punctuation">(</span>root<span class="token punctuation">.</span>l_child<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>rear_order_travel<span class="token punctuation">(</span>root<span class="token punctuation">.</span>r_child<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    tree <span class="token operator">=</span> Tree<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>breadth_travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n--------'</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>pre_order_travel<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n--------'</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>mid_order_travel<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n--------'</span><span class="token punctuation">)</span>
    tree<span class="token punctuation">.</span>rear_order_travel<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n--------'</span><span class="token punctuation">)</span>

</code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>单向循环链表</title>
    <url>/2020/06/02/data-structure/%E5%8D%95%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%20copy/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""节点"""</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>ele <span class="token operator">=</span> ele
        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None


<span class="token keyword">class</span> <span class="token class-name">SingleCycleLinkList</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""单向循环链表"""</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__head <span class="token operator">=</span> None
        <span class="token keyword">if</span> node<span class="token punctuation">:</span>
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""链表是否为空"""</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__head <span class="token operator">==</span> None

    <span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""链表的长度"""</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        count <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> self<span class="token punctuation">.</span>__head<span class="token punctuation">:</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token keyword">return</span> count

    <span class="token keyword">def</span> <span class="token function">travel</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""遍历"""</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        <span class="token keyword">while</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> self<span class="token punctuation">.</span>__head<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>ele<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token comment" spellcheck="true"># 退出循环，cur 指向尾节点，但是尾结点的元素未打印</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>ele<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""头部添加"""</span>
        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>__head <span class="token operator">=</span> node
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> node
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
            <span class="token keyword">while</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> self<span class="token punctuation">.</span>__head<span class="token punctuation">:</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
            self<span class="token punctuation">.</span>__head <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""尾部添加"""</span>
        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>__head <span class="token operator">=</span> node
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> node
            <span class="token keyword">return</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
            <span class="token keyword">while</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> self<span class="token punctuation">.</span>__head<span class="token punctuation">:</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
            <span class="token comment" spellcheck="true"># 先不动原有的列表</span>
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node    

    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""插入"""</span>
        <span class="token keyword">if</span> pos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> pos <span class="token operator">></span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            index <span class="token operator">=</span> <span class="token number">0</span>
            pre <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
            node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
            <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
                index <span class="token operator">+=</span> <span class="token number">1</span>
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""删除元素"""</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        pre <span class="token operator">=</span> None
        <span class="token keyword">while</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> self<span class="token punctuation">.</span>__head<span class="token punctuation">:</span>
            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>ele <span class="token operator">==</span> item<span class="token punctuation">:</span>
                <span class="token comment" spellcheck="true"># 头结点就是要删除的元素</span>
                <span class="token keyword">if</span> self<span class="token punctuation">.</span>__head <span class="token operator">==</span> cur<span class="token punctuation">:</span>
                    <span class="token comment" spellcheck="true"># 头结点就是要找的</span>
                    rear <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
                    <span class="token keyword">while</span> rear<span class="token punctuation">.</span>next <span class="token operator">!=</span> self<span class="token punctuation">.</span>__head<span class="token punctuation">:</span>
                        rear <span class="token operator">=</span> rear<span class="token punctuation">.</span>next
                    self<span class="token punctuation">.</span>__head <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
                    rear<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
                <span class="token keyword">elif</span> cur<span class="token punctuation">.</span>next <span class="token operator">==</span> self<span class="token punctuation">.</span>__head<span class="token punctuation">:</span>
                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
                <span class="token keyword">return</span> <span class="token boolean">True</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                pre <span class="token operator">=</span> cur
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token comment" spellcheck="true"># 退出循环， cur 指向尾结点</span>
        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>ele <span class="token operator">==</span> item<span class="token punctuation">:</span>
            <span class="token keyword">if</span> cur <span class="token operator">==</span> self<span class="token punctuation">.</span>__head<span class="token punctuation">:</span>
                <span class="token comment" spellcheck="true"># 链表只有一个节点</span>
                self<span class="token punctuation">.</span>__head <span class="token operator">=</span> None
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                pre<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token comment" spellcheck="true"># 缺少最后一项</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""查看元素是否存在"""</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">while</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> self<span class="token punctuation">.</span>__head<span class="token punctuation">:</span>
            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>ele <span class="token operator">==</span> item<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
                <span class="token keyword">break</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>ele <span class="token operator">==</span> item<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    ll <span class="token operator">=</span> SingleCycleLinkList<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"11111"</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"------"</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"00000"</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"11111"</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"00000"</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表</title>
    <url>/2020/06/02/data-structure/%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""节点"""</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>ele <span class="token operator">=</span> ele
        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None


<span class="token keyword">class</span> <span class="token class-name">SingleLinkList</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""单链表"""</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__head <span class="token operator">=</span> None

    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""链表是否为空"""</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__head <span class="token operator">==</span> None

    <span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""链表的长度"""</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> cur <span class="token operator">!=</span> None<span class="token punctuation">:</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token keyword">return</span> count

    <span class="token keyword">def</span> <span class="token function">travel</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""遍历"""</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        <span class="token keyword">while</span> cur <span class="token operator">!=</span> None<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>ele<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""头部添加"""</span>
        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        self<span class="token punctuation">.</span>__head <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""尾部添加"""</span>
        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>__head <span class="token operator">=</span> node
            <span class="token keyword">return</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""插入"""</span>
        <span class="token keyword">if</span> pos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> pos <span class="token operator">></span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            index <span class="token operator">=</span> <span class="token number">0</span>
            pre <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
            node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
            <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
                index <span class="token operator">+=</span> <span class="token number">1</span>
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""删除元素"""</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        pre <span class="token operator">=</span> None
        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>ele <span class="token operator">==</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment" spellcheck="true"># 头结点就是要删除的元素</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__head <span class="token operator">==</span> cur<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>__head <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
                    <span class="token keyword">return</span> <span class="token boolean">True</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
                    <span class="token keyword">return</span> <span class="token boolean">True</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                pre <span class="token operator">=</span> cur
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token comment" spellcheck="true"># 缺少最后一项</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""查看元素是否存在"""</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        <span class="token keyword">while</span> cur <span class="token operator">!=</span> None<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>ele <span class="token operator">==</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
                <span class="token keyword">break</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token keyword">return</span> <span class="token boolean">False</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    ll <span class="token operator">=</span> SingleLinkList<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'11111'</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'------'</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'00000'</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'11111'</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'------'</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'00000'</span><span class="token punctuation">)</span>
    ll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>双端队列</title>
    <url>/2020/06/02/data-structure/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BiQueue</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">"双端队列"</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">add_front</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__list<span class="token punctuation">.</span> insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">add_rear</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"入队，从队尾插入 item"</span>
        self<span class="token punctuation">.</span>__list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pop_front</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"出队，从队头弹出一个元素"</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> None
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pop_rear</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"出队，从队头弹出一个元素"</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> None
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"判断栈是否为空"</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__list <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"返回栈中元素的个数"</span>
        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__list<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    bq <span class="token operator">=</span> BiQueue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    bq<span class="token punctuation">.</span>add_front<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    bq<span class="token punctuation">.</span>add_front<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    bq<span class="token punctuation">.</span>add_front<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    bq<span class="token punctuation">.</span>add_front<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    bq<span class="token punctuation">.</span>add_rear<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    bq<span class="token punctuation">.</span>add_rear<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
    bq<span class="token punctuation">.</span>add_rear<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
    bq<span class="token punctuation">.</span>add_rear<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>bq<span class="token punctuation">.</span>pop_front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>bq<span class="token punctuation">.</span>pop_front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>bq<span class="token punctuation">.</span>pop_front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>bq<span class="token punctuation">.</span>pop_front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>bq<span class="token punctuation">.</span>pop_rear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>bq<span class="token punctuation">.</span>pop_rear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>bq<span class="token punctuation">.</span>pop_rear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>bq<span class="token punctuation">.</span>pop_rear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>bq<span class="token punctuation">.</span>pop_rear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>双向链表</title>
    <url>/2020/06/02/data-structure/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""节点"""</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>ele <span class="token operator">=</span> ele
        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>prev <span class="token operator">=</span> None


<span class="token keyword">class</span> <span class="token class-name">DoubleLinkList</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""双链表"""</span>
    <span class="token triple-quoted-string string">"""中间继承了 SingleLinkList 中的 is_empty, length,"""</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__head <span class="token operator">=</span> None

    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""链表是否为空"""</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__head <span class="token keyword">is</span> None

    <span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""链表的长度"""</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token keyword">return</span> count

    <span class="token keyword">def</span> <span class="token function">travel</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""遍历"""</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>ele<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""头部添加"""</span>
        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        self<span class="token punctuation">.</span>__head <span class="token operator">=</span> node
        <span class="token keyword">if</span> node<span class="token punctuation">.</span>next<span class="token punctuation">:</span>
            node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""尾部添加"""</span>
        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>__head <span class="token operator">=</span> node
            <span class="token keyword">return</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        <span class="token keyword">while</span> cur<span class="token punctuation">.</span>next <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> cur
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""插入"""</span>
        <span class="token keyword">if</span> pos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> pos <span class="token operator">></span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            index <span class="token operator">=</span> <span class="token number">0</span>
            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
            <span class="token keyword">while</span> index <span class="token operator">&lt;</span> pos<span class="token punctuation">:</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
                index <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token comment" spellcheck="true"># 退出循环的时候 cur 指向 pos 的位置</span>
            node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> cur
            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> cur<span class="token punctuation">.</span>prev
            cur<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node
            cur<span class="token punctuation">.</span>prev <span class="token operator">=</span> node

    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""删除元素"""</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>ele <span class="token operator">==</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment" spellcheck="true"># 头结点就是要删除的元素</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__head <span class="token operator">==</span> cur<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>__head <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
                    <span class="token keyword">if</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">:</span>
                        <span class="token comment" spellcheck="true"># 判断链表是否只有一个节点</span>
                        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> None
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    cur<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
                    <span class="token keyword">if</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">:</span>
                        <span class="token comment" spellcheck="true"># 判断是否为链表的最后一个节点</span>
                        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> cur<span class="token punctuation">.</span>prev
                <span class="token keyword">return</span> <span class="token boolean">True</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token comment" spellcheck="true"># 跳出循环的时候就是最后一项，缺少最后一项</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""查看元素是否存在"""</span>
        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>__head
        <span class="token keyword">while</span> cur <span class="token operator">!=</span> None<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>ele <span class="token operator">==</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
                <span class="token keyword">break</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
        <span class="token keyword">return</span> <span class="token boolean">False</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    dll <span class="token operator">=</span> DoubleLinkList<span class="token punctuation">(</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dll<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dll<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dll<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dll<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dll<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dll<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'11111'</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'------'</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'00000'</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dll<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'11111'</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'------'</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'00000'</span><span class="token punctuation">)</span>
    dll<span class="token punctuation">.</span>travel<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2020/06/02/data-structure/%E6%A0%88/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">"栈"</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"压栈，添加 item 到栈顶"</span>
        self<span class="token punctuation">.</span>__list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"出栈，从栈顶弹出一个元素"</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> None
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">peek</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"返回栈顶元素"</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__list<span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> None

    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"判断栈是否为空"</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__list <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"返回栈中元素的个数"</span>
        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__list<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>peek<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2020/06/02/data-structure/%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">"队列"</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"入队，从队尾插入 item"</span>
        self<span class="token punctuation">.</span>__list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">dequeue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"出队，从队头弹出一个元素"</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> None
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"判断栈是否为空"</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__list <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">"返回栈中元素的个数"</span>
        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__list<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MongoDB</title>
    <url>/2020/06/01/database/%E5%AD%A6%E4%B9%A0%20MongoDB/</url>
    <content><![CDATA[<h1 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h1><pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>
<span class="token operator">...</span>     <span class="token punctuation">{</span>
  <span class="token operator">...</span>     _id<span class="token punctuation">:</span> <span class="token string">"account1"</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>     name<span class="token punctuation">:</span> <span class="token string">"alice"</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>     balance<span class="token punctuation">:</span> <span class="token number">100</span>
  <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token operator">...</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>查询集合</p>
<pre class=" language-javascript"><code class="language-javascript">show collections</code></pre>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span>
        <span class="token operator">&lt;</span>document1<span class="token operator">></span><span class="token punctuation">,</span>
        <span class="token operator">&lt;</span>document2<span class="token operator">></span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        writeConcern<span class="token punctuation">:</span> <span class="token operator">&lt;</span>写入安全级别<span class="token operator">></span><span class="token punctuation">,</span>
        ordered<span class="token punctuation">:</span> <span class="token operator">&lt;</span>boolean<span class="token punctuation">,</span>不写 默认 <span class="token boolean">true</span><span class="token operator">></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'charlie'</span><span class="token punctuation">,</span> balance<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'david'</span><span class="token punctuation">,</span> balance<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span>
        document or array <span class="token keyword">of</span> documents
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        writeConcern<span class="token punctuation">:</span> <span class="token operator">&lt;</span>写入安全级别<span class="token operator">></span><span class="token punctuation">,</span>
        ordered<span class="token punctuation">:</span> <span class="token operator">&lt;</span>boolean<span class="token punctuation">,</span>不写 默认 <span class="token boolean">true</span><span class="token operator">></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span><span class="token operator">&lt;</span>collection<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>document<span class="token operator">></span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        writeConcern<span class="token punctuation">:</span> <span class="token operator">&lt;</span>写入安全级别<span class="token operator">></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span></code></pre>
<h2 id="读取文档"><a href="#读取文档" class="headerlink" title="读取文档"></a>读取文档</h2><ul>
<li>db.collection.find()</li>
<li>匹配查询</li>
<li>查询操作符</li>
<li>返回的是游标</li>
<li>投射<ul>
<li>只返回部分字段</li>
<li>内嵌文档的投射</li>
<li>数组的投射</li>
</ul>
</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>query<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>projection<span class="token operator">></span><span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'alice'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"> db<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"_id.type"</span><span class="token punctuation">:</span> <span class="token string">"savings"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>{<field>: {$<operator>: <value>}}</p>
<ul>
<li>$eq =</li>
<li>$ne !=</li>
<li>$gt &gt;</li>
<li>$gte &gt;=</li>
<li>$lt &lt; </li>
<li>$lte &lt;=</li>
<li>$in</li>
<li>$nin</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token punctuation">{</span>$eq<span class="token punctuation">:</span> <span class="token string">"alice"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token punctuation">{</span>$<span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'alice'</span><span class="token punctuation">,</span> <span class="token string">'charles'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><ul>
<li>$not</li>
<li>$and 权成立</li>
<li>$or 至少一个</li>
<li>$nor</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
  <span class="token operator">&lt;</span>field<span class="token operator">></span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      $not<span class="token punctuation">:</span><span class="token punctuation">{</span>
            <span class="token operator">&lt;</span>operrator<span class="token operator">-</span>expression<span class="token operator">></span>
        <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
  <span class="token operator">&lt;</span>field<span class="token operator">></span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      $and<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
        <span class="token operator">&lt;</span>operrator<span class="token operator">-</span>expression<span class="token operator">></span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token operator">&lt;</span>operrator<span class="token operator">-</span>expression<span class="token operator">></span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token operator">&lt;</span>operrator<span class="token operator">-</span>expression<span class="token operator">></span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    $and <span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            balance<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                $gt<span class="token punctuation">:</span> <span class="token number">100</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                $gt<span class="token punctuation">:</span> <span class="token string">'bob'</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>简写</p>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    balance<span class="token punctuation">:</span> <span class="token punctuation">{</span> $gt<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token punctuation">{</span>$gt<span class="token punctuation">:</span> <span class="token string">'bob'</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    balance<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        $gt<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
        $lt<span class="token punctuation">:</span> <span class="token number">500</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MyBatis</title>
    <url>/2020/06/01/database/%E5%AD%A6%E4%B9%A0%20MyBatis/</url>
    <content><![CDATA[<h3 id="传统-JDBC-程序的设计缺陷"><a href="#传统-JDBC-程序的设计缺陷" class="headerlink" title="传统 JDBC 程序的设计缺陷"></a>传统 JDBC 程序的设计缺陷</h3><ul>
<li>大量配置信息硬编码，数据库密码、用户等</li>
<li>大量的无关业务处理的编码</li>
<li>扩展优化极为不便</li>
</ul>
<h3 id="MyBatis-概述"><a href="#MyBatis-概述" class="headerlink" title="MyBatis 概述"></a>MyBatis 概述</h3><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。</p>
<ul>
<li>避免传统 JDBC 硬编码</li>
<li>XML 配置或者注解</li>
<li>POJO对象和数据库记录直接映射</li>
<li>完善的文档支持</li>
</ul>
<h3 id="MyBatis-的使用优势"><a href="#MyBatis-的使用优势" class="headerlink" title="MyBatis 的使用优势"></a>MyBatis 的使用优势</h3><ul>
<li><p>数据库交互信息配置化</p>
</li>
<li><p>动态 SQL 处理（一级缓存、二级缓存）</p>
</li>
</ul>
<h3 id="MyBatis-的使用场景"><a href="#MyBatis-的使用场景" class="headerlink" title="MyBatis 的使用场景"></a>MyBatis 的使用场景</h3><ul>
<li>更加关注 SQL 优化的项目</li>
<li>需求频繁更新改动的项目</li>
</ul>
<h3 id="MyBatis-核心-API-操作过程分解"><a href="#MyBatis-核心-API-操作过程分解" class="headerlink" title="MyBatis 核心 API 操作过程分解"></a>MyBatis 核心 API 操作过程分解</h3><ul>
<li>SQL输入参数  +  去数据库中操作</li>
<li>数据库操作<ul>
<li>mybatis 配置<ul>
<li>mybatis.xml 主配置文件</li>
<li>XXXMapper.xml 映射配置文件</li>
</ul>
</li>
<li>构建和数据库之间的对话<ul>
<li>SqlSessionFactoryBuilder =&gt; SqlSessionFactory =&gt; SqlSession =&gt;Executor =&gt; Mapped Statement</li>
</ul>
</li>
<li>操作数据库</li>
</ul>
</li>
<li>SQL 输出结果集</li>
</ul>
<h3 id="MyBatis-架构分解"><a href="#MyBatis-架构分解" class="headerlink" title="MyBatis 架构分解"></a>MyBatis 架构分解</h3><ul>
<li>接口层<ul>
<li>数据查询接口</li>
<li>数据新增接口</li>
<li>数据更新接口</li>
<li>数据删除接口</li>
<li>获取配置接口</li>
</ul>
</li>
<li>数据处理层<ul>
<li>参数映射<ul>
<li>参数映射配置</li>
<li>参数映射解析</li>
<li>参数类型解析</li>
</ul>
</li>
<li>SQL 解析<ul>
<li>SQL 获取</li>
<li>SQL 解析</li>
<li>动态 SQL</li>
</ul>
</li>
<li>SQL 执行<ul>
<li>SimpleExecutor</li>
<li>BatchExecutor</li>
<li>ReuseExecutor</li>
</ul>
</li>
<li>结果映射<ul>
<li>结果映射配置</li>
<li>结果类型转换</li>
<li>结果数据拷贝</li>
</ul>
</li>
</ul>
</li>
<li>基础支撑层<ul>
<li>配置框架<ul>
<li>连接管理</li>
<li>事务管理</li>
<li>配置加载</li>
<li>缓存处理</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>动态 sql</p>
<p>数据库和实体类不一致，resultMap 而不用 resultType</p>
<p>log4j 日志管理 debug 级别 info 级别</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2020/06/02/design-pattern/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="结构型：代理模式"><a href="#结构型：代理模式" class="headerlink" title="结构型：代理模式"></a>结构型：代理模式</h2><p>代理模式，式如其名——在某些情况下，出于种种考虑/限制，一个对象<strong>不能直接访问</strong>另一个对象，需要一个<strong>第三者</strong>（代理）牵线搭桥从而间接达到访问目的，这样的模式就是代理模式。</p>
<p>为了屏蔽某些网站，一股神秘的东方力量会作用于你的 DNS 解析过程，告诉它：“你不能解析出xxx.xxx.xxx.xxx（某个特殊ip）的地址”。而我们的 Google.com，不幸地出现在了这串被诅咒的 ip 地址里，于是你的 DNS 会告诉你：“对不起，我查不到”。</p>
<p> A 不能直接访问 B，A 需要借助一个帮手来访问 B，这个帮手就是代理器。需要代理器出面解决的问题，就是代理模式发光发热的应用场景。</p>
<h3 id="一家小型婚介所的发家致富之路"><a href="#一家小型婚介所的发家致富之路" class="headerlink" title="一家小型婚介所的发家致富之路"></a>一家小型婚介所的发家致富之路</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 未知妹子</span>
<span class="token keyword">const</span> girl <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">'小美'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 姓名</span>
  aboutMe<span class="token punctuation">:</span> <span class="token string">'...'</span> <span class="token comment" spellcheck="true">// 自我介绍（大家自行脑补吧）</span>
  age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 年龄</span>
  career<span class="token punctuation">:</span> <span class="token string">'teacher'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 职业</span>
  fakeAvatar<span class="token punctuation">:</span> <span class="token string">'xxxx'</span> <span class="token comment" spellcheck="true">// 假头像(新垣结衣的图片地址）</span>
  avatar<span class="token punctuation">:</span> <span class="token string">'xxxx'</span> <span class="token comment" spellcheck="true">// 真实头像(自己的照片地址),</span>
  phone<span class="token punctuation">:</span> <span class="token number">123456</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 手机号</span>
  presents<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 礼物数组</span>
  bottomValue<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 拒收50块以下的礼物</span>
  lastPresent<span class="token punctuation">:</span> present  <span class="token comment" spellcheck="true">// 记录最近一次收到的礼物</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 规定礼物的数据结构由type和value组成</span>
<span class="token keyword">const</span> present <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token punctuation">:</span> <span class="token string">'巧克力'</span><span class="token punctuation">,</span>
  value<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>


<span class="token comment" spellcheck="true">// 普通私密信息</span>
<span class="token keyword">const</span> baseInfo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'career'</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">// 最私密信息</span>
<span class="token keyword">const</span> privateInfo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> <span class="token string">'phone'</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true">// 用户（同事A）对象实例</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ...(一些必要的个人信息)</span>
  isValidated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  isVIP<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 掘金婚介所登场了</span>
<span class="token keyword">const</span> JuejinLovers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>girl<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>girl<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>baseInfo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>isValidated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您还没有完成验证哦'</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//...(此处省略其它有的没的各种校验逻辑)</span>

        <span class="token comment" spellcheck="true">// 此处我们认为只有验证过的用户才可以购买VIP</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>isValidated <span class="token operator">&amp;&amp;</span> privateInfo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>isVIP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'只有VIP才可以查看该信息哦'</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>girl<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'lastPresent'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> girl<span class="token punctuation">.</span>bottomValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'sorry，您的礼物被拒收了'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>

      <span class="token comment" spellcheck="true">// 如果没有拒收，则赋值成功，同时并入presents数组</span>
      girl<span class="token punctuation">[</span>lastPresent<span class="token punctuation">]</span> <span class="token operator">=</span> val
      girl<span class="token punctuation">[</span>presents<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>presents<span class="token punctuation">,</span> val<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="代理模式在前端工作之中的应用实践"><a href="#代理模式在前端工作之中的应用实践" class="headerlink" title="代理模式在前端工作之中的应用实践"></a>代理模式在前端工作之中的应用实践</h3><h4 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接1号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接2号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接3号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接4号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接5号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接6号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>不适用代理</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> aNodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'father'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> aLength <span class="token operator">=</span> aNodes<span class="token punctuation">.</span>length
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>aLength<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    aNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是'</span> <span class="token operator">+</span> aNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>使用代理</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'father'</span><span class="token punctuation">)</span>

father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="虚拟代理"><a href="#虚拟代理" class="headerlink" title="虚拟代理"></a>虚拟代理</h4><p>初代代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PreLoadImage</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 展位图 URL</span>
    <span class="token keyword">static</span> LOADING_URL <span class="token operator">=</span> <span class="token string">'xxxxxx'</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>imgNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>imgNode <span class="token operator">=</span> imgNode
  <span class="token punctuation">}</span>

    <span class="token function">setSrc</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>imageNode<span class="token punctuation">.</span>src <span class="token operator">=</span> PreLoadImage<span class="token punctuation">.</span>LOADING_URL

    <span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    image<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>imageNode<span class="token punctuation">.</span>src <span class="token operator">=</span> targetUrl
        <span class="token punctuation">}</span>
    image<span class="token punctuation">.</span>src <span class="token operator">=</span> targetUrl
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>二代，更符合单一原则的代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PreLoadImage</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>imageNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>imageNode <span class="token operator">=</span> imageNode
    <span class="token punctuation">}</span>

    <span class="token function">setSrc</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>imageNode<span class="token punctuation">.</span>src <span class="token operator">=</span> imgUrl
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ProxyImage</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> LOADING_URL <span class="token operator">=</span> <span class="token string">'xxxxxx'</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>targetImage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>targetImage <span class="token operator">=</span> targetImage
    <span class="token punctuation">}</span>

    <span class="token function">setSrc</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>targetImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>ProxyImage<span class="token punctuation">.</span>LOADING_URL<span class="token punctuation">)</span>
        <span class="token keyword">const</span> virtualImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        virtualImage<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>targetImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        virtualImage<span class="token punctuation">.</span>src <span class="token operator">=</span> targetUrl
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><code>ProxyImage</code> 帮我们调度了预加载相关的工作，我们可以通过 <code>ProxyImage</code> 这个代理，实现对真实 img 节点的间接访问，并得到我们想要的效果。</p>
<p>在这个实例中，<code>virtualImage</code> 这个对象是一个“幕后英雄”，它始终存在于 JavaScript 世界中、代替真实 DOM 发起了图片加载请求、完成了图片加载工作，却从未在渲染层面抛头露面。因此这种模式被称为“虚拟代理”模式。</p>
<h4 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h4><p>缓存代理比较好理解，它应用于一些计算量较大的场景里。</p>
<p>这种场景下，我们需要“用空间换时间”——当我们需要用到某个已经计算过的值的时候，不想再耗时进行二次计算，而是希望能从内存里去取出现成的计算结果。</p>
<p>这种场景下，就需要一个代理来帮我们在进行计算的同时，进行计算结果的缓存了。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'进行了一次计算'</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> i
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">var</span> proxyAdd <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> key <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>
      cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> result
      <span class="token keyword">return</span> result
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">proxyAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">proxyAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">proxyAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">proxyAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h4 id="保护代理"><a href="#保护代理" class="headerlink" title="保护代理"></a>保护代理</h4><p>保护某些类中的信息，只暴露一部分。</p>
<p>所谓“保护代理”，就是在访问层面做文章，在 getter 和 setter 函数里去进行校验和拦截，确保一部分变量是安全的。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2020/06/02/design-pattern/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>原型模式不仅是一种设计模式，它还是一种<strong>编程范式</strong>（programming paradigm），是 JavaScript 面向对象系统实现的根基。</p>
<p>原型模式下，当我们想要创建一个对象时，会先找到一个对象作为原型，然后通过<strong>克隆原型</strong>的方式来创建出一个与原型一样（共享一套数据/方法）的对象。在 JavaScript 里，<code>Object.create</code>方法就是原型模式的天然实现——准确地说，只要我们还在借助<code>Prototype</code>来实现对象的创建和原型的继承，那么我们就是在应用原型模式。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token punctuation">}</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'吃'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 上下两个是一样的</span>
<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
Dog<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'吃'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>在 JavaScript 中，每个构造函数都拥有一个<code>prototype</code>属性，它指向构造函数的原型对象，这个原型对象中有一个 construtor 属性指回构造函数；</p>
<p>每个实例都有一个<code>__proto__</code>属性，当我们使用构造函数去创建实例时，实例的<code>__proto__</code>属性就会指向构造函数的原型对象。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

Dog<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'肉骨头真好吃'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'旺财'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Dog<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Dog<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/06/02/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="单例模式（创建型）"><a href="#单例模式（创建型）" class="headerlink" title="单例模式（创建型）"></a>单例模式（创建型）</h2><p>例如，玩游戏，有个存档，每次打开游戏接着玩儿。</p>
<p>例如，编程中，只需要唯一一个的对象，如数据库连接池、线程池、配置文件缓存、浏览器中的 window / document。</p>
<p>有些情况不适用单例的后果：</p>
<ul>
<li>带来严重的资源消耗，例如数据库连接实例</li>
<li>导致访问行为不一致</li>
</ul>
<p>单例模式需求：</p>
<ul>
<li>如果实例化的时候没有实例，则创建这个类的实例</li>
<li>如果实例化的时候已经有实例，则返回这个已有的实例</li>
<li>每次访问，返回的都是同一个实例，浏览器中的 window 和 document 对象</li>
</ul>
<p>单例的实际应用：</p>
<ul>
<li>es6 module 中 import/export 导出的模块就是单例，千万不能修改它</li>
<li>vuex、redux、mobx 等维护的全局状态</li>
<li>vue-router 等维护的路由实例</li>
</ul>
<p><strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点</strong>，这样的模式就叫做单例模式。</p>
<p>获取实例方法一：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>SingleInstance<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> SingleInstance<span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>
  SingleInstance<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>
SingleInstance<span class="token punctuation">.</span>getInstance <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>SingleInstance<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> SingleInstance<span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> SingleInstance<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s3 <span class="token operator">=</span> SingleInstance<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s3<span class="token punctuation">)</span></code></pre>
<p>ES6 改造</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">SingleInstance</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> instance  <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>SingleInstance<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> SingleInstance<span class="token punctuation">.</span>instance
    <span class="token punctuation">}</span>
    SingleInstance<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>SingleInstance<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> SingleInstance<span class="token punctuation">.</span>instance
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> SingleInstance<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s3 <span class="token operator">=</span> SingleInstance<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s3<span class="token punctuation">)</span></code></pre>
<p><strong>上面方法的缺点在于维护的实例作为静态属性直接暴露，外部可以直接修改。</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> Vue <span class="token comment" spellcheck="true">// 这个Vue的作用和楼上的instance作用一样</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> install <span class="token punctuation">(</span>_Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 判断传入的Vue实例对象是否已经被install过Vuex插件（是否有了唯一的state）</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Vue <span class="token operator">&amp;&amp;</span> _Vue <span class="token operator">===</span> Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
        <span class="token string">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// 若没有，则为这个Vue实例对象install一个唯一的Vuex</span>
  Vue <span class="token operator">=</span> _Vue
  <span class="token comment" spellcheck="true">// 将Vuex的初始化逻辑写进Vue的钩子函数里</span>
  <span class="token function">applyMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2020/06/02/design-pattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="工厂模式（创建型）"><a href="#工厂模式（创建型）" class="headerlink" title="工厂模式（创建型）"></a>工厂模式（创建型）</h2><h3 id="2-1-简单工厂"><a href="#2-1-简单工厂" class="headerlink" title="2.1 简单工厂"></a>2.1 简单工厂</h3><p>单工厂解决的是多个类的问题。</p>
<p>有构造函数的地方，我们就应该想到简单工厂；在写了大量构造函数、调用了大量的 new、自觉非常不爽的情况下，我们就应该思考是不是可以掏出工厂模式。</p>
<p>未使用：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Coder</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">this</span><span class="token punctuation">.</span>career <span class="token operator">=</span> <span class="token string">'coder'</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'写代码'</span><span class="token punctuation">,</span> <span class="token string">'写测试'</span><span class="token punctuation">,</span> <span class="token string">'修bug'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">ProductManager</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">this</span><span class="token punctuation">.</span>career <span class="token operator">=</span> <span class="token string">'product manager'</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'订会议室'</span><span class="token punctuation">,</span> <span class="token string">'写PRD'</span><span class="token punctuation">,</span> <span class="token string">'催更'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Factory</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>career<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">'coder'</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Coder</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">'product manager'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductManager</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token comment" spellcheck="true">// .......... 可能会很多</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>假如我们有一个 500 员工的 Excel 表，我们要创建对象，现在会这么做</p>
<p>抽的更彻底一点，不要写无数个构造函数</p>
<p>使用：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">,</span> work<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>career <span class="token operator">=</span> career 
  <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> work
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Factory</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> work
  <span class="token keyword">switch</span><span class="token punctuation">(</span>career<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">'coder'</span><span class="token punctuation">:</span>
            work <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'写代码'</span><span class="token punctuation">,</span><span class="token string">'写系分'</span><span class="token punctuation">,</span> <span class="token string">'修Bug'</span><span class="token punctuation">]</span> 
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">'product manager'</span><span class="token punctuation">:</span>
            work <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'订会议室'</span><span class="token punctuation">,</span> <span class="token string">'写PRD'</span><span class="token punctuation">,</span> <span class="token string">'催更'</span><span class="token punctuation">]</span>
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">'boss'</span><span class="token punctuation">:</span>
            work <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'喝茶'</span><span class="token punctuation">,</span> <span class="token string">'看报'</span><span class="token punctuation">,</span> <span class="token string">'见客户'</span><span class="token punctuation">]</span>
    <span class="token keyword">case</span> <span class="token string">'xxx'</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true">// 其它工种的职责分配...</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">,</span> work<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-2-抽象工厂"><a href="#2-2-抽象工厂" class="headerlink" title="2.2 抽象工厂"></a>2.2 抽象工厂</h3><p>开放封闭原则的内容：对拓展开放，对修改封闭。说得更准确点，<strong>软件实体（类、模块、函数）可以扩展，但是不可修改</strong>。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 提供操作系统的接口</span>
  <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抽象工厂方法不允许直接调用，你需要将我重写！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// 提供硬件的接口</span>
  <span class="token function">createHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抽象工厂方法不允许直接调用，你需要将我重写！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">FakeStarFactory</span> <span class="token keyword">extends</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">{</span>
  <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 提供安卓系统实例</span>
  <span class="token punctuation">}</span>
  <span class="token function">createHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QualcommHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 提供高通硬件实例</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>
    <span class="token function">controlHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象产品方法不允许直接调用，你需要将我重写！'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">AndroidOS</span> <span class="token keyword">extends</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>
    <span class="token function">controlHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用安卓的方式去操作硬件'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">AppleOS</span> <span class="token keyword">extends</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>
    <span class="token function">controlHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用苹果的方式去操作硬件'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Hardware</span> <span class="token punctuation">{</span>
    <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'象产品方法不允许直接调用，你需要将我重写！'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">QualcommHardware</span> <span class="token keyword">extends</span> <span class="token class-name">Hardware</span> <span class="token punctuation">{</span>
    <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用高通的方式去运转'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MiWare</span> <span class="token keyword">extends</span> <span class="token class-name">Hardware</span> <span class="token punctuation">{</span>
    <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用小米的方式运转'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FakeStarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> myOS <span class="token operator">=</span> myPhone<span class="token punctuation">.</span><span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> myHardware <span class="token operator">=</span> myPhone<span class="token punctuation">.</span><span class="token function">createHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
myOS<span class="token punctuation">.</span><span class="token function">controlHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
myHardware<span class="token punctuation">.</span><span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2020/06/02/design-pattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="8-行为型：策略模式"><a href="#8-行为型：策略模式" class="headerlink" title="8 行为型：策略模式"></a>8 行为型：策略模式</h2><h3 id="策略模式之掘金小册"><a href="#策略模式之掘金小册" class="headerlink" title="策略模式之掘金小册"></a>策略模式之掘金小册</h3><p>策略模式和状态模式属于本书”彩蛋“性质的附加小节。这两种模式理解难度都不大，在面试中也几乎没有什么权重，但是却对大家培养良好的编码习惯和重构意识却大有裨益。</p>
<p>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p>
<p>手实现了算法提取、算法封装、分发优化的整个一条龙的操作流。</p>
<h4 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h4><p>有一天，产品经理韩梅梅找到李雷，给李雷提了这么个需求：<br>马上大促要来了，我们本次大促要做差异化询价。啥是差异化询价？就是说同一个商品，我通过在后台给它设置不同的价格类型，可以让它展示不同的价格。具体的逻辑如下：</p>
<ul>
<li>当价格类型为“预售价”时，满 100 - 20，不满 100 打 9 折</li>
<li>当价格类型为“大促价”时，满 100 - 30，不满 100 打 8 折</li>
<li>当价格类型为“返场价”时，满 200 - 50，不叠加</li>
<li>当价格类型为“尝鲜价”时，直接打 5 折</li>
</ul>
<h4 id="if-else-大侠"><a href="#if-else-大侠" class="headerlink" title="if-else 大侠"></a>if-else 大侠</h4><p>李雷扫了一眼 prd，立刻来了主意。他首先将四种价格做了标签化：</p>
<pre><code>预售价 - pre
大促价 - onSale
返场价 - back
尝鲜价 - fresh</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 询价方法，接受价格标签和原价为入参</span>
<span class="token keyword">function</span> <span class="token function">askPrice</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment" spellcheck="true">// 处理预热价</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'pre'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">20</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">return</span> originPrice <span class="token operator">*</span> <span class="token number">0.9</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 处理大促价</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'onSale'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">30</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">return</span> originPrice <span class="token operator">*</span> <span class="token number">0.8</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 处理返场价</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'back'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">50</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> originPrice
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 处理尝鲜价</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'fresh'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> originPrice <span class="token operator">*</span> <span class="token number">0.5</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="if-else-侠，人人喊打"><a href="#if-else-侠，人人喊打" class="headerlink" title="if-else 侠，人人喊打"></a>if-else 侠，人人喊打</h4><p>问题：</p>
<ul>
<li>首先，它违背了“单一功能”原则。一个 function 里面，它竟然处理了四坨逻辑<ul>
<li>万一其中一行代码出了 Bug，那么整个询价逻辑都会崩坏</li>
<li>与此同时出了 Bug 你很难定位到底是哪个代码块坏了事</li>
<li>单个能力很难被抽离复用</li>
<li>见到胖逻辑，我们的第一反应，就是一个字——拆！</li>
</ul>
</li>
<li>不仅如此，它还违背了“开放封闭”原则。假如有一天韩梅梅再次找到李雷，要他加一个满 100 - 50 的“新人价”怎么办？他只能继续 if-else：</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 处理新人价</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'newUser'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">50</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> originPrice
  <span class="token punctuation">}</span></code></pre>
<h4 id="重构询价逻辑"><a href="#重构询价逻辑" class="headerlink" title="重构询价逻辑"></a>重构询价逻辑</h4><h5 id="单一功能改造"><a href="#单一功能改造" class="headerlink" title="单一功能改造"></a>单一功能改造</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 处理预热价</span>
<span class="token keyword">function</span> <span class="token function">prePrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">20</span>
  <span class="token punctuation">}</span> 
  <span class="token keyword">return</span> originPrice <span class="token operator">*</span> <span class="token number">0.9</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 处理大促价</span>
<span class="token keyword">function</span> <span class="token function">onSalePrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">30</span>
  <span class="token punctuation">}</span> 
  <span class="token keyword">return</span> originPrice <span class="token operator">*</span> <span class="token number">0.8</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 处理返场价</span>
<span class="token keyword">function</span> <span class="token function">backPrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">50</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> originPrice
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 处理尝鲜价</span>
<span class="token keyword">function</span> <span class="token function">freshPrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> originPrice <span class="token operator">*</span> <span class="token number">0.5</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">askPrice</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 处理预热价</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'pre'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">prePrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// 处理大促价</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'onSale'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">onSalePrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 处理返场价</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'back'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">backPrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 处理尝鲜价</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'fresh'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token function">freshPrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>OK，我们现在至少做到了一个函数只做一件事。现在每个函数都有了自己明确的、单一的分工。如此一来，我们在遇到 Bug 时，就可以做到“头痛医头，脚痛医脚”，而不必在庞大的逻辑海洋里费力去定位到底是哪块不对。</p>
<p>同时，如果我在另一个函数里也想使用某个询价能力，比如说我想询预热价，那我直接把 prePrice 这个函数拿去调用就是了，而不必在 askPrice 肥胖的身躯里苦苦寻觅、然后掏出这块逻辑、最后再复制粘贴到另一个函数去——更何况万一哪天 askPrice 里的预热价逻辑改了，你还得再复制粘贴一次，扎心啊老铁！</p>
<h5 id="开放封闭改造"><a href="#开放封闭改造" class="headerlink" title="开放封闭改造"></a>开放封闭改造</h5><p>那个新人价的问题——这会儿我要想给 askPrice 增加新人询价逻辑，我该咋整？我只能这么来：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 添加一个函数</span>
<span class="token comment" spellcheck="true">// 处理新人价</span>
<span class="token keyword">function</span> <span class="token function">newUserPrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">50</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> originPrice
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 在 askPrice 之中，添加一段代码</span>
<span class="token comment" spellcheck="true">// 处理新人价</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">'newUser'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">newUserPrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>在外层，我们编写一个 newUser 函数用于处理新人价逻辑；在 askPrice 里面，我们新增了一个 if-else 判断。可以看出，这样其实还是在修改 askPrice 的函数体，没有实现“对扩展开放，对修改封闭”的效果。</p>
<h5 id="最终版本"><a href="#最终版本" class="headerlink" title="最终版本"></a>最终版本</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 处理预热价</span>
<span class="token keyword">function</span> <span class="token function">prePrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">20</span>
  <span class="token punctuation">}</span> 
  <span class="token keyword">return</span> originPrice <span class="token operator">*</span> <span class="token number">0.9</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 处理大促价</span>
<span class="token keyword">function</span> <span class="token function">onSalePrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">30</span>
  <span class="token punctuation">}</span> 
  <span class="token keyword">return</span> originPrice <span class="token operator">*</span> <span class="token number">0.8</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 处理返场价</span>
<span class="token keyword">function</span> <span class="token function">backPrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>originPrice <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> originPrice <span class="token operator">-</span> <span class="token number">50</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> originPrice
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 处理尝鲜价</span>
<span class="token keyword">function</span> <span class="token function">freshPrice</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> originPrice <span class="token operator">*</span> <span class="token number">0.5</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> priceProcessor <span class="token operator">=</span> <span class="token punctuation">{</span>
    pre<span class="token punctuation">:</span> prePrice<span class="token punctuation">,</span>
    onSale<span class="token punctuation">:</span> onSalePrice<span class="token punctuation">,</span>
    back<span class="token punctuation">:</span> backPrice<span class="token punctuation">,</span>
    fresh<span class="token punctuation">:</span> freshPrice
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">askPrice</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> originPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> priceProcessor<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="策略模式之慕课网"><a href="#策略模式之慕课网" class="headerlink" title="策略模式之慕课网"></a>策略模式之慕课网</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li>不同策略分开处理</li>
<li>避免出现大量 if else 或者 switch case</li>
<li>JS 未找到经典应用场景，因为主要跟业务有关</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type
    <span class="token punctuation">}</span>

    <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'ordinary'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'普通用户购买'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'memeber'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'会员用户购买'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'vip'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'VIP 用户购买'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'ordinary'</span><span class="token punctuation">)</span>
u1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'member'</span><span class="token punctuation">)</span>
u1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'vip'</span><span class="token punctuation">)</span>
u1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">OrdinaryUser</span> <span class="token punctuation">{</span>
    <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'普通用户购买'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MemberUser</span> <span class="token punctuation">{</span>
    <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'会员用户购买'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">VipUser</span> <span class="token punctuation">{</span>
    <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'VIP 用户购买'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrdinaryUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
u1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
u1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VipUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
u1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h4 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul>
<li>不同策略，分开处理，而不是混合在一起</li>
<li>符合开放封闭原则</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>构造器模式</title>
    <url>/2020/06/02/design-pattern/%E6%9E%84%E9%80%A0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式的核心操作是去观察你整个逻辑里面的<strong>变与不变</strong>，然后将变与不变分离，达到使变化的部分灵活、不变的地方稳定的目的。</p>
<h2 id="构造器模式（创建型）"><a href="#构造器模式（创建型）" class="headerlink" title="构造器模式（创建型）"></a>构造器模式（创建型）</h2><p>构造器解决的是多个对象实例的问题</p>
<p>未使用</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> liLei <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'李雷'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
    career<span class="token punctuation">:</span> <span class="token string">'coder'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> hanMeiMei <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'韩梅梅'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
    career<span class="token punctuation">:</span> <span class="token string">'product manager'</span>
<span class="token punctuation">}</span></code></pre>
<p>使用</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">this</span><span class="token punctuation">.</span>career <span class="token operator">=</span> career
<span class="token punctuation">}</span>

<span class="token keyword">var</span> liLei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'李雷'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'coder'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> hanMeiMei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'韩梅梅'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'product manager'</span><span class="token punctuation">)</span></code></pre>
<p>在创建一个user过程中，谁变了，谁不变？很明显，变的是每个user的姓名、年龄、工种这些值，这是用户的<strong>个性</strong>，不变的是每个员工都具备姓名、年龄、工种这些属性，这是用户的<strong>共性</strong>。</p>
<p>那么构造器做了什么？构造器是不是将 name、age、career 赋值给对象的过程封装，确保了每个对象都具备这些属性，确保了<strong>共性</strong>的不变，同时将 name、age、career 各自的取值操作开放，确保了<strong>个性</strong>的灵活？</p>
<p>如果在使用构造器模式的时候，我们本质上是去抽象了每个对象实例的变与不变。那么使用工厂模式时，我们要做的就是去抽象不同构造函数（类）之间的变与不变。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>装饰器模式</title>
    <url>/2020/06/02/design-pattern/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>装饰者模式（Decorator Pattern）允许像一个现有的对象添加新的功能，同时又不改变其结构，属于结构型设计模式。<br>不仅麻烦，直接去修改已有的函数体，这种做法违背了我们的“开放封闭原则”；往一个函数体里塞这么多逻辑，违背了我们的“单一职责原则”。所以说这个事儿，越想越不能这么干。</p>
<p>老代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>
    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">'open'</span><span class="token operator">></span>点击打开<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">'close'</span><span class="token operator">></span>关闭弹框<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">const</span> Modal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> modal <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>modal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            modal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
            modal<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'您还未登录哦~'</span>
      modal<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'modal'</span>
      modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>modal<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> modal
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 点击打开按钮展示模态框</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 未点击则不创建modal实例，避免不必要的内存占用</span>
    <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 点击关闭按钮隐藏模态框</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> modal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'modal'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>modal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>新代码，先把老的逻辑抽出去，再加自己的新逻辑</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">function</span> <span class="token function">openModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 按钮文案修改逻辑</span>
<span class="token keyword">function</span> <span class="token function">changeButtonText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'快去登录'</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 按钮置灰逻辑</span>
<span class="token keyword">function</span> <span class="token function">disableButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> btn <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 新版本功能逻辑整合</span>
<span class="token keyword">function</span> <span class="token function">changeButtonStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">changeButtonText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">disableButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">openModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">changeButtonStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>再改一版，用 ES6 来写</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">OpenButton</span> <span class="token punctuation">{</span>
    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>open_btn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>open_btn <span class="token operator">=</span> open_btn
    <span class="token punctuation">}</span>

    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>open_btn<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeButtonStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">changeButtonStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeButtonText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">disableButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">disableButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>
        btn<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">changeButtonText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>
        btn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'快去登录'</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> openButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> decorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span>openButton<span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// openButton.onClick()</span>
    <span class="token comment" spellcheck="true">// 此处可以分别尝试两个实例的onClick方法，验证装饰器是否生效</span>
    decorator<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>大家可能刚刚没来得及注意，按钮新逻辑中，文本修改&amp;按钮置灰这两个变化，被我封装在了两个不同的方法里，并以组合的形式出现在了最终的目标方法<code>changeButtonStatus</code>里。这样做的目的是为了强化大家脑中的“单一职责”意识。将不同的职责分离，可以做到每个职责都能被灵活地复用；同时，不同职责之间无法相互干扰，不会出现因为修改了 A 逻辑而影响了 B 逻辑的狗血剧情。</p>
<h3 id="ES7-之中的装饰器"><a href="#ES7-之中的装饰器" class="headerlink" title="ES7 之中的装饰器"></a>ES7 之中的装饰器</h3><h4 id="装饰类"><a href="#装饰类" class="headerlink" title="装饰类"></a>装饰类</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">classDecorator</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    target<span class="token punctuation">.</span>hasDecorator <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">return</span> target
<span class="token punctuation">}</span>

@classDecorator
<span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Button 是否被装饰了：'</span><span class="token punctuation">,</span> Button<span class="token punctuation">.</span>hasDecorator<span class="token punctuation">)</span></code></pre>
<h3 id="装饰类之中的方法"><a href="#装饰类之中的方法" class="headerlink" title="装饰类之中的方法"></a>装饰类之中的方法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">funcDecorator</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> originalMethod <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value
    descriptor<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是 Func 的装饰器逻辑'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> originalMethod<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> descriptor
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>
    @funcDecorator
    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是 Func 的原有逻辑'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
button<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>参数说明和注意事项</p>
<ul>
<li>target 表示 Button.prototype，即累的原型对象</li>
<li>name 装饰目标的属性名，比如 onClick</li>
<li>descriptor 属性描述对象<ul>
<li>数据描述符<ul>
<li>value，默认 undefined</li>
<li>writalbe，默认 true</li>
<li>enumerable，是否可枚举，默认 true</li>
<li>configurable，是否可配置，默认 true</li>
</ul>
</li>
<li>存取描述符<ul>
<li>get 访问属性时调用的方法</li>
<li>set 设置属性时调用的方法</li>
</ul>
</li>
</ul>
</li>
<li>装饰器函数执行的时候，Button 实例并不存在，实例实在我们的代码运行时动态生成的，而装饰器函数则是在函数编译阶段就执行了。</li>
</ul>
<p>要想使用装饰器</p>
<pre class=" language-javascript"><code class="language-javascript">npm install babel<span class="token operator">-</span>preset<span class="token operator">-</span>env babel<span class="token operator">-</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>decorators<span class="token operator">-</span>legacy <span class="token operator">--</span>save<span class="token operator">-</span>dev
npm install babel<span class="token operator">-</span>cli <span class="token operator">-</span>g</code></pre>
<blockquote>
<p>编写配置文件 .babelrc</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"transform-decorators-legacy"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2020/06/02/design-pattern/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="6-结构型：适配器模式"><a href="#6-结构型：适配器模式" class="headerlink" title="6 结构型：适配器模式"></a>6 结构型：适配器模式</h2><p>适配器模式通过<strong>把一个类的接口变换成客户端所期待的另一种接口</strong>，可以帮我们解决<strong>不兼容</strong>的问题。</p>
<p>实际接口和目标接口不匹配的尴尬可以用一个叫适配器的东西来化解。</p>
<p>新代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HttpUtils</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promsie</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                    <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            method<span class="token punctuation">:</span> 'POST<span class="token punctuation">,</span>
            headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
                <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-ww-form-urlencoded'</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            body<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">changeData</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> prop
        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                str <span class="token operator">+</span><span class="token operator">=</span> prop <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> prop <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
            i<span class="token operator">++</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> str
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> URL <span class="token operator">=</span> <span class="token string">'ZZCVXSDASD'</span>
<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> postResponse <span class="token operator">=</span> awaitHttpUtils<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> getResponse <span class="token operator">=</span> <span class="token keyword">await</span> HttpUtils<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>URL<span class="token punctuation">)</span></code></pre>
<p>老代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Ajax</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 创建ajax对象</span>
  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">{</span>
      xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Microsoft.XMLHTTP'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

   <span class="token operator">...</span><span class="token punctuation">(</span>此处省略一系列的业务逻辑细节<span class="token punctuation">)</span>
   <span class="token keyword">var</span> type <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// 识别请求类型</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> data<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果有数据就拼接</span>
    <span class="token punctuation">}</span> 
    <span class="token comment" spellcheck="true">// 发送get请求</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 如果需要像 html 表单那样 POST 数据，使用 setRequestHeader() 来添加 http 头。</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 发送post请求</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 处理返回数据</span>
  xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>failed<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">failed</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 发送get请求</span>
<span class="token function">Ajax</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url地址<span class="token punctuation">,</span> post入参<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 成功的回调逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 失败的回调逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>适配器一下</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">AjaxAdapter</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> type <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> result
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token keyword">await</span> HttpUtils<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token keyword">await</span> HttpUtils<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    result<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> success <span class="token operator">?</span> <span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">failed</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// if (failed) {</span>
            <span class="token function">failed</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 用适配器适配旧的Ajax方法</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Ajax</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">AjaxAdapter</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2020/06/02/design-pattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="行为型：观察者模式"><a href="#行为型：观察者模式" class="headerlink" title="行为型：观察者模式"></a>行为型：观察者模式</h2><p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。 </p>
<p>观察者模式有一个“别名”，叫<code>发布 - 订阅模式</code>，因为观察者模式里两个核心的角色要素——<strong>“发布者”</strong>与<strong>“订阅者”</strong>。</p>
<p>角色划分 –&gt; 状态变化 –&gt; 发布者通知到订阅者，这就是观察者模式的“套路”。</p>
<p>首先我们来看这个代表发布者的类，我们给它起名叫Publisher。这个类应该具备哪些“基本技能”呢？大家回忆一下上文中的韩梅梅，韩梅梅的基本操作是什么？首先是拉群（增加订阅者），然后是@所有人（通知订阅者），这俩是最明显的了。此外作为群主&amp;产品经理，韩梅梅还具有踢走项目组成员（移除订阅者）的能力。OK，产品经理发布者类的三个基本能力齐了，下面我们开始写代码：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Publisher created'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Publisher.add invoked'</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Publisher.remove invoked'</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Publisher.notify invoked'</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>observer <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer created'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer.update invoked'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PrdPublisher</span> <span class="token keyword">extends</span> <span class="token class-name">Publisher</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PrdPublisher created'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PrdPublisher.getState invoked'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prdState
    <span class="token punctuation">}</span>

    <span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PrdPublisher.setState invoked'</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> state
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DeveloperObserver</span> <span class="token keyword">extends</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DeveloperObserver created'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">update</span><span class="token punctuation">(</span>publisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer.update invoked'</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> publisher<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> prd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prdState
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'996 begins...'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 创建订阅者：前端开发李雷</span>
<span class="token keyword">const</span> liLei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeveloperObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 创建订阅者：服务端开发小A（sorry。。。起名字真的太难了）</span>
<span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeveloperObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 创建订阅者：测试同学小B</span>
<span class="token keyword">const</span> B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeveloperObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 韩梅梅出现了</span>
<span class="token keyword">const</span> hanMeiMei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrdPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 需求文档出现了</span>
<span class="token keyword">const</span> prd <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 具体的需求内容</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 韩梅梅开始拉群</span>
hanMeiMei<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>liLei<span class="token punctuation">)</span>
hanMeiMei<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>
hanMeiMei<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 韩梅梅发送了需求文档，并@了所有人</span>
hanMeiMei<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>prd<span class="token punctuation">)</span></code></pre>
<h4 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h4><h5 id="Vue数据双向绑定（响应式系统）的实现原理"><a href="#Vue数据双向绑定（响应式系统）的实现原理" class="headerlink" title="Vue数据双向绑定（响应式系统）的实现原理"></a>Vue数据双向绑定（响应式系统）的实现原理</h5><p>在 Vue 中，每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新——这是一个典型的观察者模式。</p>
<p>在Vue数据双向绑定的实现逻辑里，有这样三个关键角色：</p>
<ul>
<li>observer，注意不是设计模式中的订阅者。observer 不仅是一个数据监听器，它还需要对监听到的数据进行<strong>转发</strong>——也就是说它<strong>同时还是一个发布者</strong>。</li>
<li>watcher：observer 把数据转发给了<strong>真正的订阅者</strong>——watcher对象。watcher 接收到新的数据后，会去更新视图。</li>
<li>compile：：MVVM 框架特有的角色，负责对每个节点元素指令进行扫描和解析，指令的数据初始化、订阅者的创建这些“杂活”也归它管~</li>
</ul>
<p>核心代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
         <span class="token comment" spellcheck="true">// 可枚举</span>
     enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
     <span class="token comment" spellcheck="true">// 不可配置</span>
     configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
     <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> val<span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token comment" spellcheck="true">// 监听器函数</span>
     <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment" spellcheck="true">// 通知所有订阅者</span>
       dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// Dep 是订阅者</span>
<span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
      sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h5 id="实现一个-event-bus-或者-event-emitter"><a href="#实现一个-event-bus-或者-event-emitter" class="headerlink" title="实现一个 event bus 或者 event emitter"></a>实现一个 event bus 或者 event emitter</h5><p>全局事件总线，严格来说不能说是观察者模式，而是发布-订阅模式。</p>
<p>所有事件的发布/订阅操作，必须经由事件中心，禁止一切“私下交易”！</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> EventBus</code></pre>
<p>在主文件里引入EventBus，并挂载到全局：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> bus <span class="token keyword">from</span> <span class="token string">'EventBus的文件路径'</span>
Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bus <span class="token operator">=</span> bus</code></pre>
<p>发布（触发）事件：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'someEvent'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span></code></pre>
<p>订阅事件：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'someEvent'</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span></code></pre>
<p>手写一个 event-bus</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">emit</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                <span class="token function">cb</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>
            <span class="token keyword">const</span> index <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                callbacks<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 为时间注册单次监听</span>
    <span class="token function">once</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 对回调函数进行包装，使其执行完毕自动被移除</span>
        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            cb<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h5 id="观察者模式与发布-订阅模式的区别是什么？"><a href="#观察者模式与发布-订阅模式的区别是什么？" class="headerlink" title="观察者模式与发布-订阅模式的区别是什么？"></a>观察者模式与发布-订阅模式的区别是什么？</h5><p>回到我们上文的例子里。韩梅梅把所有的开发者拉了一个群，直接把需求文档丢给每一位群成员，这种<strong>发布者直接触及到订阅者</strong>的操作，叫观察者模式。但如果韩梅梅没有拉群，而是把需求文档上传到了公司统一的需求平台上，需求平台感知到文件的变化、自动通知了每一位订阅了该文件的开发者，这种<strong>发布者不直接触及到订阅者、而是由统一的第三方来完成实际的通信的操作，叫做发布-订阅模式</strong>。</p>
<p>相信大家也已经看出来了，观察者模式和发布-订阅模式之间的区别，在于是否存在第三方、发布者能否直接感知订阅者。</p>
<p>但这并不意味着，发布-订阅模式就比观察者模式“高级”。在实际开发中，我们的模块解耦诉求<strong>并非总是需要它们完全解耦</strong>。如果两个模块之间本身存在关联，且这种关联是稳定的、必要的，那么我们使用观察者模式就足够了。而在模块与模块之间独立性较强、且没有必要单纯为了数据通信而强行为两者制造依赖的情况下，我们往往会倾向于使用发布-订阅模式。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/2020/06/02/design-pattern/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="行为型：迭代器模式"><a href="#行为型：迭代器模式" class="headerlink" title="行为型：迭代器模式"></a>行为型：迭代器模式</h2><p>迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。 ——《设计模式：可复用面向对象软件的基础》</p>
<p>在“公元前”，JS原生的集合类型数据结构，只有Array（数组）和Object（对象）；而ES6中，又新增了Map和Set。</p>
<p>ES6约定，任何数据结构只要具备Symbol.iterator属性（这个属性就是Iterator的具体实现，它本质上是当前数据结构默认的迭代器生成函数），就可以被遍历——准确地说，是被for…of…循环和迭代器的next方法遍历。 事实上，for…of…的背后正是对next方法的反复调用。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
<span class="token keyword">for</span><span class="token punctuation">(</span>item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`当前元素是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">// 通过调用iterator，拿到迭代器对象</span>
<span class="token keyword">const</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 对迭代器对象执行next，就能逐个访问集合的成员</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>而for…of…做的事情，基本等价于下面这通操作：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 通过调用iterator，拿到迭代器对象</span>
<span class="token keyword">const</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 初始化一个迭代结果</span>
<span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token punctuation">{</span> done<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 循环往外迭代成员</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>now<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    now <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>now<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`现在遍历到了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>now<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="实现一个迭代器生成函数"><a href="#实现一个迭代器生成函数" class="headerlink" title="实现一个迭代器生成函数"></a>实现一个迭代器生成函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 编写一个迭代器生成函数</span>
<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">iteratorGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token string">'1号选手'</span>
    <span class="token keyword">yield</span> <span class="token string">'2号选手'</span>
    <span class="token keyword">yield</span> <span class="token string">'3号选手'</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">iteratorGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p> ES5 实现</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">iteratorGenerator</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> len <span class="token operator">=</span> list<span class="token punctuation">.</span>length
    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        next<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> done <span class="token operator">=</span> index <span class="token operator">>=</span>len
            <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token operator">!</span>done <span class="token operator">?</span> list<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> undefined
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                done<span class="token punctuation">:</span> done<span class="token punctuation">,</span>
                value<span class="token punctuation">:</span> value
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">iteratorGenerator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式学习</title>
    <url>/2020/06/02/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><h3 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h3><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>设计模式的核心操作是去观察你整个逻辑里面的<strong>变与不变</strong>，然后将变与不变分离，达到使变化的部分灵活、不变的地方稳定的目的。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h4><ul>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li>单例模式</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
<h3 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h3><ul>
<li>适配器模式</li>
<li>装饰者模式</li>
<li>代理模式</li>
<li>外观模式</li>
<li>桥接模式</li>
<li>组合模式</li>
<li>享元模式</li>
</ul>
<h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><ul>
<li>策略模式</li>
<li>模板方法模式</li>
<li>观察者模式</li>
<li>迭代子模式</li>
<li>责任链模式</li>
<li>命令模式</li>
<li>备忘录模式</li>
<li>状态模式</li>
<li>访问者模式</li>
<li>中介者模式</li>
<li>解释器模式</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>imooc react-native 项目笔记</title>
    <url>/2020/06/02/fe-frameworkds/imooc%20react-native%20%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="imooc-react-native-项目笔记"><a href="#imooc-react-native-项目笔记" class="headerlink" title="imooc react-native 项目笔记"></a>imooc react-native 项目笔记</h1><h2 id="React-基础知识"><a href="#React-基础知识" class="headerlink" title="React 基础知识"></a>React 基础知识</h2><blockquote>
<p>声明式与命令式</p>
</blockquote>
<blockquote>
<p>命令式编程：命令“机器”如何去做事情（how），这样不管你想要的是什么（what），他都会按照你的命令实现<br>声明式编程：高速“机器“你想要的是什么（what），让机器想出如何去做(how)</p>
</blockquote>
<h3 id="如何返回多个顶级标签"><a href="#如何返回多个顶级标签" class="headerlink" title="如何返回多个顶级标签"></a>如何返回多个顶级标签</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">HelloMessage</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> views <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        views<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">)</span>
        views<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>h1<span class="token operator">></span>I am Lv Jiawen<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>HelloMessage <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre>
<h3 id="渲染子节点"><a href="#渲染子节点" class="headerlink" title="渲染子节点"></a>渲染子节点</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Comp</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>ul<span class="token operator">></span>
                <span class="token punctuation">{</span>
                    React<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>child<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Comp<span class="token operator">></span>
        <span class="token operator">&lt;</span>span<span class="token operator">></span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
        <span class="token operator">&lt;</span>span<span class="token operator">></span>world<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
        <span class="token operator">&lt;</span>span<span class="token operator">></span>lvjiawen<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Comp<span class="token operator">></span><span class="token punctuation">,</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre>
<h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span>
<span class="token keyword">class</span> <span class="token class-name">Comp</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
        title<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ....</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="默认属性"><a href="#默认属性" class="headerlink" title="默认属性"></a>默认属性</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Comp</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
        shortName<span class="token punctuation">:</span> <span class="token string">'MyTitle'</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ....</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="ref属性（获取真实-DOM）"><a href="#ref属性（获取真实-DOM）" class="headerlink" title="ref属性（获取真实 DOM）"></a>ref属性（获取真实 DOM）</h3><p>mount 之后才能拿到 $refs</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Alert</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">showAlert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Debug:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyTitle</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    onClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>alert<span class="token punctuation">.</span><span class="token function">showAlert</span><span class="token punctuation">(</span><span class="token string">'MyTitle'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>h1 onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
                <span class="token operator">&lt;</span>Alert ref<span class="token operator">=</span><span class="token string">'alert'</span><span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>用户交互之后，组件自身会改变的一些属性</p>
<p>props 是组件自身无法改变的属性</p>
<h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><ul>
<li><p>IOS</p>
<ul>
<li>(void) viewWillAppear: (BOOL)animated</li>
<li>(void) viewDidLoad</li>
<li>(void) viewWillDisappear: (BOOL)animated</li>
</ul>
</li>
<li><p>Android  Activity 提供了</p>
<ul>
<li>onCreate()</li>
<li>onStart()</li>
<li>onResume()</li>
<li>onPause()</li>
<li>onStop()</li>
<li>onDestroy()</li>
</ul>
</li>
<li><p>react</p>
<ul>
<li>初始化阶段<ol>
<li><strong>constructor</strong></li>
<li>static getDerivedStateFromProps()</li>
<li><strong>componentWillMount()</strong> / UNSAFE_componentWillMount()</li>
<li><strong>render()</strong></li>
<li><strong>componentDidMount()</strong></li>
</ol>
</li>
<li>更新阶段（props 或者 state 的改变可能会引起组件的更新，组件重新渲染的过程中会调用）<ol>
<li>componentWillReceiveProps()</li>
<li>UNSAFE_componentWillReceiveProps()</li>
<li>static getDerivedStateFromProps()</li>
<li>shouldComponentUpdate()</li>
<li><strong>componentWillUpdate()</strong> / UNSAFE_componentWillUpdate()：内存里边，数据已经是最新的了，界面还没有更新</li>
<li><strong>render()</strong></li>
<li>getSnapshotBeforeUpdate()</li>
<li><strong>componentDidUpdate()</strong></li>
</ol>
</li>
<li>卸载阶段<ol>
<li>componentWillUnmount()</li>
</ol>
</li>
<li>错误处理<ol>
<li>componentDidCatch()</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><ul>
<li>返回<ul>
<li>react 元素</li>
<li>字符串、数字</li>
<li>null</li>
<li>布尔值</li>
</ul>
</li>
</ul>
<h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p>  组件被装配之后立即调用</p>
<p>  componentDidMount 在 render 方法之后执行的，componentDidMount 可以获取到真是的 DOM 节点</p>
<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>  初始化渲染不会调用该方法</p>
<pre class=" language-javascript"><code class="language-javascript">  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token operator">/</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span></code></pre>
<h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><p>  组件从DOM 中一处的时候立即被调用。清除定时器，在 componentDidMount 创建的一些东西。</p>
<h2 id="React-native-布局知识"><a href="#React-native-布局知识" class="headerlink" title="React-native 布局知识"></a>React-native 布局知识</h2><p>react-native 中，宽高没有单位，代表设备的独立像素</p>
<h3 id="react-native-flex-box-与-web-css-flex-box-的不同"><a href="#react-native-flex-box-与-web-css-flex-box-的不同" class="headerlink" title="react-native flex box 与 web css flex box 的不同"></a>react-native flex box 与 web css flex box 的不同</h3><ul>
<li>在 react-native 中 flexDirection 默认为 ’column’，在css 中 flex-direction 默认为 row</li>
<li>在 react-native 中 alignItems 默认为 ’stretch’，在css 中 align-items 默认为 ‘flex-start’</li>
<li>在 react-native 中 flex 只接受一个参数，在css 中 flex 默认为 ‘2 2 10%’</li>
<li>react-native 不支持 align-content, flex-basis, order, flex-flow, flex-grow, flex-shrink</li>
</ul>
<h3 id="父亲视图属性"><a href="#父亲视图属性" class="headerlink" title="父亲视图属性"></a>父亲视图属性</h3><ul>
<li>flexDirection：row, column, row-reverse, column-reverse</li>
<li>flexWrap：wrap, nowrap</li>
<li>justifyContent: flex-start, flex-end, center, space-between, space-around</li>
<li>alignItems: flex-start, flex-end, center, stretch</li>
</ul>
<h3 id="子视图属性"><a href="#子视图属性" class="headerlink" title="子视图属性"></a>子视图属性</h3><ul>
<li>alignSelf：重写父视图中alignItems</li>
<li>flex：定义一个元素可伸缩的能力，默认为0</li>
</ul>
<h2 id="React-navigation"><a href="#React-navigation" class="headerlink" title="React-navigation"></a>React-navigation</h2><h3 id="什么是导航器？"><a href="#什么是导航器？" class="headerlink" title="什么是导航器？"></a>什么是导航器？</h3><p>导航器也可以堪称是一个普通的 react 组件</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>imooc 实战</tag>
        <tag>react</tag>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 性能优化</title>
    <url>/2020/06/02/fe-frameworkds/vue%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h2><ul>
<li>不需要把所有的数据都定义在 data 上，可以直接挂载在实例上</li>
</ul>
<h2 id="预渲染"><a href="#预渲染" class="headerlink" title="预渲染"></a>预渲染</h2><ul>
<li><p>由于基于 Vue.js 的单页应用是由 Vue.js 渲染页面，所以页面下载后到渲染会有一定的白屏时间</p>
</li>
<li><p>我们可以不依赖 JS，在页面下载后先渲染一张 Loading 图片或者骨架屏结构。</p>
</li>
<li><p>当主页面渲染时，把这张占位图片或者结构隐藏</p>
</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pre-start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    loading...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> preStart <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#pre-start'</span><span class="token punctuation">)</span>
    preStart<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h2><p>对于首次渲染，我们只需要加载首屏渲染所需要的资源，其他资源可以异步按需加载。这样可以<strong>减少首屏加载的资源包大小</strong>，加快渲染</p>
<h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'chart'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">'vue-charts/compontents/Echarts.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'echarts/lib/chart/line'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'echarts/lib/component/tooltip'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'echarts/lib/component/legend'</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> ECharts <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        ECharts<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">registerTheme</span><span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">,</span> orange<span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>ECharts<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="异步路由"><a href="#异步路由" class="headerlink" title="异步路由"></a>异步路由</h3><p>工厂函数</p>
<p>import 返回 promise</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Recommend <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'components/recommend/recommend'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Singer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'components/singer/singer'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'components/rank/rank'</span><span class="token punctuation">)</span></code></pre>
<h2 id="后编译"><a href="#后编译" class="headerlink" title="后编译"></a>后编译</h2><h3 id="编译代码冗余？"><a href="#编译代码冗余？" class="headerlink" title="编译代码冗余？"></a>编译代码冗余？</h3><p>依赖包本身不编译，它的编译交给应用来做</p>
<p>通过修改 webpack 配置 rules 中的 include</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>loader<span class="token punctuation">:</span> <span class="token string">'eslint-loader'</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>
      loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>
      include<span class="token punctuation">:</span> allSource<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/lodash-es'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="后编译依赖嵌套？"><a href="#后编译依赖嵌套？" class="headerlink" title="后编译依赖嵌套？"></a>后编译依赖嵌套？</h3><p>webpack-post-compile-plugin</p>
<p>需要后编译的依赖包在 package.json 中声明</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token string">"postCompile"</span><span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>一份编译代码</li>
<li>一份 ployfill</li>
<li>npm 包无需编译发布</li>
<li>主题定制</li>
<li>rem 布局</li>
</ul>
<h2 id="运行时优化"><a href="#运行时优化" class="headerlink" title="运行时优化"></a>运行时优化</h2><h3 id="使用v-if代替v-show"><a href="#使用v-if代替v-show" class="headerlink" title="使用v-if代替v-show"></a>使用v-if代替v-show</h3><p>两者的区别是：v-if不渲染DOM，v-show会预渲染DOM</p>
<p><code>除以下情况使用v-show</code>，其他情况尽量使用v-if</p>
<ul>
<li>有预渲染需求</li>
<li>需要频繁切换显示状态</li>
</ul>
<h3 id="v-for必须加上key，并避免同时使用v-if"><a href="#v-for必须加上key，并避免同时使用v-if" class="headerlink" title="v-for必须加上key，并避免同时使用v-if"></a>v-for必须加上key，并避免同时使用v-if</h3><p>一般我们在两种常见的情况下会倾向于这样做:</p>
<ul>
<li>为了过滤一个列表中的项目 比如 <code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code>。在这种情形下，请将 <code>users</code>替换为一个计算属性 (比如<code>activeUsers</code>)，让其返回过滤后的列表</li>
<li>为了避免渲染本应该被隐藏的列表 比如 <code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>。这种情形下，请将 <code>v-if</code> 移动至容器元素上 (比如 ul, ol)</li>
</ul>
<h3 id="事件及时销毁"><a href="#事件及时销毁" class="headerlink" title="事件及时销毁"></a>事件及时销毁</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>touchmove<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>touchmove<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="首屏优化"><a href="#首屏优化" class="headerlink" title="首屏优化"></a>首屏优化</h2><h3 id="图片裁剪、使用webp"><a href="#图片裁剪、使用webp" class="headerlink" title="图片裁剪、使用webp"></a>图片裁剪、使用webp</h3><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueLazyload<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  error<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/img/defaultpic_small.png'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  filter<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    webp <span class="token punctuation">(</span>listener<span class="token punctuation">:</span> any<span class="token punctuation">,</span> options<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>supportWebp<span class="token punctuation">)</span> <span class="token keyword">return</span>
      <span class="token comment" spellcheck="true">// listener.src += '.webp'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="资源提前请求"><a href="#资源提前请求" class="headerlink" title="资源提前请求"></a>资源提前请求</h3><p>vue 中各文件的加载顺序为：router.js =&gt; main.js =&gt; App.vue =&gt; [page].vue =&gt; [component].vue</p>
<p>可以在 router 加载的时候去请求数据</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>

store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'initAjax'</span><span class="token punctuation">)</span></code></pre>
<h3 id="异步路由-1"><a href="#异步路由-1" class="headerlink" title="异步路由"></a>异步路由</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
  path<span class="token punctuation">:</span> <span class="token string">'/order'</span><span class="token punctuation">,</span>
  component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">'./views/order.vue'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>异步组件</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>HellowWorld v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"showHello"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> HellowWorld<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/HelloWorld.vue'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      showHello<span class="token punctuation">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function">initAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollY <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>showHello <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<h3 id="使用轻量级插件、异步插件"><a href="#使用轻量级插件、异步插件" class="headerlink" title="使用轻量级插件、异步插件"></a>使用轻量级插件、异步插件</h3><p>使用webpack-bundle-analyzer查看项目所有包的体积大小，较大的插件包尽量寻找轻量级的替代方案。</p>
<p>首屏用不到的插件、或只在特定场景才会用到的插件使用异步加载（如定位插件，部分情况可以通过URL传递经纬度；或生成画报插件，需要在点击时触发）；插件第一次加载后缓存在本地，使用方式为：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 以定位插件为例</span>
<span class="token keyword">const</span> latitude <span class="token operator">=</span> <span class="token function">getUrlParam</span><span class="token punctuation">(</span><span class="token string">'latitude'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> longitude <span class="token operator">=</span> <span class="token function">getUrlParam</span><span class="token punctuation">(</span><span class="token string">'longitude'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 如果没有经纬度参数，则使用定位插件来获取经纬度</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>latitude <span class="token operator">||</span> <span class="token operator">!</span>longitude<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 首次加载定位插件</span>
  <span class="token comment" spellcheck="true">// webpack4写法，若使用webpack3及以下，则await import('locationPlugin')即可</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>WhereAmI<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>WhereAmI <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'locationPlugin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span>
  <span class="token comment" spellcheck="true">// do sth...</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="公用cdn"><a href="#公用cdn" class="headerlink" title="公用cdn"></a>公用cdn</h3><h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><h3 id="减少网络请求"><a href="#减少网络请求" class="headerlink" title="减少网络请求"></a>减少网络请求</h3><p>浏览器对同一时间针对同一域名下的请求有一定数量限制（一般是6个），超过限制数目的请求会被阻塞</p>
<h3 id="合理使用preload、dns-prefetch、prefetch"><a href="#合理使用preload、dns-prefetch、prefetch" class="headerlink" title="合理使用preload、dns-prefetch、prefetch"></a>合理使用preload、dns-prefetch、prefetch</h3><p>preload具有较高的加载优先级，它可以利用间隙时间预加载资源，将加载和执行分离开，不阻塞渲染和document的onload事件</p>
<p>每次与域名连接都需要进行DNS解析，使用dns-prefetch可以预解析域名的DNS</p>
<p>prefetch会预加载页面将来可能用到的一些资源，优先级较低；对首屏渲染要求较高的项目不建议使用</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/dist/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- dns-prefetch写法 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//www.dpfile.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>md-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- preload写法，as属性必须 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/dist/css/app.52dd885e.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>style<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/dist/js/app.05faf3b5.js<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>script<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/dist/js/chunk-vendors.04343b1f.js<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>script<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- prefetch写法 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/dist/js/chunk-vendors.04343b1f.js<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre>
<h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><p>PWA支持缓存HTML文档、接口（get）等，降低页面白屏时间 这样即使在弱网甚至断网情况下，也能迅速展示出页面</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 渲染初始化渲染过程</title>
    <url>/2020/06/02/fe-frameworkds/vue%20%E7%BB%84%E4%BB%B6%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="Vue-js-渲染初始化渲染过程"><a href="#Vue-js-渲染初始化渲染过程" class="headerlink" title="Vue.js 渲染初始化渲染过程"></a>Vue.js 渲染初始化渲染过程</h2><p>new Vue =&gt; init =&gt; $mount =&gt; compile =&gt; render =&gt; vnode =&gt; patch =&gt; DOM</p>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ul>
<li>init 初始化过程</li>
<li>$mount 挂载方法</li>
<li>compile<ul>
<li>parse 生成 ast</li>
<li>optimize 优化，标记静态节点，虚拟 DOM 比对的时候直接跳过</li>
<li>generate 生成字符串函数，用 new Fuction 调用</li>
</ul>
</li>
<li>render function<ul>
<li>创建流程：<ul>
<li>生成虚拟DOM<ul>
<li>patch方法<ul>
<li>patchVnode</li>
<li>updateChildren</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>更新流程<ul>
<li>getter，哪些数据和哪些组件有依赖关系</li>
<li>setter</li>
<li>watcher</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>递归渲染</p>
<p>组件层级特别多，渲染可能会慢</p>
<h2 id="虚拟-DOM的优势"><a href="#虚拟-DOM的优势" class="headerlink" title="虚拟 DOM的优势"></a>虚拟 DOM的优势</h2><ul>
<li>提供一个不错的速度</li>
<li>可以提供跨平台能力</li>
</ul>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli3 打包优化</title>
    <url>/2020/02/20/fe-frameworkds/vue%20%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="vue-cli3-打包优化"><a href="#vue-cli3-打包优化" class="headerlink" title="vue-cli3 打包优化"></a>vue-cli3 打包优化</h1><h2 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h2><pre class=" language-javascript"><code class="language-javascript">configureWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 为生产环境修改配置...</span>
    config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token comment" spellcheck="true">//生产环境自动删除console</span>
      <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        uglifyOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>
            warnings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            drop_debugger<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            drop_console<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        sourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        parallel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="防止-cli3-进入页面的时候加载太多请求"><a href="#防止-cli3-进入页面的时候加载太多请求" class="headerlink" title="防止 cli3 进入页面的时候加载太多请求"></a>防止 cli3 进入页面的时候加载太多请求</h2><pre class=" language-javascript"><code class="language-javascript">chainWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 移除 prefetch 插件</span>
  config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'prefetch'</span><span class="token punctuation">)</span>
  <span class="token comment" spellcheck="true">// 移除 preload 插件</span>
  config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'preload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="CDN-引入"><a href="#CDN-引入" class="headerlink" title="CDN 引入"></a>CDN 引入</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue.config.js</span>
<span class="token keyword">const</span> isProduction <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cdn <span class="token operator">=</span> <span class="token punctuation">{</span>
  css<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  js<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token string">'https://cdn.bootcss.com/vue/2.6.10/vue.runtime.min.js'</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  chainWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 生产环境配置</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isProduction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 生产环境注入cdn</span>
      config<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>args <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cdn <span class="token operator">=</span> cdn<span class="token punctuation">;</span>
          <span class="token keyword">return</span> args<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  configureWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isProduction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 用cdn方式引入</span>
      config<span class="token punctuation">.</span>externals <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token string">'vue'</span><span class="token punctuation">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>html 文件也要修改</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用CDN的JS文件 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> htmlWebpackPlugin<span class="token punctuation">.</span>options<span class="token punctuation">.</span>cdn <span class="token operator">&amp;&amp;</span> htmlWebpackPlugin<span class="token punctuation">.</span>options<span class="token punctuation">.</span>cdn<span class="token punctuation">.</span>js<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"&lt;%= htmlWebpackPlugin.options.cdn.js[i] %>"</span> rel<span class="token operator">=</span><span class="token string">"preload"</span> <span class="token keyword">as</span><span class="token operator">=</span><span class="token string">"script"</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre>
<h2 id="关闭生产环境-sourceMap"><a href="#关闭生产环境-sourceMap" class="headerlink" title="关闭生产环境 sourceMap"></a>关闭生产环境 sourceMap</h2><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  configureWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  configureWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isProduction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      config<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>alias
        <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"@img"</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/assets/images"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="压缩代码"><a href="#压缩代码" class="headerlink" title="压缩代码"></a>压缩代码</h2><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  chainWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isProduction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 压缩代码</span>
      config<span class="token punctuation">.</span>optimization<span class="token punctuation">.</span><span class="token function">minimize</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="关闭生产环境-sourceMap-1"><a href="#关闭生产环境-sourceMap-1" class="headerlink" title="关闭生产环境 sourceMap"></a>关闭生产环境 sourceMap</h2><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  configureWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="关闭生产环境-sourceMap-2"><a href="#关闭生产环境-sourceMap-2" class="headerlink" title="关闭生产环境 sourceMap"></a>关闭生产环境 sourceMap</h2><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  configureWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter 概述</title>
    <url>/2020/07/09/hybrid/flutter%20%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="如何使用-fluttr-包和插件"><a href="#如何使用-fluttr-包和插件" class="headerlink" title="如何使用 fluttr 包和插件"></a>如何使用 fluttr 包和插件</h2><p>pub.dartlang.org 网站</p>
<p>flutter_color_plugin</p>
<h2 id="StatelessWidget-与基础组件"><a href="#StatelessWidget-与基础组件" class="headerlink" title="StatelessWidget 与基础组件"></a>StatelessWidget 与基础组件</h2><p>不需要状态改变的 widget</p>
<p>内部没有需要改变的状态，或者根据状态改变来重新渲染自己</p>
<h3 id="Container-容器"><a href="#Container-容器" class="headerlink" title="Container 容器"></a>Container 容器</h3><h3 id="Text-文本"><a href="#Text-文本" class="headerlink" title="Text 文本"></a>Text 文本</h3><h3 id="Icon-图标"><a href="#Icon-图标" class="headerlink" title="Icon 图标"></a>Icon 图标</h3><h3 id="CloseButton-关闭按钮"><a href="#CloseButton-关闭按钮" class="headerlink" title="CloseButton 关闭按钮"></a>CloseButton 关闭按钮</h3><h3 id="BackButton-返回按钮"><a href="#BackButton-返回按钮" class="headerlink" title="BackButton 返回按钮"></a>BackButton 返回按钮</h3><h3 id="Chip"><a href="#Chip" class="headerlink" title="Chip"></a>Chip</h3><h3 id="Divider-分割线"><a href="#Divider-分割线" class="headerlink" title="Divider 分割线"></a>Divider 分割线</h3><h3 id="Card-卡片"><a href="#Card-卡片" class="headerlink" title="Card 卡片"></a>Card 卡片</h3><h3 id="AlertDialog-弹框"><a href="#AlertDialog-弹框" class="headerlink" title="AlertDialog 弹框"></a>AlertDialog 弹框</h3><h2 id="StatefulWidget-与基础组件"><a href="#StatefulWidget-与基础组件" class="headerlink" title="StatefulWidget 与基础组件"></a>StatefulWidget 与基础组件</h2><p>StatefulWidget 它并没有一个 build 方法去返回 Widget，而是多了一个 createState 方法返回 <code>_ + 类名 + State</code> 对象，而 build 方法则包含在这个<code>_ + 类名 + State</code>类当中。</p>
<p>Widget 需要依据数据才能完成构建，而对于 StatefulWidget 来说，其依赖的数据在 Widget 生命周期中可能会频繁地发生变化。由 State 创建 Widget，以数据驱动视图更新，而不是直接操作 UI 更新视觉属性，代码表达可以更精炼，逻辑也可以更清晰。</p>
<h3 id="MaterialApp"><a href="#MaterialApp" class="headerlink" title="MaterialApp"></a>MaterialApp</h3><p>材料设计 App</p>
<p>通常放在页面根节点</p>
<h3 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h3><p>封装了AppBar，底部导航栏，侧边栏</p>
<p>帮助实现App 整体布局</p>
<h3 id="AppBar"><a href="#AppBar" class="headerlink" title="AppBar"></a>AppBar</h3><p>顶部导航栏</p>
<h3 id="BottomNavigationBar"><a href="#BottomNavigationBar" class="headerlink" title="BottomNavigationBar"></a>BottomNavigationBar</h3><p>底部导航栏</p>
<h3 id="RefreshIndicator"><a href="#RefreshIndicator" class="headerlink" title="RefreshIndicator"></a>RefreshIndicator</h3><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><h3 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h3><p>输入框</p>
<h3 id="PageView"><a href="#PageView" class="headerlink" title="PageView"></a>PageView</h3><ul>
<li><ul>
<li><ul>
<li>Wrap 从左向右排列，可以自动换行</li>
<li>Flow 不好用，少用</li>
</ul>
</li>
</ul>
</li>
<li><p>ParentDataWidget</p>
<ul>
<li>Positioned 固定位置，通常和 Stack 搭配使用</li>
<li>Flexible<ul>
<li>Expanded 展开，在父容器中展开多大</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>混合开发</tag>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex</title>
    <url>/2020/06/02/fe-frameworkds/vuex/</url>
    <content><![CDATA[<p><strong>Vuex 和单纯的全局对象有以下两点不同：</strong></p>
<ol>
<li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>
<li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>
</ol>
<p><img src="/images/image-20190815144135480.png" alt="image-20190815144135480"></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'components/home/App'</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'vuex/editor/store'</span>

<span class="token comment" spellcheck="true">// 在 Vue 实例的初始化中声明 store。</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">'body'</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    App
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  store
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-bash"><code class="language-bash">└── editor
    ├── mutation-types.js
    ├── actions
    │   └── index.js
    ├── mutations
    │   └── index.js
    ├── plugins
    │   └── index.js
    ├── state
    │   └── index.js
    └── store
        └── index.js
</code></pre>
<p>editor/store/index.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vuex/editor/store/index.js</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>
<span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">'vuex/editor/state'</span>
<span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">'vuex/editor/mutations'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> actionLogPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex/editor/plugins'</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  state<span class="token punctuation">,</span>
  mutations<span class="token punctuation">,</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>actionLogPlugin<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre>
<p>editor/state/index.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 编辑器相关状态</span>
<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 页面相关状态</span>

<span class="token keyword">let</span> page <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  editor<span class="token punctuation">,</span>
  page
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> state</code></pre>
<p>state 中存储了 <strong>editor</strong>和 <strong>page</strong>两个对象，用于存储不同模块的状态。需要说明的是，这里完全可以使用模块机制将其拆开，在 editor.js 里存储编辑器相关的 state 和 mutations，在 page.js 中存储页面相关的 state 和 mutations，以使结构更加清晰。不过这里没有使用模块机制，由于模块数量并不多，也是完全可以接受的。</p>
<p>最佳实践：在子组件中通过 <code>vuex.getters</code>来获取该组件需要用到的所有状态：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/components/h5/Navbar.vue</span>

<span class="token operator">...</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    vuex<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token function">editor</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> state<span class="token punctuation">.</span>editor
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">page</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> state<span class="token punctuation">.</span>page
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>editor/mutations/index.js </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">'../mutation-types'</span>

<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>types<span class="token punctuation">.</span>CHANGE_LAYER_ZINDEX<span class="token punctuation">]</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>types<span class="token punctuation">.</span>DEL_LAYER<span class="token punctuation">]</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>types<span class="token punctuation">.</span>REMOVE_FROM_ARR<span class="token punctuation">]</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> itemToRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>types<span class="token punctuation">.</span>ADD_TO_ARR<span class="token punctuation">]</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> itemToAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>types<span class="token punctuation">.</span>DEL_SCENE<span class="token punctuation">]</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> mutations</code></pre>
<p> mutation-types.js。该文件主要作用为放置所有的命名 Mutations 的常量，方便合作开发人员厘清整个 app 包含的 mutations。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> CHANGE_LAYER_ZINDEX <span class="token operator">=</span> <span class="token string">'CHANGE_LAYER_ZINDEX'</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> DEL_LAYER <span class="token operator">=</span> <span class="token string">'DEL_LAYER'</span></code></pre>
<p>editor/actions/index.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">'../mutation-types'</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">delLayer</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>DEL_LAYER<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">delScene</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>DEL_SCENE<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">removeFromArr</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> itemToRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>REMOVE_FROM_ARR<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> itemToRemove<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addToArr</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> itemToAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>ADD_TO_ARR<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> itemToAdd<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>actions 的主要工作就是 <strong>dispatch</strong>（中文译为分发）mutations。初入门的同学可能觉得这是<strong>多此一举</strong>，actions 这一步看起来完全可以省略。</p>
<p>事实上，actions 的出现是为了弥补 mutations 无法实现异步操作的缺陷。所有的异步操作都可以放在 actions 中，比如如果想在调用 delScene 函数 5 秒后再分发 mutations，可以写成这样：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> delScene <span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>DEL_SCENE<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>引入 actions 的最佳实践</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> 
  undoAction<span class="token punctuation">,</span> 
  redoAction<span class="token punctuation">,</span>
  togglePreviewStatus<span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex/editor/actions'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    vuex<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        undoAction<span class="token punctuation">,</span>
        redoAction<span class="token punctuation">,</span>
        togglePreviewStatus<span class="token punctuation">,</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>editor/plugins/index.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">actionLogPlugin</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">// 每次 mutation 之后调用</span>
    <span class="token comment" spellcheck="true">// mutation 的格式为 { type, payload }</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>核心部分在于采用 <code>store.subscribe</code>注册了一个函数。</p>
<blockquote>
<p>该函数会在每次 mutation 之后被调用。这里 actionLogPlugin 函数完成的是记录每次 mutation 操作，实现撤销重做功能。具体实现逻辑此处不作赘述。</p>
</blockquote>
<p>后续我们也会深入地给大家分享 vuex 应用相关的内容</p>
<p>vue 没有编译器的版本，不能写 template</p>
<p>state 状态、数据</p>
<p>mutations 更改状态的函数</p>
<p>actions 异步操作</p>
<p>store 包含以上概念的容易</p>
<p>commit mutations</p>
<p>提交更改，能改state 的只有 mutation</p>
<p>dispatch action 派发动作</p>
<p>commit 调用  mutations 纯同步的</p>
<p>dispatch 调用 actions 可以是异步的</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 React Hooks</title>
    <url>/2020/07/09/fe-frameworkds/%E5%AD%A6%E4%B9%A0%20React%20Hooks/</url>
    <content><![CDATA[<h2 id="1-React-简介和缘起"><a href="#1-React-简介和缘起" class="headerlink" title="1 React 简介和缘起"></a>1 React 简介和缘起</h2><h3 id="React-特点"><a href="#React-特点" class="headerlink" title="React 特点"></a>React 特点</h3><ul>
<li>声明式写法</li>
<li>组件化</li>
<li>一次学习，随处编写</li>
<li>大厂加持、简单易懂、最流行</li>
</ul>
<h2 id="2-useState-Hook"><a href="#2-useState-Hook" class="headerlink" title="2 useState Hook"></a>2 useState Hook</h2><p>hook 是一个特殊的函数，允许你勾入 react 的特性</p>
<p>useState 记录函数内组件的状态，并且在每次组件更新的时候记录状态值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span> like<span class="token punctuation">,</span> setLike <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre>
<p>定义了 state 的一个属性 like</p>
<p>定义了一个更新 like 属性的方法 setLike</p>
<p>定义了 like 的初始值为 0</p>
<p>函数退出的时候 state 中的变量会保留</p>
<h2 id="3-useEffect-不需要清除的-Effect"><a href="#3-useEffect-不需要清除的-Effect" class="headerlink" title="3 useEffect 不需要清除的 Effect"></a>3 useEffect 不需要清除的 Effect</h2><ul>
<li>无需清除的 Effect<ul>
<li>发送网络请求</li>
<li>手动变更 DOM</li>
<li>记录日志</li>
<li>例子：使用 useEffect 使用 DOM 完成标题更新</li>
</ul>
</li>
</ul>
<h2 id="4-useEffect-需要清除的-Effect"><a href="#4-useEffect-需要清除的-Effect" class="headerlink" title="4 useEffect 需要清除的 Effect"></a>4 useEffect 需要清除的 Effect</h2><ul>
<li>需要清除的Effect<ul>
<li>定时器</li>
<li>DOM 事件监听</li>
<li>例子：鼠标点击记录点击的位置</li>
</ul>
</li>
</ul>
<p>useEffect 的返回值，会在组件卸载和组件更新之前执行</p>
<h2 id="5-useEffect-可控-effect"><a href="#5-useEffect-可控-effect" class="headerlink" title="5 useEffect 可控 effect"></a>5 useEffect 可控 effect</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'useEffect 被调用了'</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`点击了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>like<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>不传第二个参数的时候，useEffect 会在初始化、每次 DOM 更新之后调用</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'useEffect 被调用了'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>第二个参数传个空数组，只在初始化的时候调用一次</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'useEffect 被调用了'</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`点击了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>like<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>like<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>第二个参数传个 state 的数组，只在初始化和对应 state 变化的时候才调用</p>
<h2 id="3-7-自定义-Hook"><a href="#3-7-自定义-Hook" class="headerlink" title="3-7 自定义 Hook"></a>3-7 自定义 Hook</h2><ul>
<li>将组建逻辑提取到可重用的函数中</li>
<li>之前两种方法：render props，一个叫高阶组件</li>
<li>例子使用自定义 Hook 抽象 鼠标跟踪器</li>
</ul>
<p>例子</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">const</span> useMousePosition <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span> position<span class="token punctuation">,</span> setPosition <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> updateMouse <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> updateMouse<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> updateMouse<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> position
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> useMousePosition</code></pre>
<h2 id="6-HOC的概念和缺点"><a href="#6-HOC的概念和缺点" class="headerlink" title="6 HOC的概念和缺点"></a>6 HOC的概念和缺点</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>高阶组件就是一个函数，接受一个组件作为参数，返回一个新的组件，可以添加一些属性</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// high order component</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>

<span class="token keyword">const</span> withLoader <span class="token operator">=</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">LoaderComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        isLoading<span class="token punctuation">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        isLoading<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          data<span class="token punctuation">:</span> result<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
          isLoading<span class="token punctuation">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span><span class="token operator">></span>
          <span class="token punctuation">{</span> <span class="token punctuation">(</span>isLoading <span class="token operator">||</span> <span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>data is loading<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token punctuation">:</span>
            <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> data<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> isLoading<span class="token operator">=</span><span class="token punctuation">{</span>isLoading<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> withLoader</code></pre>
<h2 id="7-Hook-规则和其他-Hook"><a href="#7-Hook-规则和其他-Hook" class="headerlink" title="7 Hook 规则和其他 Hook"></a>7 Hook 规则和其他 Hook</h2><ul>
<li>只在最顶层使用 Hook，不要再循环、条件或者嵌套函数中调用 Hook，Hook 每次在渲染中以同样的顺序被调用</li>
<li>只在 React 函数中使用 Hook，Hook 中可以调用其他 Hook</li>
</ul>
<h3 id="其他-Hooks"><a href="#其他-Hooks" class="headerlink" title="其他 Hooks"></a>其他 Hooks</h3><ul>
<li><p>搜索 Hooks API 索引</p>
</li>
<li><p>useHooks.com 官方推荐的一个网站</p>
</li>
<li><p>useContext 拿到 Provider 和 Consumer</p>
</li>
<li><p>useReducer，甚至可以替代 Redux</p>
</li>
<li><p>useCallback 性能调优，避免每次组件的变量重新创建，多次渲染的时候可以避免反复新建对象</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 Flutter widget</title>
    <url>/2020/07/09/hybrid/%E5%AD%A6%E4%B9%A0%20Flutter%20widget/</url>
    <content><![CDATA[<h1 id="学习-Flutter-widget"><a href="#学习-Flutter-widget" class="headerlink" title="学习 Flutter widget"></a>学习 Flutter widget</h1><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><ul>
<li>textAlign: TextAlign.left</li>
<li>maxLines: 1</li>
<li>overflow: TextOverflow.ellipsis，TextOverflow.fade</li>
<li>style: TextStyle<ul>
<li>fontSize: 25.0</li>
<li>color: Colors.pink，Color.fromARGB(255, 255, 0, 0)</li>
<li>decorationStyle: TextDecorationStyle.solid</li>
</ul>
</li>
</ul>
<h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><ul>
<li>alignment:<ul>
<li>Alignment.center 水平垂直居中</li>
<li>Alignment.bottomCenter 在底部局中</li>
<li>Alignment.bottomCenter 下左对齐</li>
<li>Alignment.centerLeft 垂直居中，水平居左 </li>
<li>…</li>
</ul>
</li>
<li>width</li>
<li>height</li>
<li>color: Colors.black</li>
<li>padding:<ul>
<li>EdgeInsets.all(10.0)</li>
<li>EdgeInsets.fromLTRB(10.0,  30.0, 10.0, 10.0)</li>
</ul>
</li>
<li>margin: 跟 margin 的值一样</li>
<li>decoration: BoxDecoration <ul>
<li>注意，这玩意和 color 不能同时存在</li>
<li>gradient: LinearGradient(colors: [Colors.lightBlue, , Colors.greenAccent, Colors.purple])</li>
<li>border: Border.all(width: 2.0, color: Colors.red)</li>
</ul>
</li>
</ul>
<h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><ul>
<li>asset 资源目录中</li>
<li>file 本地路径</li>
<li>memory 内存图片</li>
<li>network 网络图片</li>
<li>fit: BoxFit<ul>
<li>contain 尽量撑满容器，保持原图的比例和现实完全</li>
<li>fill 容器要被图片填满，不管图片拉伸不拉伸</li>
<li>fitWidth 图片的比例不变，横向是充满的，总想可以裁切</li>
<li>fitHeight 图片比例不变，纵向要充满</li>
<li>cover：充满整个容器，但是图片不变形</li>
<li>scaleDown 保持原图片的大小</li>
</ul>
</li>
<li>图片混合模式<ul>
<li>color: Colors.greenAccent</li>
<li>colorBlendMode:, BlendMode<ul>
<li>darken</li>
<li>lighten</li>
<li>modulate</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>repeat: ImageRepeat<ul>
<li>noRepeat</li>
<li>repeat 以中间为基础，不断重复</li>
<li>repeatX 只横向重复</li>
<li>repeatY 纵向重复</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>混合开发</tag>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 Flutter 布局</title>
    <url>/2020/07/09/hybrid/%E5%AD%A6%E4%B9%A0%20Flutter%20%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h2><ul>
<li>children： <Widget>[]</li>
<li>灵活的布局的时候，children 元素要实现类似 flex 的布局，外边包一层  Expanded。</li>
</ul>
<h2 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h2><ul>
<li>crossAxisAlignment<ul>
<li>CrossAxisAlignment.start</li>
<li>CrossAxisAlignment.end</li>
<li>CrossAxisAlignment.center</li>
</ul>
</li>
<li>mainAxisAlignment<ul>
<li>mainAxisAlignment.center</li>
</ul>
</li>
<li>结合 Expanded 使用</li>
</ul>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><ul>
<li>从左上角开始层叠</li>
<li>两个东西层叠的时候，可以用对齐属性</li>
<li>alignmen <ul>
<li>x 从 0 到 1</li>
<li>y 从 0 到 1</li>
</ul>
</li>
<li>Positioned</li>
</ul>
<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><ul>
<li>scrollDirection Axis<ul>
<li>horizontal 横向列表</li>
<li>vertical 纵向列表</li>
</ul>
</li>
<li>ListView.builder(itemCount: items.length, itemBuilder: (context, index) {return ListTile(title: Text(‘items[]$index]’))})</li>
</ul>
<h3 id="ListTile"><a href="#ListTile" class="headerlink" title="ListTile"></a>ListTile</h3><ul>
<li>leading(icon: Icon(Icons.home), title: Text(‘首页’)))</li>
</ul>
<h2 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h2><ul>
<li>GridView.count<ul>
<li>padding EdgeInsets.all(20.0)</li>
<li>crossAxisSpacing: 10.0,</li>
<li>crossAxisCount: 3,</li>
<li>children: <Widget>[]</li>
</ul>
</li>
</ul>
<h2 id="Card"><a href="#Card" class="headerlink" title="Card"></a>Card</h2><pre><code>Card(
    child: Column(
        children: &lt;Widget&gt;[
            ListTile(
                title: Text(&#39;00001&#39;, textStyle: TextStyle(fontWeight: FontWeight.w500)),
                subtitle: Text(&#39;二级标题&#39;),
                leading: Icon(Icons.account_box, color: Colors.lightBlue)
            ),
            Divider()
            ListTile(
                title: Text(&#39;00001&#39;, textStyle: TextStyle(fontWeight: FontWeight.w500)),
                subtitle: Text(&#39;二级标题&#39;),
                leading: Icon(Icons.account_box, color: Colors.lightBlue)
            )
        ]
  )
)</code></pre>]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>混合开发</tag>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript(1) - 简介</title>
    <url>/2019/08/12/languages/TypeScript(1)%20-%20%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍一下 typescript 的好处，如何使用安装和使用typescript。</p>
</blockquote>
<a id="more"></a>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><h2 id="程序更容易理解"><a href="#程序更容易理解" class="headerlink" title="程序更容易理解"></a>程序更容易理解</h2><ul>
<li>动态语言问题：<ul>
<li>函数或者方法输入输出的参数的类型不明确</li>
<li>缺少类型约束，变量可以随意转换类型，需要不停的调试，查看变量的类型</li>
</ul>
</li>
<li>typescript 代码本身就能解释上述的问题</li>
</ul>
<h2 id="效率更高"><a href="#效率更高" class="headerlink" title="效率更高"></a>效率更高</h2><ul>
<li>在不同的代码块和定制中进行切换</li>
<li>能够与编辑器更好的交互：<ul>
<li>代码自动补全</li>
<li>良好的 IDE 支持，可以提供更好的代码提示</li>
</ul>
</li>
</ul>
<h2 id="更少的错误"><a href="#更少的错误" class="headerlink" title="更少的错误"></a>更少的错误</h2><ul>
<li>编译期间能够发现大部分错误</li>
<li>杜绝一些比较常见的低级 Bug：<ul>
<li>变量名称打错</li>
<li>传入错误类型的参数，例如传入 数字 0</li>
</ul>
</li>
</ul>
<h2 id="非常好的兼容性"><a href="#非常好的兼容性" class="headerlink" title="非常好的兼容性"></a>非常好的兼容性</h2><ul>
<li>完全兼容 javascript</li>
<li>第三方库可以单独编写类型文件</li>
</ul>
<h1 id="缺点或者问题"><a href="#缺点或者问题" class="headerlink" title="缺点或者问题"></a>缺点或者问题</h1><ul>
<li>学习成本有点高</li>
<li>短期内增加了一些开发的成本（长期减少了维护的成本）</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> typescript -g</code></pre>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>写代码<br>编写 hello.ts 文件</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`Hello world, I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'lvjiawen'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>执行一下编译命令，tsc 就是 ts compile 的意思，之后输入 ts 文件的名称，会自动生成相应的 js 文件，例如 hello.ts 会被编译成 hello.js</p>
<pre class=" language-bash"><code class="language-bash">tsc hello.ts
// 编译结束之后
node hello.js</code></pre>
<p>打开 hello.js，文件如下</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> hello <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"Hello world, I am "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'lvjiawen'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>下面的一节会继续介绍 typescript 的基本数据类型</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript(2) - 基本类型和变量声明</title>
    <url>/2019/08/13/languages/TypeScript(2)%20-%20%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍一下 es 的数据类型和 typescript 的各种原始类型及其用法。</p>
</blockquote>
<a id="more"></a>

<p>和 javascript 类似，typescript 的数据类型也可以分为：</p>
<ul>
<li>原始类型、原始值、primitive values<ul>
<li>除 Object 意外所有类型都是</li>
<li>值本身无法改变，就是说，操作原始类型一定会返回一个新的原始类型</li>
<li>ES 6 的基本数据类型<ul>
<li>Boolean</li>
<li>Null</li>
<li>Undefined</li>
<li>Number</li>
<li>Bigint</li>
<li>String</li>
<li>Symbol</li>
</ul>
</li>
</ul>
</li>
<li>Object</li>
</ul>
<h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> isLoading<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span></code></pre>
<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>number 要小写，大写是 interface</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> decLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> decNum<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 十进制</span>
<span class="token keyword">const</span> hexNum<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0x14</span> <span class="token comment" spellcheck="true">// 十六进制</span>
<span class="token keyword">const</span> binaryNum<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b10100</span> <span class="token comment" spellcheck="true">// 二进制</span>
<span class="token keyword">const</span> octalNum<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0o24</span> <span class="token comment" spellcheck="true">// 八进制</span></code></pre>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> book <span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'介绍下 typescript'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> tmplString<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>book<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span></code></pre>
<h2 id="void、null、undefined"><a href="#void、null、undefined" class="headerlink" title="void、null、undefined"></a>void、null、undefined</h2><p>undefined 和 null 是所有类型的子类型，他们可以给任何类型的变量赋值</p>
<pre class=" language-typescript"><code class="language-typescript">
<span class="token keyword">let</span> c <span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span>
<span class="token keyword">let</span> d <span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> undefined
</code></pre>
<h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><ul>
<li>let 和 const 在一对会在一堆 {} 之内会创建一个新的块级作用域</li>
<li>块级作用域不能在声明之前读写，let、const 不行，var 可以</li>
<li>在同一个作用域内，或者作用域内不，let 和 const 不能重复声明同名变量</li>
<li>const 不能修改，但是如果 const 是一个对象，只修改对象的属性是可以的，因为修改成员不修改引用</li>
<li>大部分情况下，应该多使用 const，除非确定一个结构要修改</li>
</ul>
<h2 id="解构和展开"><a href="#解构和展开" class="headerlink" title="解构和展开"></a>解构和展开</h2><p>等同于 ES6 中的解构和展开语法，可以看之前的文章<br>展开的时候，相当于做了一个浅拷贝<br>还有一点需要注意，对象展开的时候前展开和后展开是不一样的</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> originData<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    c<span class="token punctuation">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> new1 <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">...</span>originData<span class="token punctuation">}</span>
<span class="token keyword">const</span> new2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>originData<span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { a: 1, b: 2, c: 3 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { a: 8, b: 2, c: 3 }</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>isInBlock<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isInBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">return</span> x
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> x
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 100</span></code></pre>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>EcmaScript 6 - 8 新特性</title>
    <url>/2019/08/01/languages/ES6%20-%208%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>bind ，每次会返回一个新的函数的引用，想引用同一个函数的时候要注意保留一下引用。</p>
<blockquote>
<p>错误的做法</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PauseMenu</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AppStateIOS<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onAppPaused<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AppStateIOS<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onAppPaused<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">onAppPaused</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>正确的做法</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PauseMenu</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_onAppPaused <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onAppPaused<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AppStateIOS<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onAppPaused<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AppStateIOS<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onAppPaused<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">onAppPaused</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>还可以</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PauseMenu</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AppStateIOS<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onAppPaused
    <span class="token punctuation">}</span>
    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AppStateIOS<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onAppPaused
    <span class="token punctuation">}</span>
    onAppPaused <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><h4 id="获取数组中的值"><a href="#获取数组中的值" class="headerlink" title="获取数组中的值"></a>获取数组中的值</h4><p>从数组中获取值，并赋值到变量中，变量的顺序与数组中对象顺序对应</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">]</span> <span class="token operator">=</span> foo
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> last<span class="token punctuation">]</span> <span class="token operator">=</span> foo
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></code></pre>
<p>如果没有从数组中取到值，可以为变量设置一个默认值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b

<span class="token punctuation">[</span>a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></code></pre>
<p>通过解构赋值还可以方便的交换两个变量的值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></code></pre>
<h4 id="获取对象中的值"><a href="#获取对象中的值" class="headerlink" title="获取对象中的值"></a>获取对象中的值</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'Lvjiawen'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    city<span class="token punctuation">:</span> <span class="token string">'Hangzhou'</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">}</span> <span class="token operator">=</span> student
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">)</span></code></pre>
<h3 id="延展运算符"><a href="#延展运算符" class="headerlink" title="延展运算符"></a>延展运算符</h3><p>延展运算符 … 可以在函数调用或者数组构造时，将数组表达式或者 string 在语法层面展开；还可以在构造对象时，将表达式按 key-value 的方式展开</p>
<blockquote>
<p>函数调用</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> iterableObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'my'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lvjiawe'</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['my', 'name', 'is', 'lvjiawe']</span>
<span class="token punctuation">}</span>
<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token operator">...</span>iterableObj<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z
<span class="token punctuation">}</span>
<span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span></code></pre>
<blockquote>
<p>数组构造或字符串</p>
</blockquote>
<p>没有展开语法的时候，只能组合使用 push，splice，concat 等方法，来将已有数组元素变成新的数组的一部分，有了展开语法，构造新数组变得更简单</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> iterableObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'my'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lvjiawen'</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>iterableObj<span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["my", "name", "is", "lvjiawen", "4", "h", "e", "l", "l", "o", 6]</span>

<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 等同于 var arr3 = arr1.concat(arr2)</span></code></pre>
<blockquote>
<p>构造对象时，进行克隆或者属性拷贝</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span>  <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Lvjiawen'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> like<span class="token punctuation">:</span> <span class="token punctuation">{</span>film<span class="token punctuation">:</span> <span class="token string">'one world'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>hello<span class="token punctuation">:</span> <span class="token string">'world'</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> objClone <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span>
<span class="token keyword">var</span> objMerge <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>obj2<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'changed'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'changed'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>like <span class="token operator">=</span> <span class="token string">'changed'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> objClone<span class="token punctuation">,</span> objMerge<span class="token punctuation">)</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 相当于 arr.slice()</span>
arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// [1, 2, 3] ,  [1, 2, 3, 4]</span></code></pre>
<blockquote>
<p>React 中的应用</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>param1<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span> param2<span class="token punctuation">:</span> <span class="token number">456</span><span class="token punctuation">,</span> param3<span class="token punctuation">:</span> <span class="token number">789</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token punctuation">{</span>type<span class="token punctuation">,</span> <span class="token operator">...</span>other<span class="token punctuation">}</span> <span class="token operator">=</span> params
<span class="token operator">&lt;</span>Comp type<span class="token operator">=</span><span class="token string">'normal'</span> <span class="token punctuation">{</span><span class="token operator">...</span>other<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Comp<span class="token operator">></span> <span class="token comment" spellcheck="true">// 相当于&lt;Comp type='normal' param2={456} param3={789}>&lt;/Comp></span></code></pre>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> waitSecond <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
waitSecond<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1 second passed'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>
<span class="token punctuation">{</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span></code></pre>
<h3 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h3><h4 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h4><p>返回 true 或者 false</p>
<pre class=" language-javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等价于 arr.indexOf(0) >=0</span></code></pre>
<h4 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h4><p>在 ES7中引入了 指数运算符 **，** 具有与 Math.pow() 一样的计算结果</p>
<h3 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h3><h4 id="async-await"><a href="#async-await" class="headerlink" title="async / await"></a>async / await</h4><p>不使用 async await</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">===</span> <span class="token string">'1001'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'登陆成功'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">doLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">login</span><span class="token punctuation">(</span><span class="token string">'lvjiawen'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>getData<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>登录失败<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">doLogin2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> userId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token string">'lvjiawen'</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">doLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">doLogin2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>获取异步函数的返回值</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">charCount</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">charCountAdd</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> d1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">charCount</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d1 is wrong'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> d2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">charCount</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d2 is wrong'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> d1 <span class="token operator">+</span> d2
<span class="token punctuation">}</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">charCountAdd</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'报错'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>async / await 在并发场景中的应用</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">charCount</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">charCountAdd</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">charCount</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">charCount</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> d1 <span class="token operator">+</span> d2
<span class="token punctuation">}</span>

<span class="token function">charCountAdd</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'报错'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h4 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h4><p>与 Ojbect.keys() 类似，返回自身属性的所有值，不包括继承的值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["a", "b", "c"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 2, 3]</span></code></pre>
<h4 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h4><h4 id="String-padding"><a href="#String-padding" class="headerlink" title="String padding"></a>String padding</h4><h4 id="函数参数列表结尾允许逗号"><a href="#函数参数列表结尾允许逗号" class="headerlink" title="函数参数列表结尾允许逗号"></a>函数参数列表结尾允许逗号</h4><h4 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h4>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript(5) - 函数</title>
    <url>/2019/08/28/languages/TypeScript(5)%20-%20%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍 typeScript 中的函数的写法</p>
</blockquote>
<a id="more"></a>
<p>函数声明的写法:<br>ts 的函数定义了两个必传参数的话，调用的时候也必须传递两个参数，不能多，也不能少。<br>函数传递可选参数的时候，用 <code>?</code> 的可选参数，调用函数的时候可以不传，可选参数必须接在必需参数后面。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span>number<span class="token punctuation">,</span> z<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>number <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> z <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// let result3 =add(2, 3, 4, 5); // error</span>
<span class="token comment" spellcheck="true">// let result4 = add(2, 'a'); // error</span></code></pre>
<p>声明类型，声明函数会自动推 add 是函数的类型。<br>若果要输血函数的类型的话,用=&gt; 来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span> z<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> z <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// let result3 =add(2, 3, 4, 5); // error</span>
<span class="token comment" spellcheck="true">// let result4 = add(2, 'a'); // error</span>

<span class="token comment" spellcheck="true">// const add2:string = add // error</span>
<span class="token keyword">const</span> add3<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span> z<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span> <span class="token operator">=</span> add</code></pre>
<p>类型推断不只适用于函数类型，其他类型也适用，下面的这段代码，会自动推断 str 为 string 类型，再将其赋值为一个 number 的时候就报错了</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'string'</span>
<span class="token comment" spellcheck="true">// str = 123 // error</span></code></pre>
<p>还可以使用方法定义函数的类型</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">addFunc</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span> z<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> add <span class="token punctuation">:</span> addFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span> z<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> z <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript(4) - 集合类型</title>
    <url>/2019/08/20/languages/TypeScript(4)%20-%20%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍 typeScript 中的几种集合类型 Tuple、List、Set、Enum</p>
</blockquote>
<a id="more"></a>

<p>从此开始介绍原始类型之外的其他数据类型，首先介绍几种 typescript 中常见的集合。</p>
<h1 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 - Array"></a>数组 - Array</h1><p>数组可以通过两种方式定义：</p>
<ol>
<li>数组可以用「类型 + 方括号」表示法</li>
<li>也可以使用数组泛型（Generic） Array<elemType> 来表示数组</li>
<li>标示了类型之后，数组中不允许出现其它类型</li>
</ol>
<pre class=" language-typescript"><code class="language-typescript">
<span class="token keyword">let</span> arrOfNums<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">// let arrOfNums: Array&lt;number> = [1, 2, 3] // 同样效果</span>

<span class="token comment" spellcheck="true">// arrOfNums = [1, 2, 3, '5'] // error</span>
arrOfNums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// arrOfNums.push('a') // error</span></code></pre>
<p>类数组</p>
<ul>
<li>dom node 是 Array<Node></li>
<li>function de arguments 是 Array<IArguments></li>
</ul>
<h1 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 - Tuple"></a>元组 - Tuple</h1><p>元组，英文叫 tuple,就是一个已知数据类型和个数的数组。他与数组的区别是数组通常存放同种数据，元组可以存放不同类型的数据。</p>
<p>元组类型不能访问越界元素。</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> user<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lvjiawen'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">// user = ['lvjiawen', 20, true] // error</span>
<span class="token comment" spellcheck="true">// let user: [string, number] = [20, 'lvjiawen'] // error</span></code></pre>
<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>set 主要是 es6 的一种新的数据结构，Set 可以简单理解为是去重之后的数组</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 去重</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2]</span>

<span class="token comment" spellcheck="true">// 判断元素是否在集合中</span>
<span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> has1 <span class="token operator">=</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> has3 <span class="token operator">=</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>has1<span class="token punctuation">,</span> has3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true false</span>


<span class="token comment" spellcheck="true">// 求交集</span>
<span class="token keyword">const</span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> set3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">set</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> set2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set3<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre>
<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><h2 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up<span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Up</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Left</span></code></pre>
<p>手动给一个枚举赋值</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Up</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Left</span></code></pre>
<p>编译出来的代码是这样的，首先 执行 <code>Direction[&quot;Up&quot;] = 10</code>，那么Direction[“Up”] 的值变成10了，同时返回了一个 10，作为这个表达式的结果，则 <code>Direction[Direction[&quot;Up&quot;] = 10] = &quot;Up&quot;;</code> 就变成了 <code>Direction[10] = &quot;Up&quot;;</code></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Direction<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>Direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Direction<span class="token punctuation">[</span>Direction<span class="token punctuation">[</span><span class="token string">"Up"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Up"</span><span class="token punctuation">;</span>
    Direction<span class="token punctuation">[</span>Direction<span class="token punctuation">[</span><span class="token string">"Down"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Down"</span><span class="token punctuation">;</span>
    Direction<span class="token punctuation">[</span>Direction<span class="token punctuation">[</span><span class="token string">"Left"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Left"</span><span class="token punctuation">;</span>
    Direction<span class="token punctuation">[</span>Direction<span class="token punctuation">[</span><span class="token string">"Right"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Right"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Direction <span class="token operator">||</span> <span class="token punctuation">(</span>Direction <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token string">'UP'</span><span class="token punctuation">,</span>
  Down <span class="token operator">=</span> <span class="token string">'DOWN'</span><span class="token punctuation">,</span>
  Left <span class="token operator">=</span> <span class="token string">'LEFT'</span><span class="token punctuation">,</span>
  Right <span class="token operator">=</span> <span class="token string">'RIGHT'</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">'UP'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">===</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span></code></pre>
<h2 id="常量枚举"><a href="#常量枚举" class="headerlink" title="常量枚举"></a>常量枚举</h2><p>可以提升性能，只要加一个 const 就可以了</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token string">'UP'</span><span class="token punctuation">,</span>
  Down <span class="token operator">=</span> <span class="token string">'DOWN'</span><span class="token punctuation">,</span>
  Left <span class="token operator">=</span> <span class="token string">'LEFT'</span><span class="token punctuation">,</span>
  Right <span class="token operator">=</span> <span class="token string">'RIGHT'</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">'UP'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">===</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span></code></pre>
<p>会被编译成下面这样</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">'UP'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">"UP"</span> <span class="token comment" spellcheck="true">/* Up */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>注意，这个方式只能简化枚举的常量值，不能简化计算值类型的枚举</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript(6) - 类</title>
    <url>/2019/09/23/languages/TypeScript(6)%20-%20%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍 typeScript 中的 Class</p>
</blockquote>
<a id="more"></a>
<p>之前 javascript 中实现面向对象，需要使用构造函数和原型链。ES6提供了新的 class 语法支持，虽然底层实现还是原型，但是有了 class 可以更方便用与其他语言相似的思维来思考代码。</p>
<p>类：定义了一切事物的 抽象 特点，其中包含属性和方法，就像冯诺伊曼体系结构。<br>实例：用 new 构造出来的实例， MacbookPro 2018 late 可以看作是一个实例<br>面向对象：抽象、封装、继承、多态</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is running`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'shimei'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>简单的继承一下，然后增加一个 bark 方法</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is running`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>



<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is barking`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'shimei'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'xiaohei'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>继承的同时，如果需要重写父类的方法</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is running`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>



<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is barking`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  run <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'Cat '</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'shimei'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'xiaohei'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cat2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'shimei2'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>访问修饰符：</p>
<ul>
<li>public 所有地方都可以访问，默认就是 public 的，比如 name，外界可以通过 <code>xxx.name</code> 的方式来修改属性</li>
<li>private，实例对象不能访问，其子类也不能访问</li>
<li>protected，实例对象不能访问，子类可以访问<ul>
<li>readonly 实例对象不能访问，子类可以读，不能重新赋值</li>
</ul>
</li>
</ul>
<p>静态属性，静态方法，属于类的属性和方法，跟实例没什么关系</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>

  <span class="token keyword">static</span> categories<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mammal'</span><span class="token punctuation">,</span> <span class="token string">'bird'</span><span class="token punctuation">]</span>

  <span class="token keyword">static</span> <span class="token function">isAnimal</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> instance <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is running`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript(3) - any 和联合类型</title>
    <url>/2019/08/14/languages/TypeScript(3)%20-%20any%20%E5%92%8C%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍类型不确定的时候，两种解决方案：any 和 联合类型</p>
</blockquote>
<a id="more"></a>

<p>如果我们不知道变量的类型的时候我们怎么办呢?typescript 有两种解决方案：any 和 联合类型，瞎main分别介绍他们：</p>
<h1 id="any"><a href="#any" class="headerlink" title="any"></a>any</h1><p>对于无法确定类型的变量，我们需要 any 类型，他表示允许赋值为任意类型，而且可以任意的调用属性和方法，基本上退化为 javascript，丧失了类型检查的功能。</p>
<p>对 any 类型的任何操作，返回的也还都是 any</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span>

notSure <span class="token operator">=</span> <span class="token string">'now I am a string'</span> <span class="token comment" spellcheck="true">// OK</span>

notSure <span class="token operator">=</span> <span class="token keyword">false</span> <span class="token comment" spellcheck="true">// OK</span>

notSure<span class="token punctuation">.</span>myName <span class="token comment" spellcheck="true">// OK</span>
notSure<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// OK</span></code></pre>
<h1 id="never"><a href="#never" class="headerlink" title="never"></a>never</h1><p>还有 never 也是任何值的子类型，一般用于处理异常或者无限循环。</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'something failed'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h1 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h1><p>还有一种联合类型，可以将变量设置为特定几种中的一种，例如 <code>let myFavoriteNumber: string | number;</code>，语法是在多种类型中间加一个 ｜，<strong>注意，这样的定义只能访问到它们共有的类型和方法。</strong></p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> numberOrString<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token number">234</span> <span class="token comment" spellcheck="true">// OK</span>
numberOrString <span class="token operator">=</span> <span class="token string">'abc'</span> <span class="token comment" spellcheck="true">// OK</span>
numberOrString <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token comment" spellcheck="true">// error</span></code></pre>
<h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><p>如果需要强制转换类型的话，可以使用下边的语法；</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someString<span class="token punctuation">:</span> <span class="token keyword">any</span>
someString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> someLength1<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someString<span class="token punctuation">)</span><span class="token punctuation">.</span>length
<span class="token keyword">let</span> someLength2<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someString as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</code></pre>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript(9) - 其他</title>
    <url>/2019/08/25/languages/TypeScript(9)%20-%20%E5%85%B6%E4%BB%96/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍 typeScript 中的其他知识，包括类型别名、</p>
</blockquote>
<a id="more"></a>
<h1 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h1><p>type aliases</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> sum2<span class="token punctuation">:</span> <span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span>  <span class="token operator">=</span> sum<span class="token punctuation">;</span></code></pre>
<p>这样写起来很麻烦，可以使用 类型别名简化</p>
<pre class=" language-typescript"><code class="language-typescript">type plusType <span class="token operator">=</span>  <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> sum2<span class="token punctuation">:</span> plusType <span class="token operator">=</span> sum<span class="token punctuation">;</span></code></pre>
<p>下面设想一个场景，如果入參是字符串，返回字符串；如果入參是函数，则返回函数的执行结果</p>
<pre class=" language-typescript"><code class="language-typescript">type NameResolver <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span>
type NameOrResolver <span class="token operator">=</span> <span class="token keyword">string</span> <span class="token operator">|</span> NameResolver
<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> NameOrResolver<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h1><p>与类型推断对应，当typescript不确定一个联合类型的变量是哪个类型的时候，我们只能访问所有联合类型里边公用的属性或者方法。<br>如果，我们需要在还不确定类型的时候，就访问类型的属性和方法。此时类型断言登场，它告诉编译器，你比他更了解这个类型，编译器不要再发出错误了。</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> str <span class="token operator">=</span> input as String<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">number</span> <span class="token operator">=</span> input as Number<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">number</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>还有一种简便的写法：</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>input<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>input<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>类型断言不是类型转换，断言成一个非联合类型的类型是回报的。</p>
<h1 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h1><p>当使用第三方库的时候，需要引入它的声明文件，才能获得对应的代码补全，接口提示等等功能。</p>
<p>以 jqeury 为例</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">var</span> jQuery<span class="token punctuation">:</span> <span class="token punctuation">(</span>selector<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span></code></pre>
<p>这样我们就可以使用 <code>jQuery</code> 了，通常我们会把所有的这些内容放到一个文件中，比如叫 <code>jQuery.d.ts</code>，我们叫他声明文件，以 .d.ts 结尾，typescript 会解析项目中的所有声明文件，然后项目中所有的文件就都可以获取 jQuery 这个定义了</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">var</span> jQuery<span class="token punctuation">:</span> <span class="token punctuation">(</span>selector<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span></code></pre>
<p>如果不行，配置 tsconfig.json</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"**/*"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<p>通常社区或者官方会为我们写好声明文件，例如 @types/jquery 这个 npm 包，就不用自己写声明文件了，一般的常见库都有，可以在网站 microsoft.github.io/TypeSearch 查找</p>
<p>如果一个库，没有提供声明文件，我们就需要自己书写声明文件</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript(7) - 接口 Interface</title>
    <url>/2019/08/25/languages/TypeScript(7)%20-%20Interface/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍 typeScript 中的接口</p>
</blockquote>
<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>接口，英文 Interface</li>
<li>有两个作用：<ul>
<li>对对象的形状 shape 进行描述，规范和契约，规定一个类长成什么样子</li>
<li>对 类 class 进行抽象</li>
<li>Duck Typing 鸭子类型，动态编程语言的一种对象推断策略，只要它走路像鸭子，叫起来像鸭子，那么他就是个鸭子</li>
</ul>
</li>
</ul>
<h1 id="描述对象的形状"><a href="#描述对象的形状" class="headerlink" title="描述对象的形状"></a>描述对象的形状</h1><p>对象要和接口保持形状一致，属性不能多也不能少，而且属性的类型要鱼接口已知。</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token keyword">string</span>
  age<span class="token punctuation">:</span> <span class="token keyword">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> lvjiawen<span class="token punctuation">:</span> Person  <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">'lvjiawen'</span><span class="token punctuation">,</span>
  age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// let lvjiawen: Person  = {</span>
<span class="token comment" spellcheck="true">//   name: 'lvjiawen',</span>
<span class="token comment" spellcheck="true">// } // error 不能少</span>

<span class="token comment" spellcheck="true">// let lvjiawen: Person  = {</span>
<span class="token comment" spellcheck="true">//   name: 'lvjiawen',</span>
<span class="token comment" spellcheck="true">//   age: 20,</span>
<span class="token comment" spellcheck="true">//   gender: 'man'</span>
<span class="token comment" spellcheck="true">// } // error 不能多</span>
</code></pre>
<p>接口还可以对属性的类型进行更灵活的配置</p>
<h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><p>可有可无的属性，在定义接口时，可以在属性名后边加一个 <code>?</code>，表示这个属性可以不定义，但是要是定义的话，类型依然需要与接口中的类型保持一致。</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>
    color<span class="token punctuation">:</span> <span class="token keyword">string</span>
    area<span class="token punctuation">:</span> <span class="token keyword">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>
    color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span>
    width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span> SquareConfig<span class="token punctuation">)</span> <span class="token punctuation">:</span> Square <span class="token punctuation">{</span>
    <span class="token keyword">let</span> newSquare <span class="token operator">=</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span> area<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newSquare<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span>color
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newSquare<span class="token punctuation">.</span>area <span class="token operator">=</span> config<span class="token punctuation">.</span>width <span class="token operator">*</span> config<span class="token punctuation">.</span>width
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newSquare
<span class="token punctuation">}</span>

<span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 readonly 定义只读属性：</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    readonly x<span class="token punctuation">:</span> <span class="token keyword">number</span>
    readonly y<span class="token punctuation">:</span> <span class="token keyword">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> p1<span class="token punctuation">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// p1.x = 50 // error，Attempt to assign to const or readonly variable </span></code></pre>
<p>readonly 与 const 的区别</p>
<ul>
<li>readonly 用在 属性上</li>
<li>const 用在变量上</li>
</ul>
<h1 id="对类的行为进行抽象"><a href="#对类的行为进行抽象" class="headerlink" title="对类的行为进行抽象"></a>对类的行为进行抽象</h1><p>在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implements）。</p>
<p>typescript 中的接口并不像 java 一样，需要一个类去实现。typescript 的接口只检查外形，外形符合就可以了。</p>
<p>typescript 中一个类只能继承一个类</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Radio</span> <span class="token punctuation">{</span>
  <span class="token function">switchRadio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Battery</span> <span class="token punctuation">{</span>
  <span class="token function">checkBatteryStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Radio</span>  <span class="token punctuation">{</span>
  <span class="token function">switchRadio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CellPhone</span> <span class="token keyword">implements</span> <span class="token class-name">Radio</span><span class="token punctuation">,</span> Battery <span class="token punctuation">{</span>
  <span class="token function">switchRadio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">checkBatteryStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 奇淫巧技</title>
    <url>/2020/06/02/languages/javascript%20%E5%A5%87%E6%B7%AB%E5%B7%A7%E6%8A%80/</url>
    <content><![CDATA[<p>想要从 arr 得到 arr2 的两种方法</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">"内容"</span><span class="token punctuation">,</span><span class="token string">"内容2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">"内容"</span><span class="token punctuation">,</span><span class="token string">"内容2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token string">"内容"</span><span class="token punctuation">,</span><span class="token string">"内容2"</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2<span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cur <span class="token operator">=</span><span class="token operator">></span> cur<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>js 对象如何优雅的去一个深度的值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    school<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      class1<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        student<span class="token punctuation">:</span> <span class="token number">50</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 土法</span>
<span class="token keyword">let</span> student <span class="token operator">=</span> obj<span class="token operator">?</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>school<span class="token operator">?</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>school<span class="token punctuation">.</span>class1<span class="token operator">?</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>school<span class="token punctuation">.</span>class1<span class="token punctuation">.</span>studnet<span class="token operator">?</span>obj<span class="token punctuation">.</span>school<span class="token punctuation">.</span>class1<span class="token punctuation">.</span>studnet<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 高级一</span>
<span class="token keyword">function</span> <span class="token function">getter</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> exec <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> n <span class="token operator">===</span> exec <span class="token operator">?</span>
        target <span class="token punctuation">:</span>
        <span class="token function">getter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">?</span> target <span class="token punctuation">:</span> target<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> exec<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getter</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>school<span class="token punctuation">.</span>class1<span class="token punctuation">.</span>student<span class="token punctuation">.</span>_<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//50</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getter</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>school1<span class="token punctuation">.</span>class11<span class="token punctuation">.</span>student<span class="token punctuation">.</span>_<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>

<span class="token comment" spellcheck="true">// 高级二</span>
<span class="token keyword">function</span> <span class="token function">safeProps</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> defaultVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> defaultVal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">safeProps</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    student <span class="token operator">=</span> obj<span class="token punctuation">.</span>school<span class="token punctuation">.</span>class1<span class="token punctuation">.</span>student
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre>
<p>判断类型</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Array"</span><span class="token punctuation">,</span> <span class="token string">"Boolean"</span><span class="token punctuation">,</span> <span class="token string">"Date"</span><span class="token punctuation">,</span> <span class="token string">"Number"</span><span class="token punctuation">,</span> <span class="token string">"Object"</span><span class="token punctuation">,</span> <span class="token string">"RegExp"</span><span class="token punctuation">,</span> <span class="token string">"String"</span><span class="token punctuation">,</span> <span class="token string">"Window"</span><span class="token punctuation">,</span> <span class="token string">"HTMLDocument"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">isType</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"[object "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"[object "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span></code></pre>
<h2 id="window-onload-和-document-ready"><a href="#window-onload-和-document-ready" class="headerlink" title="window.onload 和 $(document).ready()"></a>window.onload 和 $(document).ready()</h2><table>
<thead>
<tr>
<th><code>window.onload</code></th>
<th><code>$(document).ready()</code></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>执行时间</td>
<td>必须等待网页中所有的内容加载完毕（）包括图片才执行</td>
<td>只需要 DOM 加载完就执行（不包括图片等）</td>
<td></td>
</tr>
<tr>
<td>编写个数</td>
<td>不能同时编写多个</td>
<td>能同时编写多个</td>
<td></td>
</tr>
<tr>
<td>简化写法</td>
<td>无</td>
<td>$(document).ready(function(){}) 可以简写成 $(function(){})</td>
<td></td>
</tr>
</tbody></table>
<h2 id="精确获取页面元素位置的方式有哪些"><a href="#精确获取页面元素位置的方式有哪些" class="headerlink" title="精确获取页面元素位置的方式有哪些"></a>精确获取页面元素位置的方式有哪些</h2><p>那就是使用getBoundingClientRect()方法。它返回一个对象，其中包含了left、right、top、bottom四个属性，分别对应了该元素的左上角和右下角相对于浏览器窗口（viewport）左上角的距离。</p>
<pre><code>var X= this.getBoundingClientRect().left;
var Y =this.getBoundingClientRect().top;
//再加上滚动距离，就可以得到绝对位置
var X= this.getBoundingClientRect().left + document.documentElement.scrollLeft;
var Y =this.getBoundingClientRect().top + document.documentElement.scrollTop;</code></pre>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript this</title>
    <url>/2020/07/09/languages/javascript%20this/</url>
    <content><![CDATA[<p>读《你不知道的 JS 》 第二章记录的笔记</p>
<h1 id="javascript-this"><a href="#javascript-this" class="headerlink" title="javascript this"></a>javascript this</h1><p>this 函数可以自动引用合适的上下文对象很重要</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token string">"Hello, I'm "</span> <span class="token operator">+</span> identify<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token punctuation">{</span>
 name<span class="token punctuation">:</span> <span class="token string">"Kyle"</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> you <span class="token operator">=</span> <span class="token punctuation">{</span>
 name<span class="token punctuation">:</span> <span class="token string">"Reader"</span>
<span class="token punctuation">}</span>

identify<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span>
identify<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>you<span class="token punctuation">)</span>

speak<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span>
speak<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>you<span class="token punctuation">)</span></code></pre>
<p>不使用 this</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">identify</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> context<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token string">"Hello, I'm "</span> <span class="token operator">+</span> <span class="token function">identify</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token punctuation">{</span>
 name<span class="token punctuation">:</span> <span class="token string">"Kyle"</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> you <span class="token operator">=</span> <span class="token punctuation">{</span>
 name<span class="token punctuation">:</span> <span class="token string">"Reader"</span>
<span class="token punctuation">}</span>

identify<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span>
identify<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>you<span class="token punctuation">)</span></code></pre>
<h2 id="误解"><a href="#误解" class="headerlink" title="误解"></a>误解</h2><h3 id="解释两个常见的对-this-的误解"><a href="#解释两个常见的对-this-的误解" class="headerlink" title="解释两个常见的对 this 的误解"></a>解释两个常见的对 this 的误解</h3><h4 id="指向自身"><a href="#指向自身" class="headerlink" title="指向自身"></a>指向自身</h4><p>解释一个误解，this 并不是指向函数本身</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo: '</span> <span class="token operator">+</span> num<span class="token punctuation">)</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this.count: '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo.count: '</span><span class="token operator">+</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token comment" spellcheck="true">// 错误</span>
    foo<span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token comment" spellcheck="true">// 正确</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token string">"global count"</span>
foo<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">var</span> i
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">foo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 错误</span>
        foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 正确</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">)</span></code></pre>
<p>一个具名的函数，在它内部可以使用函数名来引用自身。</p>
<h4 id="指向它的作用域"><a href="#指向它的作用域" class="headerlink" title="指向它的作用域"></a>指向它的作用域</h4><p>第二种常见的误解是，this 指向函数的作用域。<br>需要明确的是，this在任何情况下都不指向函数的词法作用域。在JavaScript内部，作用域确实和对象类似，可见的标识符都是它的属性。但是作用域“对象”无法通过JavaScript代码访问，它存在于JavaScript引擎内部。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'in foo'</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span>  a <span class="token operator">=</span> <span class="token string">'global'</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>不可能通过 this 来引用一个词法作用域内部的东西。每当你想要把this和词法作用域的查找混合使用时，一定要提醒自己，这是无法实现的。</p>
<h3 id="this-到底是什么"><a href="#this-到底是什么" class="headerlink" title="this 到底是什么"></a>this 到底是什么</h3><p><strong>this 是在运行时进行绑定的。并不是在编写时绑定的，他的上下文取决于函数调用时的各种条件。this 的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</strong></p>
<p>当一个函数被调用的时候，会创建一个活动记录（有时候也称为执行上下文）。这个记录包含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this 就是记录的其中一个属性，会在函数的执行过程中用到<br>学习this的第一步是明白this既不指向函数自身也不指向函数的词法作用域，你也许被这样的解释误导过，但其实它们都是错误的。this实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</p>
<h2 id="this-全面解析"><a href="#this-全面解析" class="headerlink" title="this 全面解析"></a>this 全面解析</h2><h3 id="调用位置"><a href="#调用位置" class="headerlink" title="调用位置"></a>调用位置</h3><p>最重要的是要分析调用栈（就是为了到达当前执行位置所调用的所有函数）。我们关心的调用位置就在当前正在执行的函数的前一个调用中。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 当前调用栈是：baz</span>
    <span class="token comment" spellcheck="true">// 因此，当前调用位置是全局作用域</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"baz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// &lt;-- bar 的调用位置</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 当前调用栈是baz-->bar</span>
    <span class="token comment" spellcheck="true">// 因此，当前调用位置在baz中</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;--foo的调用位置</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 当前调用栈是 baz --> bar --> foo</span>
    <span class="token comment" spellcheck="true">// 因此，当前调用位置在bar中</span>
    <span class="token keyword">debugger</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// &lt;-- baz的调用位置</span></code></pre>
<h3 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h3><h4 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h4><p>独立函数调用，this 指向全局对象。也是不满足其他条件时的默认规则。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre>
<h4 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h4><p>另一条需要考虑的规则是调用位置是否有上下文对象，或者说是否被某个对象拥有或这包含。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> foo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'global'</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token string">'in obj'</span><span class="token punctuation">,</span>
    foo<span class="token punctuation">:</span> foo
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// in obj</span></code></pre>
<p>对象属性引用链中只有最顶层或者说最后一层会影响调用位置。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> foo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'global'</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token string">'in obj1'</span><span class="token punctuation">,</span>
    foo<span class="token punctuation">:</span> foo
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token string">'in obj2'</span><span class="token punctuation">,</span>
    obj1<span class="token punctuation">:</span> obj1
<span class="token punctuation">}</span>

obj2<span class="token punctuation">.</span>obj1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// in obj1</span></code></pre>
<h4 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h4><p>一个最常见的this绑定问题就是被隐式绑定的函数会丢失绑定对象，也就是说它会应用默认绑定，从而把this绑定到全局对象或者undefined上，取决于是否是严格模式。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token string">'in obj'</span><span class="token punctuation">,</span>
    foo<span class="token punctuation">:</span> foo
<span class="token punctuation">}</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo <span class="token comment" spellcheck="true">// 函数别名</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"in global"</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// in global</span></code></pre>
<p>参数传递其实就是一种隐式赋值，因此我们传入函数时也会被隐式赋值，所以结果和上一个例子一样。</p>
<p>如果把函数传入语言内置的函数而不是传入你自己声明的函数，会发生什么呢？结果是一样的，没有区别：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token string">'in obj'</span><span class="token punctuation">,</span>
    foo<span class="token punctuation">:</span> foo
<span class="token punctuation">}</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo <span class="token comment" spellcheck="true">// 函数别名</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"in global"</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// in global</span></code></pre>
<p>JavaScript环境中内置的setTimeout()函数实现和下面的伪代码类似：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 等待 delay 毫秒</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- 调用位置</span>
<span class="token punctuation">}</span></code></pre>
<p>就像我们看到的那样，回调函数丢失this绑定是非常常见的。除此之外，还有一种情况this的行为会出乎我们意料：调用回调函数的函数可能会修改this。在一些流行的JavaScript库中事件处理器常会把回调函数的this强制绑定到触发事件的DOM元素上。这在一些情况下可能很有用，但是有时它可能会让你感到非常郁闷。遗憾的是，这些工具通常无法选择是否启用这个行为。</p>
<p>实际上你无法控制回调函数的执行方式，因此就没有办法控制会影响绑定的调用位置。之后我们会介绍如何通过固定this来修复（这里是双关，“修复”和“固定”的英语单词都是fixing）这个问题。</p>
<h4 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h4><p>就像我们刚才看到的那样，在分析隐式绑定时，我们必须在一个对象内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把this间接（隐式）绑定到这个对象上。</p>
<p>那么如果我们不想在对象内部包含函数引用，而想在某个对象上强制调用函数，该怎么做呢？</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token string">'in obj'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"in global"</span>
foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h5 id="硬绑定"><a href="#硬绑定" class="headerlink" title="硬绑定"></a>硬绑定</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token string">'in obj'</span><span class="token punctuation">,</span>
    foo<span class="token punctuation">:</span> foo
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"in global"</span>
<span class="token keyword">var</span> baz <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo
<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
bar<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>javascript</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript(8) - 泛型</title>
    <url>/2019/08/25/languages/TypeScript(8)%20-%20%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍 typeScript 中的泛型的用法</p>
</blockquote>
<a id="more"></a>
<p>泛型的英文叫 Generics，泛型的出现解决了什么问题</p>
<h1 id="为什么需要泛型"><a href="#为什么需要泛型" class="headerlink" title="为什么需要泛型"></a>为什么需要泛型</h1><p>下面我们来看一个需求演化过程：</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></code></pre>
<p>上面的代码的问题，result 的类型就变成了 any，为了解决这个问题，给函数声明加变量类型</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></code></pre>
<p>此时 result 就变成了 number，但是此时我需要拓展，arg 可以传 string、boolean、对象，各种类型，之前的知识，我们解决的办法是：</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></code></pre>
<p>但是返回的 result 又变成了 any。<br>此时引入一个新的概念<strong>泛型</strong>，泛型是指在定义函数、接口、类的时候，我们不预先指定具体的类型，而是在使用的时候再指定类型。</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> echo<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// result = 4 // error</span>
<span class="token comment" spellcheck="true">// const result: number = echo('str') // error</span></code></pre>
<p>多个类型的泛型</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token number">1233</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span>
result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span></code></pre>
<p>这样就丧失了类型，改进办法还是使用 typescript</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> swap<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span><span class="token punctuation">(</span>tuple<span class="token punctuation">:</span> <span class="token punctuation">[</span>T<span class="token punctuation">,</span> U<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>U<span class="token punctuation">,</span> T<span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token number">1233</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// result[0] = 'hello' // error</span></code></pre>
<h1 id="约束泛型"><a href="#约束泛型" class="headerlink" title="约束泛型"></a>约束泛型</h1><p>是泛型只接受允许 length 属性的变量，初级，只允许数组</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> echoWithArr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg <span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arrs <span class="token operator">=</span> <span class="token function">echoWithArr</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>这个方式不能传入 string，string 也是具有 length 的</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">IWithLength</span> <span class="token punctuation">{</span>
  length<span class="token punctuation">:</span> <span class="token keyword">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> echoWithLength<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">IWithLength</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">:</span> T <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arrs2 <span class="token operator">=</span> <span class="token function">echoWithLength</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> arrs3 <span class="token operator">=</span> <span class="token function">echoWithLength</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span></code></pre>
<h1 id="类和接口的泛型"><a href="#类和接口的泛型" class="headerlink" title="类和接口的泛型"></a>类和接口的泛型</h1><p>问题：新建队列类，实现两个方法，进入队列，弹出队列</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这个队列可以添加任意类型的数据，弹出的也是 any 类型的数据，编译，无法捕捉到错误，运行时会报错。<br>改进一：假设只能入队出队数字</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这样做的问题：想要写一个字符串的队列的时候，又要重新写一个类</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// queue.push('str'); // error</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> queue2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// queue.push('str'); // error</span>
<span class="token comment" spellcheck="true">// console.log(queue2.pop().toFixed()); // error</span></code></pre>
<p>多个类型的时候咋么办呢</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">KeyPair</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token punctuation">{</span>
  key<span class="token punctuation">:</span> T<span class="token punctuation">;</span>
  value<span class="token punctuation">:</span> U
<span class="token punctuation">}</span>

<span class="token keyword">let</span> kp1<span class="token punctuation">:</span> KeyPair<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> kp2<span class="token punctuation">:</span> KeyPair<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// error</span></code></pre>
<p>Array 是个 interface，在使用泛型，所以可以这样定义数组</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> arr<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre>
<p>用 interface 描述函数的类型</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">IPlus</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">number</span>
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a<span class="token punctuation">:</span> IPlus <span class="token operator">=</span> add</code></pre>
<p>再进一步，函数支持泛型</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">IPlus</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">,</span> b<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">:</span> T
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a<span class="token punctuation">:</span> IPlus<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> add
<span class="token keyword">const</span> b<span class="token punctuation">:</span> IPlus<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">=</span> connect</code></pre>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js CommonJS 模块</title>
    <url>/2020/06/02/node/Node.js%20CommonJS%20%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="Node-模块"><a href="#Node-模块" class="headerlink" title="Node 模块"></a>Node 模块</h1><ol>
<li>Node.js 一个请求中有死循环，处理不完，线程就被阻塞了，后面的请求都得不到响应。</li>
<li>只有异步和请求才会被放到线程池中。</li>
<li>Node.js 开发一定要注意<ol>
<li>死循环</li>
<li>循环依赖</li>
</ol>
</li>
<li>严谨不严谨是写代码的时候有没有考虑可能报错。</li>
<li>Common.js 标准，包括<ol>
<li>一个文件一个模块</li>
</ol>
</li>
<li>在 node 中文件是直接读取出来的，不用下面的老结构，去掉 define 就是 Common.js 的规范了</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// CMD 规范</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">convert</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">convet</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">convert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">substract</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">convet</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">convert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">convet</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">convert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">convet</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">convert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 第一种方法</span>
    exports<span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 第二种优先级更高的方法，自动化属性，相当于add: add，下面这个是ES6的语法</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>add<span class="token punctuation">,</span> substract<span class="token punctuation">,</span> multiply<span class="token punctuation">,</span> divide<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<ol start="7">
<li>模块的类型<ol>
<li>核心模块：系统内置的</li>
<li>第三方模块：</li>
<li>文件模块：自己写的</li>
</ol>
</li>
<li>全局对象<ol>
<li>__dirname：获取当前脚本所在目录的路径</li>
<li>__filename：获取当前脚本的文件路径</li>
</ol>
</li>
<li>注意：如果模块当中定义了相对路径，node 会以入口文件（调用这个模块的文件）的路径为基准，进行相对路径的计算。</li>
<li>所有的文件操作最安全的方法就是就是使用绝对路径，还有一种方法就是用 <code>__dirname + &#39;/../list&#39;</code></li>
<li>模块内部实际上是一个私有的空间，外边不能随便拿到里边的内容</li>
<li>模块内全局环境：<ol>
<li>module：模块对象<ol>
<li>module.exports 是个对象</li>
<li>module.parents 当前模块被谁载入了</li>
<li>module.loaded 没有执行完呢</li>
<li>module.children 当前脚本加载的所有子模块</li>
<li>module.path 是模块加载的顺序。</li>
</ol>
</li>
<li>exports：映射到 module.exports 的别名</li>
<li>require()<ol>
<li>require.cache</li>
<li>require.extensions</li>
<li>require.main</li>
<li>require.resolve</li>
</ol>
</li>
</ol>
</li>
<li>exports = module.exports = {}</li>
<li>require <ol>
<li>加载目录规则</li>
<li>加载机制：如果不写拓展名，先找这个名字的 js 文件，再找 json 文件， 再找.node 文件，再然后如果有个文件夹同名，会去加载这个文件夹下面的 index.js 和 package.json 中的 main 指向的文件 （相对更优先）。</li>
</ol>
</li>
<li>require 不仅仅可以载入 JS 模块，也可以载入 JSON 对象。</li>
<li>因为 require 默认会加载系统核心模块和node_modules 中的第三方模块，所以同目录下的文件不能直接写文件名，要加”./“。</li>
<li>读文件一定要用物理路径，加上__dir这种</li>
<li>模块缓存<ol>
<li>加载模块是个阻塞操作</li>
<li>模块一加载，就会缓存起来。</li>
<li>看缓存，就用定时器不停查看</li>
<li>清除缓存 <code>delete require.cache.[模块名]</code>或者高级的 <code>Object.keys(require.cache).forEach((key)=&gt;{delete require.cache[key]})</code>;</li>
</ol>
</li>
<li>一般我们使用的时候很少暴露属性，都是暴露行为的，可控程度更高 。</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上面这样写，第一次的时候会执行这段代码，再引用就不会了，解决的办法如下</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<ol start="20">
<li>自己写缓存的时候注意：缓存的是 module 对象，返回的都是 module.exports 成员</li>
</ol>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 作用域</title>
    <url>/2020/06/02/languages/javascript%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="javascript-函数的执行"><a href="#javascript-函数的执行" class="headerlink" title="javascript 函数的执行"></a>javascript 函数的执行</h1><p>闭包相关知识图谱</p>
<ul>
<li>闭包<ul>
<li>表达式部分：lamada 表达式</li>
<li>环境部分<ul>
<li>环境<ul>
<li>变量环境</li>
<li>词法环境</li>
<li>this值</li>
</ul>
</li>
<li>标识符列表：函数中用到的未声明的变量</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>javascript 函数相关知识图谱：</p>
<ul>
<li>javascript 函数<ul>
<li>表达式部分：函数</li>
<li>环境部分：函数的词法环境部分组成<ul>
<li>函数里面不带 var 、let、const 的变量</li>
<li>词法作用域（执行上下文的一部分）<ul>
<li>scope</li>
<li>this值</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>从图上可以看出，二者是可以对应起来的。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>在上世纪60年代，主流编程语言是基于 lamada 演算的函数式编程语言。</p>
<p>对闭包，一个不太精确的描述是，<strong>带有一系列信息的 lamada 表达式</strong>（在函数式语言中，lamada表达式就是函数）。</p>
<p>进一步理解，<strong>闭包是一个绑定了执行环境的函数</strong></p>
<p>闭包不同于普通函数之处在于，他<strong>携带了执行的环境</strong>。</p>
<blockquote>
<p>误区：执行上下文或者作用域（scope，ES3中规定的执行上下文的一部分）就是闭包（这是错的）</p>
</blockquote>
<p><strong>javascript 中闭包对应的概念就是函数。</strong></p>
<h2 id="执行上下文：执行的基础设施"><a href="#执行上下文：执行的基础设施" class="headerlink" title="执行上下文：执行的基础设施"></a>执行上下文：执行的基础设施</h2><p>JavaScript 标准把一段代码（包括函数），执行所需的所有信息定义为：“<strong>执行上下文</strong>”。</p>
<h3 id="执行上下文的演变"><a href="#执行上下文的演变" class="headerlink" title="执行上下文的演变"></a>执行上下文的演变</h3><h4 id="ES3中的执行上下文"><a href="#ES3中的执行上下文" class="headerlink" title="ES3中的执行上下文"></a>ES3中的执行上下文</h4><ul>
<li>scope：作用域，也叫作用域链</li>
<li>variable object： 变量对象，用于存储变量的对象</li>
<li>this value： this 值</li>
</ul>
<h4 id="ES5-中的执行上下文"><a href="#ES5-中的执行上下文" class="headerlink" title="ES5 中的执行上下文"></a>ES5 中的执行上下文</h4><ul>
<li>lexical enrironment：词法环境，当获取变量时使用。</li>
<li>variable environment：变量环境，当声明变量时使用。</li>
<li>this value：this 值</li>
</ul>
<h4 id="ES-2018中的执行上下文"><a href="#ES-2018中的执行上下文" class="headerlink" title="ES 2018中的执行上下文"></a>ES 2018中的执行上下文</h4><ul>
<li>lexical enrironment：词法环境，当获取变量时使用或者 this 值时使用。</li>
<li>variable environment：变量环境，当声明变量时使用。</li>
<li>code evaluation state：用于恢复代码执行位置。</li>
<li>Function：执行的任务是函数时使用，表示正在执行的函数</li>
<li>ScriptOrModule：执行的任务是脚本或模块时使用，表示正在执行的代码</li>
<li>Realm：使用的基础库和内置对象实例。</li>
<li>Generator：仅生成器上下文有这个属性，表示当前生成器</li>
</ul>
<p>this 被归入了 lexical environment</p>
<h3 id="var-声明和赋值"><a href="#var-声明和赋值" class="headerlink" title="var 声明和赋值"></a>var 声明和赋值</h3><p>var 会穿透 for、if 等语句。</p>
<p>因此也就有了立即执行函数IIFE，创建一个立即执行的函数来构造一个新的作用域，控制 var 的范围。</p>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>以下语句会产生 let 使用的作用域</p>
<ul>
<li>for</li>
<li>if</li>
<li>switch</li>
<li>try / catch / finally</li>
</ul>
<h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><p>领域、范围</p>
<h1 id="函数的种类"><a href="#函数的种类" class="headerlink" title="函数的种类"></a>函数的种类</h1><p>一旦上下文被切换，整个语句的效果可能都会发生改变。那么，切换上下文的时机就显得非常重要了。</p>
<p>在 JavaScript，切换上下文最主要的场景是函数调用。在这一课，我们就来讲讲函数调用切换上下文的事情。我们在讲函数调用之前，首先来认识一下函数家族。</p>
<h2 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h2><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p>用 function 关键字定义的函数</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// code</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>用 =&gt; 运算符定义的函数</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// code</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在 class 中定义的函数</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// code</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><p>用 function* 定义的函数</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// code</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>用 class 定义的类，实际上也是函数</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// code</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h3><p>普通函数、箭头函数、和生成器函数加上 async 关键字</p>
<pre><code>async function foo() {
    // code
}

const foo = async () =&gt; {
    // code
}
async function foo*() {
    // code
}</code></pre><h2 id="this-关键字的行为"><a href="#this-关键字的行为" class="headerlink" title="this 关键字的行为"></a>this 关键字的行为</h2><p>对普通变量而言，这些函数并没有本质区别，都是遵循了“继承定义时环境”的规则，它们的一个行为差异在于 this 关键字。</p>
<p>this 是执行上下文中很重要的一个组成部分。同一个函数调用方式不同，得到的 this 值也不同。</p>
<h4 id="普通函数的-this"><a href="#普通函数的-this" class="headerlink" title="普通函数的 this"></a>普通函数的 this</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
    showThis<span class="token punctuation">:</span> showThis
<span class="token punctuation">}</span>

<span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// global</span>
o<span class="token punctuation">.</span><span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// o</span></code></pre>
<p>普通函数的 this 值由“调用它所使用的引用”决定，其中奥秘就在于：我们获取函数的表达式，它实际上返回的并非函数本身，而是一个 Reference 类型（记得我们在类型一章讲过七种标准类型吗，正是其中之一）。</p>
<p>Reference 类型由两部分组成：一个对象和一个属性值。不难理解 o.showThis 产生的 Reference 类型，即由对象 o 和属性“showThis”构成。</p>
<p>当做一些算术运算（或者其他运算时），Reference 类型会被解引用，即获取真正的值（被引用的内容）来参与运算，而类似函数调用、delete 等操作，都需要用到 Reference 类型中的对象。</p>
<p>在这个例子中，Reference 类型中的对象被当作 this 值，传入了执行函数时的上下文当中。</p>
<p>至此，我们对 this 的解释已经非常清晰了：调用函数时使用的引用，决定了函数执行时刻的 this 值</p>
<h4 id="箭头函数的-this"><a href="#箭头函数的-this" class="headerlink" title="箭头函数的 this"></a>箭头函数的 this</h4><pre><code>const showThis = () =&gt; {
    console.log(this)
}

var o = {
    showThis: showThis
}

showThis()    // global
o.showThis()    // global</code></pre><p>我们看到，改为箭头函数后，不论用什么引用来调用它，都不影响它的 this 值。</p>
<h4 id="方法的-this"><a href="#方法的-this" class="headerlink" title="方法的 this"></a>方法的 this</h4><pre><code>class C {
    showThis() {
        console.log(this)
    }
}

var o = new C()
var showThis = o.showThis()

showThis() // undefined
o.showThis() // o</code></pre><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><ul>
<li>生成器函数、异步生成器函数和异步普通函数跟普通函数行为是一致的</li>
<li>异步箭头函数与箭头函数行为是一致的</li>
</ul>
<h3 id="this-关键字的机制"><a href="#this-关键字的机制" class="headerlink" title="this 关键字的机制"></a>this 关键字的机制</h3><p>在 JavaScript 标准中，为函数规定了用来保存定义时上下文的私有属性[[Environment]]。</p>
<p>当一个函数执行时，会创建一条新的执行环境记录，记录的外层词法环境（outer lexical environment）会被设置成函数的[[Environment]]。</p>
<p>这个动作就是切换上下文了。</p>
<p>JavaScript 用一个栈来管理执行上下文，这个栈中的每一项又包含一个链表。</p>
<p>当函数调用时，会入栈一个新的执行上下文，函数调用结束时，执行上下文被出栈。</p>
<p>而 this 则是一个更为复杂的机制，JavaScript 标准定义了 [[thisMode]] 私有属性。</p>
<p>[[thisMode]] 私有属性有三个取值：</p>
<ul>
<li>lexical：表示从上下文中找 this，这对应了箭头函数。</li>
<li>global：表示当 this 为 undefined 时，取全局对象，对应了普通函数。</li>
<li>strict：当严格模式时使用，this 严格按照调用时传入的值，可能为 null 或者 undefined。</li>
</ul>
<p>非常有意思的是，方法的行为跟普通函数有差异，恰恰是因为 class 设计成了默认按 strict 模式执行。</p>
<p>我们可以用 strict 达成与上一节中方法的例子一样的效果:</p>
<pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span>
<span class="token keyword">function</span> <span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
    showThis<span class="token punctuation">:</span> showThis
<span class="token punctuation">}</span>

<span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
o<span class="token punctuation">.</span><span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// o</span></code></pre>
<p>函数创建新的执行上下文中的词法环境记录时，会根据[[thisMode]]来标记新纪录的[[ThisBindingStatus]]私有属性。</p>
<p>代码执行遇到 this 时，会逐层检查当前词法环境记录中的[[ThisBindingStatus]]，当找到有 this 的环境记录时获取 this 的值。</p>
<p>这样的规则的实际效果是，嵌套的箭头函数中的代码都指向外层 this，例如：</p>
<pre><code>var o = {a: 1, b: 2, c: 3}
o.foo = function() {
    console.log(this)
    return () =&gt; {
        console.log(this)
        return () =&gt; console.log(this)
    }
}
o.foo()()();//o, o, o</code></pre><h3 id="操作-this-的内置函数"><a href="#操作-this-的内置函数" class="headerlink" title="操作 this 的内置函数"></a>操作 this 的内置函数</h3><pre><code>function foo(a, b, c) {
    console.log(this)
    console.log(a, b, c)
}

foo.call({d:4}, 1, 2, 3)
foo.apply({e: 5}, [1, 2, 3])</code></pre><h1 id="javascript-作用域"><a href="#javascript-作用域" class="headerlink" title="javascript 作用域"></a>javascript 作用域</h1><h1 id="javascript-闭包"><a href="#javascript-闭包" class="headerlink" title="javascript 闭包"></a>javascript 闭包</h1>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java(4) - 类与对象</title>
    <url>/2020/04/03/languages/java(4)%20-%20%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<blockquote>
<p>摘要：这是 《JAVA 核心技术》 第 4 章 类与对象</p>
</blockquote>
<a id="more"></a>


<h1 id="第-4-章-类与对象"><a href="#第-4-章-类与对象" class="headerlink" title="第 4 章 类与对象"></a>第 4 章 类与对象</h1><h2 id="4-1-面向对象程序设计概述"><a href="#4-1-面向对象程序设计概述" class="headerlink" title="4.1 面向对象程序设计概述"></a>4.1 面向对象程序设计概述</h2><ul>
<li>结构化程序设计，算法第一，为了解决一个问题，先设计一系列的算法，然后在考虑数据的存储方式。</li>
<li>面向对象程序设计，将数据放在第一位，然后再去考虑操作数据的算法</li>
</ul>
<h3 id="4-1-3-识别类"><a href="#4-1-3-识别类" class="headerlink" title="4.1.3 识别类"></a>4.1.3 识别类</h3><p>如何下手：首先从设计类开始，然后再往每个类中添加方法。</p>
<p><strong>找名词与动词</strong>：首先分析问题中遇到的名词，再将动词作为方法传给他</p>
<blockquote>
<p>例如，订单系统中</p>
<p>名词有：</p>
<ul>
<li>商品（Item）</li>
<li>订单（Order）</li>
<li>送货地址（Shipping address）</li>
<li>付款（Payment）</li>
<li>账户（Account）</li>
</ul>
<p>动词有：</p>
<ul>
<li>添加（商品被添加到订单中）</li>
<li>发送、取消（订单被发送、取消）</li>
<li>付款、支付（订单被付款）</li>
</ul>
</blockquote>
<h3 id="4-14-类与类之间的关系"><a href="#4-14-类与类之间的关系" class="headerlink" title="4.14 类与类之间的关系"></a>4.14 类与类之间的关系</h3><ul>
<li>依赖（uses-a）：<ul>
<li>如果一个类的方法操纵另一个类的对象，我们就说一个类依赖于另一个类。</li>
<li>应该尽可能将相互依赖的类减至最少，让类之间的耦合度最小</li>
</ul>
</li>
<li>聚合（has-a)：<ul>
<li>类A 的对象包含类 B 的对象，例如：一个 Order 对象包含一些 Item 对象</li>
</ul>
</li>
<li>继承（is-a)：</li>
</ul>
<h2 id="4-2-使用预定义类"><a href="#4-2-使用预定义类" class="headerlink" title="4.2 使用预定义类"></a>4.2 使用预定义类</h2><p>适用对象，首先要指定其初始状态并构造对象。</p>
<p>JAVA 使用构造器（constructor)构造新实例，constructor 用来构造并初始化对象，构造器的名字应该与类名相同，因此 Date 类的构造器名为 Date</p>
<blockquote>
<p>一定要认识到：一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。new 操作符返回的值是一个引用</p>
</blockquote>
<p>GMT 格林威治时间</p>
<p>UTC 从 1970年1月1日00：00：00 到现在的毫秒数</p>
<ul>
<li>localDate 的静态工厂方法<ul>
<li>of(199, 12, 31)</li>
<li>getYear()</li>
<li>getMonthValue()</li>
<li>getDayofMonth()</li>
<li>plusDays()</li>
</ul>
</li>
</ul>
<h3 id="更改器方法和访问器方法"><a href="#更改器方法和访问器方法" class="headerlink" title="更改器方法和访问器方法"></a>更改器方法和访问器方法</h3><ul>
<li>访问其方法：accessor method，只访问对象而不修改对象的方法</li>
</ul>
<h2 id="4-3-用户自定义类"><a href="#4-3-用户自定义类" class="headerlink" title="4.3 用户自定义类"></a>4.3 用户自定义类</h2><p>文件名必须与 public 类的名字相匹配。在一个，源文件中只能有一个公有类，但可以有任意数目的非公有类。</p>
<p>将类的属性设置为 public（如public String name） 或者对属性添加域访问器（如 getName）,都可以对外暴露name 属性，但是用域访问器，也就是封装起来的好处是：当仅用 get 的时候，可以保证属性不被意外的修改；当 set 某个域的时候，前者可以在程序的所有地方设置，修改的时候处处都要修改，而后者只要修改 setName 方法就可以了。</p>
<p>在有些时候，需要获得或设置实例域的值。因此，应该提供下面三项内容：</p>
<ul>
<li>私有的数据域</li>
<li>公有的域访问器方法</li>
<li>一个公有的域更改器方法</li>
</ul>
<p>好处：</p>
<ul>
<li>可以更改内部实现，不会影响程序其他部分。<ul>
<li><code>getName(){return name}</code> 换成<code>getName(){return this.firstName + this.lastName}</code></li>
</ul>
</li>
<li>更改器方法可以执行错误检查，直接对域值进行赋值将不会进行这些处理</li>
<li>公有域非常危险，所以应该将所有的数据域设置为私有域。</li>
</ul>
<blockquote>
<p> 注意：<strong>不要编写返回引用可变对象的访问器方法。因为外部获取一个属性之后，对该属性调用更改器方法，会跳过类的更改器而直接修改类的属性。</strong></p>
</blockquote>
<p>如何编写可变对象的访问器</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">public</span> Date <span class="token function">getHireDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>Date<span class="token punctuation">)</span> hireDay<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="隐式参数与显式参数"><a href="#隐式参数与显式参数" class="headerlink" title="隐式参数与显式参数"></a>隐式参数与显式参数</h3><p>出现在方法名前的 类对象 是隐式参数，在每一个方法中，关键词 this 表示隐式参数</p>
<p>位于方法名后边括号之中的参数为显示参数</p>
<h3 id="4-3-7-基于类的访问权限"><a href="#4-3-7-基于类的访问权限" class="headerlink" title="4.3.7 基于类的访问权限"></a>4.3.7 基于类的访问权限</h3><p>从前面已经知道，方法可以访问所调用对象的私有数据。一个方法可以访问所属类的所有对象的私有数据，这令很多人感到奇怪！</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Employee other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span></code></pre>
<p>调用 <code>if (harry.equals(boss))</code> ，这个方法不仅访问了 harry 的私有域，还访问了 boss 的私有域。这是因为 boss 是 Employee 类的对象，而Employee 类的方法可以访问 Employee 类的任何一个对象的私有域。</p>
<h3 id="4-3-8-私有方法"><a href="#4-3-8-私有方法" class="headerlink" title="4.3.8 私有方法"></a>4.3.8 私有方法</h3><p>只要方法是私有的，更改程序的时候，就可以去确信，他不会被程序外部的其他数据操作调用，只要保证类的内部代码正常运作，删除这个私有方法不会影响程序的其他部分。</p>
<h3 id="4-3-9-final-实例域"><a href="#4-3-9-final-实例域" class="headerlink" title="4.3.9 final 实例域"></a>4.3.9 final 实例域</h3><ul>
<li>构建对象时，必须初始化这样的域</li>
<li>一个构造器执行之后，这个域的值被设置，并且在后面的操作中，不能再对它进行修改。</li>
</ul>
<h2 id="4-4-静态域和静态方法"><a href="#4-4-静态域和静态方法" class="headerlink" title="4.4 静态域和静态方法"></a>4.4 静态域和静态方法</h2><h3 id="4-4-1-静态域"><a href="#4-4-1-静态域" class="headerlink" title="4.4.1 静态域"></a>4.4.1 静态域</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ....</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> nextId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// ....</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    id <span class="token operator">=</span> nextId<span class="token punctuation">;</span>
    nexId<span class="token operator">++</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>每一个雇员对象都有一个自己的 id 域</li>
<li>这个类的所有实例将共享一个 nextId域</li>
<li>即使没有一个雇员对象，静态域 nextId 也存在。它属于类，二不属于任何独立的对象。</li>
<li>静态域被称为类域</li>
</ul>
<h3 id="4-4-2-静态常量"><a href="#4-4-2-静态常量" class="headerlink" title="4.4.2 静态常量"></a>4.4.2 静态常量</h3><p>静态变量使用得比较少，但是静态常量却使用得比较多</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span>
    <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> PrintScream out <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span></code></pre>
<p>这样可以使用Math.PI，就不用通过类的对象访问 PI 了，而且不用每个实例保存一个PI 的拷贝</p>
<blockquote>
<p>辨别：每个类都可以修改公有域（public 属性），不要将域（属性）设计成public。</p>
<p>公有常量（final 域）可以设置成 public，因为设置成 final 不允许修改。</p>
</blockquote>
<h3 id="4-4-3-静态方法"><a href="#4-4-3-静态方法" class="headerlink" title="4.4.3 静态方法"></a>4.4.3 静态方法</h3><p>静态方法是一种不能向对象实施操作的方法，也就是没有隐式参数、this 参数的方法。例如 Math.pow(x, a)。</p>
<p>静态方法不能访问实例域（类属性），但是可以访问自身类中的静态域。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ....</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> nextId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// ....</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getNextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nextId<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>可以通过 类名调用这个方法 <code>int n = Employee.getNextId();</code></p>
<p>静态方法和类的实例对象没有关系，建议用类名调用静态方法。</p>
<p>在下面两种情况使用静态方法：</p>
<ul>
<li>一个方法不需要访问对象状态，其所需要的参数都是通过显示参数提供的（Math.pow()）</li>
<li>一个方法只需要访问类的静态域（Employee.getNextId）</li>
</ul>
<h3 id="4-4-4-工厂方法"><a href="#4-4-4-工厂方法" class="headerlink" title="4.4.4 工厂方法"></a>4.4.4 工厂方法</h3><p>LocalDate.now 和 LocalDate.of 就是工厂方法，他们是 LocalDate 的类静态工厂方法</p>
<pre class=" language-java"><code class="language-java">NumberFormat currencyFormatter <span class="token operator">=</span> NumberFormat<span class="token punctuation">.</span><span class="token function">getCurrencyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
NumberFormat percentFormatter <span class="token operator">=</span> NumberFormat<span class="token punctuation">.</span><span class="token function">getPercentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>currencyFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>percentFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>不明觉厉：为什么 NumberFormat 类不利用构造器完成这些操作的原因：</p>
<ul>
<li>无法命名构造器。构造器的名字必须与类名相同。但是，这里希望将的道德货币实例和百分比实例采用不同的名字。</li>
<li>当使用构造器时，无法改变所构造的对象的类型。而 Factory 方法将返回一个 DecimalFormat 类对象，这是NumberFormat 的子类。</li>
</ul>
<h3 id="4-4-5-main-方法"><a href="#4-4-5-main-方法" class="headerlink" title="4.4.5 main 方法"></a>4.4.5 main 方法</h3>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 dart 特性实现一个购物车</title>
    <url>/2019/07/20/languages/%E5%88%A9%E7%94%A8%20dart%20%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍一下 dart 的一些特性，并利用这些特性，逐步优化一个购物车功能，使其逐步转化为 dart 风格的简介代码。</p>
</blockquote>
<a id="more"></a>

<p>不同于 java 的重载方法，Dart 认为重载会导致混乱，因此从设计之初就不支持重载，而是提供了可选命名参数和可选参数。</p>
<p>具体方式是，在声明函数是：</p>
<ul>
<li>给参数增加{}，以 paramName: value 的方式指定调用参数，也就是可选命名参数；</li>
<li>给参数增加 []，则意味着这些参数是可以忽略的，也就是可选参数。</li>
</ul>
<p>在使用这两种方式定义函数时，我们还可以在参数未传递时设置默认值。我以一个只有两个参数的简单函数为例，来和你说明这两种方式的具体用法：</p>
<pre class=" language-dart"><code class="language-dart">
<span class="token comment" spellcheck="true">//要达到可选命名参数的用法，那就在定义函数的时候给参数加上 {}</span>
<span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold<span class="token punctuation">,</span> bool hidden<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"$bold , $hidden"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//定义可选命名参数时增加默认值</span>
<span class="token keyword">void</span> <span class="token function">enable1Flags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> bool hidden <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"$bold ,$hidden"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//可忽略的参数在函数定义时用[]符号指定</span>
<span class="token keyword">void</span> <span class="token function">enable3Flags</span><span class="token punctuation">(</span>bool bold<span class="token punctuation">,</span> <span class="token punctuation">[</span>bool hidden<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"$bold ,$hidden"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//定义可忽略参数时增加默认值</span>
<span class="token keyword">void</span> <span class="token function">enable4Flags</span><span class="token punctuation">(</span>bool bold<span class="token punctuation">,</span> <span class="token punctuation">[</span>bool hidden <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"$bold ,$hidden"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//可选命名参数函数调用</span>
<span class="token function">enable1Flags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> hidden<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true, false</span>
<span class="token function">enable1Flags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true, null</span>
<span class="token function">enable2Flags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false, false</span>

<span class="token comment" spellcheck="true">//可忽略参数函数调用</span>
<span class="token function">enable3Flags</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true, false</span>
<span class="token function">enable3Flags</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true, null</span>
<span class="token function">enable4Flags</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true, false</span>
<span class="token function">enable4Flags</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true, true</span></code></pre>
<h2 id="dart-语言简化代码的一个例子"><a href="#dart-语言简化代码的一个例子" class="headerlink" title="dart 语言简化代码的一个例子"></a>dart 语言简化代码的一个例子</h2><p>使得 Dart 能够写出更简介代码特性主要有以下三个：</p>
<ul>
<li>命名构造函数</li>
<li>与 C++ 类似，Dart 支持初始化列表</li>
<li>super(key: key)</li>
</ul>
<p>下面我们会逐步改造一个例子，来看看 dart 究竟是如何简化开发的。例子很简单，实现的功能就是向购物车中添加商品，然后打印出购物车种的商品。</p>
<p>首先我们可以不利用 dart 的独特特性，用跟其他语言差不多的方式来实现这个功能，代码如下：</p>
<pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ShoppingCart sc <span class="token operator">=</span> <span class="token function">ShoppingCart</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sc<span class="token punctuation">.</span>bookings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">Item</span><span class="token punctuation">(</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>
  double price<span class="token punctuation">;</span>
  String name<span class="token punctuation">;</span>
  <span class="token function">Item</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token punctuation">{</span>
  String name<span class="token punctuation">;</span>
  DateTime date<span class="token punctuation">;</span>
  String code<span class="token punctuation">;</span>
  List<span class="token operator">&lt;</span>Item<span class="token operator">></span> bookings<span class="token punctuation">;</span>

  <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    double sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> bookings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> i<span class="token punctuation">.</span>price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">ShoppingCart</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">""</span> <span class="token operator">+</span>
      <span class="token string">"购物车信息："</span> <span class="token operator">+</span> 
      <span class="token string">"\n---------------------"</span>
      <span class="token string">"\n用户名："</span> <span class="token operator">+</span> name <span class="token operator">+</span>
      <span class="token string">"\n总价："</span> <span class="token operator">+</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token string">"\n日期："</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token string">"\n---------------------"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>下面，我们对这个例子的初始化过程进行优化，其他代码不变，利用 语法糖和初始化列表来简化初始化的过程，改变之后的部分代码如下：</p>
<pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// ...</span>
<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">{</span>
    double price<span class="token punctuation">;</span>
    String name<span class="token punctuation">;</span>
    <span class="token function">Item</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token punctuation">{</span>
    String name<span class="token punctuation">;</span>
    DateTime date<span class="token punctuation">;</span>
    String code<span class="token punctuation">;</span>
    <span class="token function">ShoppingCart</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">:</span> date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// ...</span></code></pre>
<p>因为 ShoppingCart 和 Item 都有 name 和 price 属性，可以抽象成一个 Meta 类</p>
<pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// ...</span>
<span class="token keyword">class</span> <span class="token class-name">Meta</span> <span class="token punctuation">{</span>
    double price<span class="token punctuation">;</span>
    String name<span class="token punctuation">;</span>
    <span class="token function">Meta</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token keyword">extends</span> <span class="token class-name">Meta</span> <span class="token punctuation">{</span>
    <span class="token function">Item</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token keyword">extends</span> <span class="token class-name">meta</span> <span class="token punctuation">{</span>
    DateTime date<span class="token punctuation">;</span>
    String code<span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>Item<span class="token operator">></span> bookings<span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// ...</span>

    <span class="token function">ShoppingCart</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">:</span> date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span></code></pre>
<p>dart 语言还可让我们重载运算符，这样 ShoppingCart 中的 get price 方法就可以重写</p>
<pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// ...</span>

<span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token keyword">extends</span> <span class="token class-name">Meta</span> <span class="token punctuation">{</span>
    <span class="token function">Item</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Item <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Item</span><span class="token punctuation">(</span>name <span class="token operator">+</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> price <span class="token operator">+</span> item<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token keyword">extends</span> <span class="token class-name">meta</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 重载了 + 之后，可以对 Item 的列表进行 reduce 操作了</span>
    double <span class="token keyword">get</span> price <span class="token operator">=</span><span class="token operator">></span> bookings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span></code></pre>
<p>最后修改一下 getInfo 方法，使用多行字符串简化字符串拼接，使用 ?? 运算符代替三元表达式，完整的例子代码就变成了下面这样。</p>
<pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Meta</span> <span class="token punctuation">{</span>
    double price<span class="token punctuation">;</span>
    String name<span class="token punctuation">;</span>
    <span class="token function">Meta</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token keyword">extends</span> <span class="token class-name">Meta</span> <span class="token punctuation">{</span>
    <span class="token function">Item</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Item <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Item</span><span class="token punctuation">(</span>name <span class="token operator">+</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> price <span class="token operator">+</span> item<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token keyword">extends</span> <span class="token class-name">Meta</span> <span class="token punctuation">{</span>
    DateTime date<span class="token punctuation">;</span>
    String code<span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>Item<span class="token operator">></span> bookings<span class="token punctuation">;</span>

    double <span class="token keyword">get</span> price <span class="token operator">=</span><span class="token operator">></span> bookings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>

  <span class="token function">ShoppingCart</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">withCode</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> code<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ShoppingCart<span class="token punctuation">.</span><span class="token function">withCode</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'''
        购物车信息:
        -----------------------------
        用户名: $name
        优惠码: ${code??"没有"}
        总价: $price
        Date: $date
        -----------------------------
    '''</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ShoppingCart sc <span class="token operator">=</span> ShoppingCart<span class="token punctuation">.</span><span class="token function">withCode</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span> code<span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sc<span class="token punctuation">.</span>bookings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">Item</span><span class="token punctuation">(</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  ShoppingCart sc2 <span class="token operator">=</span> <span class="token function">ShoppingCart</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sc2<span class="token punctuation">.</span>bookings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">Item</span><span class="token punctuation">(</span><span class="token string">'火龙果'</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token string">'榴莲'</span><span class="token punctuation">,</span> <span class="token number">200.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>sc2<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>参考资料：极客时间：Flutter核心技术与实战</p>
</blockquote>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js Http 模块</title>
    <url>/2020/06/02/node/Node.js%20Http%20%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h1><h2 id="res-属性"><a href="#res-属性" class="headerlink" title="res 属性"></a>res 属性</h2><ol>
<li><code>res.writeHead(200,{&quot;Content-Type&quot;:&quot;text/html;charset=UTF8&quot;})</code></li>
<li><code>res.write(&quot;&lt;h1&gt;我是一级标题&lt;/h1&gt;&quot;)</code></li>
<li><code>res.end(&quot;&lt;h2&gt;我是二级标题&lt;/h2&gt;&quot;)</code></li>
<li>write 和 end 之中必须是字符串或者Buffer，别的内容需要<code>.toString()</code>才能输出</li>
<li>所有的http请求必须要有一个res.end()，否则会一直挂起</li>
</ol>
<h2 id="req-的属性"><a href="#req-的属性" class="headerlink" title="req 的属性"></a>req 的属性</h2><ol>
<li>req.url 属性最重要，所有路由都必须最先拿到它</li>
<li>req.url 会忽略参数，可以识别？之后查询的参数，但是不能识别页面之内的#这样的</li>
<li>req.url 是以 “/” 开始的，表示根目录</li>
<li>识别 URL 用到两个新模块：URL模块和 querystring 模块</li>
</ol>
<h3 id="querysting"><a href="#querysting" class="headerlink" title="querysting"></a>querysting</h3><ol>
<li>querystring.parse 接受一个查询字符串(?后面的东西)，返回一个对象，就是把 <code>&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge&#39;</code>变成<code>{foo:&#39;bar&#39;, bar:[&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39;}</code></li>
<li>querystring.parse 和url.parse 中传入第二个参数true是一样的，所以现在推荐第二种写法，现在querystring现在基本没用了</li>
</ol>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><ol>
<li>一个完整的请求路径：<code>http://user:pass@host.com:8080/p/a/t/h?query=string#hash</code> 可以划分为<ol>
<li>protocol：http</li>
<li>slashes： protocol后面是否有斜线</li>
<li>host: 主机名</li>
<li>auth：用户</li>
<li>hostname: 主机名，host.com</li>
<li>port: 端口号，8080</li>
<li>query: 网址的查询部分，可以通过第二个参数是true还是false决定返回的是字符串还是对象</li>
<li>search: 根没传参数的query是一样的</li>
<li>pathname: 路径，host之后和query之前的内容，包含最开始的那个斜线，例子中的 “/p/a/t/h”，</li>
<li>path：pathname和search的合体，是“/p/a/t/h?query=string#hash”</li>
<li></li>
<li>hash：页面中的锚点</li>
<li></li>
</ol>
</li>
<li><code>var url = require(&quot;url&quot;); var path = url.parse(req.url).path</code>，parse可以把url转换为一个对象 </li>
<li>url.parse 的第二个属性填入true，url 对象中的 query 属性就会得到一个字符串</li>
</ol>
<h2 id="实战内容"><a href="#实战内容" class="headerlink" title="实战内容"></a>实战内容</h2><ol>
<li>可以通过判断用户输入的url最后有没有 . 来判断请求的是文件还是文件夹</li>
<li>当出现异步的时候，要么把它放在回调函数里面，要么给通用函数设计一个回调函数</li>
<li>Node.js 不好用的地方<ol>
<li>实现一个静态的服务器需要写大量的代码，没有 web 容器</li>
<li>缓存问题，没有 304 ，用cookies打标记，查看last modified</li>
<li>express 实现静态只需要一行代码</li>
</ol>
</li>
</ol>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ol>
<li>exports 是 Node.js 穿件的一个对象，挂在上面的属性和方法，将完全付给<code>let a = require(&#39;xxx&#39;)</code> 中的 a 这个变量，a 接受 exports 变量，a 对象就是文件中的exports 对象，一般把变量设置成包的名字，相当于自动增加了一个<strong>顶部命名空间</strong>。</li>
<li>require 一次相当于增加了一个顶层变量，所有的函数和变量都要为这个顶层变量打点。</li>
<li>前端代码的暴露，暴露的是个命名空间</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    obj<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<ol start="4">
<li>可以用一个 Javascript 文件描述一个类，用 <code>module.exports = 构造函数名</code> 的方式暴露一个类，People 是一个构造函数，可以new出新对象</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

People<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    sayHello <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">lo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> People<span class="token punctuation">;</span></code></pre>
<ol start="5">
<li>综上，有两种js文件写作的方式，一种方式暴露一个类(module.exports = 类名)，第二种是暴露属性和方法（exports.msg = msg）</li>
<li>不写 ./ 的时候，默认从 node_modules 文件夹引入，node 会逐级遍历指导找到node_modules 文件夹</li>
<li>package.json 中 main 表示入口文件，每一个模块文件夹中推荐写一个package.json文件，Node 会自动读取它。</li>
<li>模块就是文件盒文件之间的关系</li>
</ol>
<h2 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h2><ol>
<li>post 请求是怎么玩的</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> postData <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

req<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

req<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> param <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"text/html; charset=utf8"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h2 id="ejs-模板"><a href="#ejs-模板" class="headerlink" title="ejs 模板"></a>ejs 模板</h2><ol>
<li>时代的潮流是，用户访问首页的时候产生静态文件，前端用 ajax 请求数据 json 文件</li>
<li>underscore 这样的前台模板，请求一个json，后台服务器只输出json，不输出样式</li>
<li>angular.js 这些就是优雅的把后台的数据变成前端的页面</li>
<li>ejs 这样的技术，技术要杂糅，前后端分的不够开</li>
<li>ejs 这个模板引擎的效率并不高，因为它实际上是后台在操作字符串</li>
</ol>
<h2 id="jade-模板"><a href="#jade-模板" class="headerlink" title="jade 模板"></a>jade 模板</h2><ol>
<li>靠的是字符缩进</li>
<li>效率高，解析快</li>
</ol>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>socket</title>
    <url>/2020/06/02/node/websocket/</url>
    <content><![CDATA[<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><ol>
<li>http协议是无状态的，服务器只会响应来自客户端的请求，但是它与客户端之间不具备持续的连接</li>
<li>我们可以轻松捕获浏览器的事件，比如用户点击盒子，这个时间可以轻松产生与服务器的数据交互，比如发送 Ajax 请求。但是，反过来却是不可能的，服务器发生了一个事件，服务器无法将这个事件的信息主动通知它的客户端，只有在用户端查询服务器的当前状态的时候，所发生的事件信息才会从服务器传递到客户端。</li>
<li>回调函数什么的都是因为客户端发生各种请求，才有回调的。http 协议就是监听各种请求。</li>
<li>http 难以实现实时应用。</li>
<li>解决办法：<ol>
<li>长轮询：每间隔1s查询一次服务器，最早的时候都是这种模式</li>
<li>长连接：客户端只请求一次，服务器连接保持，不会返回结果，不写response.end()</li>
<li>问题：性能浪费</li>
<li>h5 解决办法，退出了一个WebSocket协议，能够让浏览器和服务器进行全双工的实时通讯，服务器也能主动通知客户端了。</li>
</ol>
</li>
</ol>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><ol>
<li>为解决实时通讯问题，h5 推出了一个 WebSocket 协议，能够让浏览器和服务器进行全双工的实时通讯，服务器也能主动通知客户端了。</li>
<li>原理，利用 http 请求产生握手，http头部中含有 WebSocket 协议的信息，握手之后，二者转用 TCP 协议进行交流（QQ的协议），就变成了一个有状态的实时连接。</li>
<li>WebSocket 需要浏览器得支持(chrome4, firefox4, ie10, safari5)，更需要服务器支持(Node 0, Apach 7..0.2, Nginx 1.3)</li>
<li>Node.js 上实现需要很多代码，Socket.IO 成为事实上的标准，新手福音，业界良心。它屏蔽了所有底层细节，让顶层调用非常简单，并且还为不支持 WebSocket 协议的浏览器，提供了长轮询的透明模拟机制。</li>
<li>Node的单线程、非阻塞I/O、事件驱动机制，使它非常适合当socket 服务器。</li>
<li>socket 是插座的意思，象征着保持着通路，专业术语叫做套接字</li>
<li>socket 的使用，输入之后<a href="http://localhost:3000/socket.io/socket.io.js" target="_blank" rel="noopener">http://localhost:3000/socket.io/socket.io.js</a> 这个网址就会显示为一个 js 文件，此时需要配置html文档，创建一个页面，引入这个 js 文件 <code>&lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;</code> ，这是一个绝对地址，因为第一个 / 表示根路径。还要写一条语句 <code>&lt;script&gt;var socket = io()&lt;/script&gt;</code></li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> io <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'socket.io'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>

io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>socket<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'一个客户端连接了'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Listening Port: 3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<ol start="8">
<li>进行了上面的操作之后，服务器和客户端就都有 socket 对象了，彼此都有 emit 方法 和 on方法，写法<br><code>socket.on(事件名，(msg) =&gt; {})</code> 和 <code>socket.emit(事件名，msg)</code></li>
<li>不仅可以发字符串，还可以发字符串，数组，两方面同时都是 js 环境，node.js 非常适合做socket。</li>
<li>io.emit 广播，所有连接进来的人都会收到通知，默认是点对点，每一个连接进来的人都会创建一个专属于他的socket</li>
<li>Express 和 socket.io 能特别方便的配合，固定的写法如下</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> io <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'socket.io'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span>
http<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js fs 模块</title>
    <url>/2020/06/02/node/Node.js%20fs%20%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="相关模块"><a href="#相关模块" class="headerlink" title="相关模块"></a>相关模块</h2><ol>
<li>fs</li>
<li>path</li>
<li>readline</li>
<li>fs-extra(第三方)</li>
</ol>
<h2 id="path-模块"><a href="#path-模块" class="headerlink" title="path 模块"></a>path 模块</h2><ol>
<li><p><strong>文件操作过程中，都必须使用物理路径(绝对路径)</strong></p>
</li>
<li><p>path 提供了一系列与路径相关的API</p>
</li>
<li><p><code>path.basename(p[, ext])</code> 获取文件名，第二个参数表示不带拓展名</p>
</li>
<li><p><code>path.delimiter</code> 获取不同系统默认的分隔符，环境变量的分隔符，windows是’;’，linux 是 ‘:’，举个应用的例子<code>console.log(process.env.PATH.split(path.delimiter))</code></p>
</li>
<li><p><code>path.dirname(p)</code> 获取论经中的目录名称</p>
</li>
<li><p><code>path.extname(p)</code> 获取路径中的拓展名，包含’.’</p>
</li>
<li><p><code>path.parse(pathString)</code> 将一个路径字符串转换成一个对象，包含目录，文件名，拓展名， 它的逆过程是 <code>path.format(pathObj)</code></p>
</li>
<li><p><code>path.isAbosolute(path)</code> 判断路径是否为绝对路径，设计 api 的时候判断一下别人传的是不是绝对路径，是的话就直接用，不是的话自己转换一下。</p>
</li>
<li><p><code>path.join([path1][, path2][, path3])</code> 拼接路径，例如<code>path.join(__dirname, &#39;..&#39;, &#39;./temp&#39;, &#39;a&#39;, &#39;../../x.md</code> 相当于 ../x.md 所指向的绝对路径</p>
</li>
<li><p><code>path.normalize(p)</code> 常规化一个路径，纠正写的不太对的路径</p>
</li>
<li><p><code>path.relative(绝对路径a, 绝对路径b)</code> 获取b路径相对于a路径的相对路径。</p>
</li>
<li><p><code>path.resolve(一对路径)</code> 生成一个应该指向的绝对路径，跟join 差不多</p>
</li>
<li><p><code>path.sep</code> 当前操作系统中用的默认路径成员分隔符。windows是’&#39;，Linux 用的是 ‘/‘</p>
</li>
<li><p><code>path.win32</code> win32 指的是win32，在任何操作系统中使用windows 的方式操作路径，’path.posix’ 允许在任何操作系统上使用 linux 的方式操作路径，使用 path 自动判断系统</p>
</li>
<li><p><strong>注意：赋值语句先执行右边的部分，所以不能循环定义</strong></p>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>
        xp <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p<span class="token punctuation">.</span>xp <span class="token operator">=</span> p<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p <span class="token operator">==</span> p<span class="token punctuation">.</span>xp<span class="token punctuation">)</span></code></pre>
</li>
</ol>
<h2 id="同步调用和异步调用"><a href="#同步调用和异步调用" class="headerlink" title="同步调用和异步调用"></a>同步调用和异步调用</h2><ol>
<li><p>node 中所有的阻塞操作都提供了两种类型的 api，一种同步调用，一种异步调用，例如readFile() 和 readFileSync()</p>
</li>
<li><p>默认的一般都是异步调用，加上 Sync 的是同步的阻塞的</p>
</li>
<li><p>读取文件快不快很受cpu现在忙不忙影响。</p>
</li>
<li><p>异步调用</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'async'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./2012.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"async finish"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'async'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>同步调用</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'sync'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sync start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./2012.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sync finish'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'sync'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
</ol>
<h2 id="文件编码和缓冲区Buffer"><a href="#文件编码和缓冲区Buffer" class="headerlink" title="文件编码和缓冲区Buffer"></a>文件编码和缓冲区Buffer</h2><ol>
<li>读文件的时候没有传编码，默认的返回Buffer(缓冲区)</li>
<li>读文本文件一般用 “utf8” 格式</li>
<li><strong>现在的开发叫做基于高度封装的开发</strong></li>
<li>什么是缓冲区<ol>
<li>缓冲区及时内存中操作数据的容器</li>
<li>只是数据容器而已</li>
<li>通过缓冲区可以很方便的操作二进制数据</li>
<li>而且在大文件操作室必须有缓冲区</li>
</ol>
</li>
<li>把文件看做一个大水桶，想移动文件的话相当于换了一个水桶，可以把水一次倒进另一个水桶中，但是文件太大内存受不了；文件流就相当于一瓢一瓢的去从第一个桶里舀水到第二桶里边去，缓冲区就相当于这个瓢，一次只能放20M，40M之类的这么多文件，多舀几次</li>
<li>早期的 JS 只能操作字符串数据，最近才能读二进制文件，就要用到缓冲区的概念，文件取一部分，放到缓冲区，再取一部分直到结束</li>
<li><code>buf.toString(编码格式)</code> buf 中的内容读成字符串</li>
<li><code>var buffer = new Buffer(4)</code> 能装4个字节，<code>buffer.write(&#39;sssssssssss&#39;)</code> 只能存4个s，超过的就漏出去了。</li>
<li><code>var buf2 = new Buffer(4)</code>，能装下int32,2字节只能装下int16，<code>buf2.writeInt32LE(2)</code> 无论写的数字是什么都会占4个字节的空间，int32 的限制是27亿</li>
<li>一般我们用writeInt32Le就行了，网络传输用到32BE，int32是占四个内存空间，int8占一个，int16 占两个内存空间</li>
<li>base64 编码一般都是两个==</li>
</ol>
<h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><ol>
<li>写正则的时候先找一个将要进行操作的字符串模板，然后一点一点修改它</li>
<li><code>[00:01.22] 大家好</code> 复制他，修改之 <code>/\[(d{2})\:(d{2})\.(d{2})\]\s(.+)/</code></li>
<li>. 表示任意非换行字符</li>
<li>要是匹配之后还需要进一步操作的话，直接用 exec 执行，不用 test 测试可以节约一点性能，匹配结果第一项是字符串本身，$1 之类的才是我们自己的分组</li>
</ol>
<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><ol>
<li><code>JSON.stringfy({id = 10})</code> 序列化 JSON 字符串</li>
<li><code>JSON.parse()</code> 反序列化</li>
<li>写文件常见失败<ol>
<li>意外错误</li>
<li>文件权限问题</li>
<li>找不到文件夹（不会自动帮你创建文件夹）</li>
</ol>
</li>
<li>写入文件的方式<ol>
<li>异步文件写入 <code>fs.writeFile(file, data[, option],callback(err))</code></li>
<li>同步文件写入 <code>fs.writeSync(file,data[,option])</code></li>
<li>流式文件写入 <code>let streamWriter = fs.createWriteStream(path[,option])</code> 和 <code>streamWriter.write(data,callback)</code></li>
</ol>
</li>
<li>同步的情况用try catch 捕获错误。</li>
<li>默认写文件是覆盖过去，想要追加fs.appendFile</li>
</ol>
<h2 id="其他的文件操作"><a href="#其他的文件操作" class="headerlink" title="其他的文件操作"></a>其他的文件操作</h2><ol>
<li>很多系统移动和重命名文件用的都是相同的api</li>
</ol>
<h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><ol>
<li>创建一个目录<ol>
<li>fs.mkdir(path[, model], callback)</li>
<li>fs.mkdirSync(path[, model]);</li>
</ol>
</li>
<li>删除一个空目录<ol>
<li>fs.rmdir(path, callback)</li>
<li>fs.rmdirSync(path)</li>
</ol>
</li>
<li>读取一个目录<ol>
<li>fs.readdir(path, callback(err, files))</li>
<li>fs.readdirSync(path) // =&gt; 返回files</li>
</ol>
</li>
</ol>
<h2 id="如何写递归"><a href="#如何写递归" class="headerlink" title="如何写递归"></a>如何写递归</h2><ol>
<li>先写一层的情况</li>
<li>抽象递归参数</li>
<li>找到突破点（避免死循环）</li>
<li>递归就是自己调用自己，突破点就是找到那种不调用自己的情况</li>
<li>数组的 sort() 就是根据 ASCII 码排序</li>
<li><code>var a = new Array(2)</code> 声明一个长度为2的空数组</li>
</ol>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit 学习提纲</title>
    <url>/2020/07/09/temp/JUnit%20%E5%AD%A6%E4%B9%A0%E6%8F%90%E7%BA%B2/</url>
    <content><![CDATA[<h2 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h2><ul>
<li>瀑布式开发模型<ul>
<li>软件测试三个阶段：<ul>
<li>单元测试</li>
<li>集成测试</li>
<li>系统测试</li>
<li>（压力测试）：验证系统的稳定性与承载能力</li>
<li>（用户测试）</li>
</ul>
</li>
</ul>
</li>
<li>基于敏捷式的开发</li>
</ul>
<h2 id="JUnit-介绍"><a href="#JUnit-介绍" class="headerlink" title="JUnit 介绍"></a>JUnit 介绍</h2><ul>
<li>java 单元测试”必备“工具</li>
<li>简单的单元测试工具</li>
<li>自动化测试工具</li>
</ul>
<h2 id="JUnit-使用"><a href="#JUnit-使用" class="headerlink" title="JUnit 使用"></a>JUnit 使用</h2><p>注解：</p>
<ul>
<li><code>@Test</code></li>
<li><code>@Ignore</code></li>
<li><code>@Test(expeted=Exception.class)</code> 功能要抛出异常</li>
<li><code>@Test(timeout = 1000)</code> 执行效率</li>
<li><code>@Before</code> 所有的测试场景都要先调用它</li>
<li><code>@After</code> 搜有测试之后要执行</li>
<li><code>@FixMethodOrder(MethodSorters.JVM)</code> 按照顺序依次执行</li>
</ul>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 Express 框架</title>
    <url>/2020/06/02/node/%E5%AD%A6%E4%B9%A0%20express%20%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="express-整体感知"><a href="#express-整体感知" class="headerlink" title="express 整体感知"></a>express 整体感知</h2><ol>
<li>出色的路由能力，正则，“：”方法等</li>
<li>静态文件处理，用 <code>app.use(express.static(&#39;./public&#39;)&#39;</code>就行了</li>
<li>与模板引擎配合</li>
</ol>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ol>
<li>express.static 实现静态页面服务</li>
<li>express.static 和路由冲突的时候，看谁在上面，就会把路由拦截下来</li>
</ol>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol>
<li>app.get(网址, 回调)，当用get 方法访问网址的时候进行什么样的处理</li>
<li>app.post(网址, 回调)，当用post 方法访问网址的时候，进行什么样的处理</li>
<li>app.all(网址, 回调)，当用任何方法访问这个网址，都用同样的处理</li>
<li>互联网的网址是不区分大小写的，这个是 http 协议规定的</li>
<li>路由到 /a ，实际 /a?id=2&amp;se=man#hello，也是被这个网址的回调函数处理的</li>
<li>app.get(//commits/(/w+)(?:..(\w+)?$/, function)，可以在地址中使用正则表达式，通过req.params[0] 得到圆括号分组的结果，实际上express上用：的方式更好</li>
<li>推荐冒号的写法 <code>app.get(&#39;/user/:id&#39;,function(req, res) {})</code> ，可以通过req.params[“id”] 得到</li>
<li>表单可以自己提交到自己上，一个 get 请求，一个 post 方法，可以节约路由器</li>
<li>RESTful 路由设计<ol>
<li>/student/:id<ol>
<li>get 获取学生信息</li>
<li>add 添加学生</li>
<li>delete 删除学生信息</li>
</ol>
</li>
<li>一个路径，根据 http 的方法不同，对这个页面的使用不同</li>
<li>express 特别适合进行这样的路由设计</li>
</ol>
</li>
<li>网页基本上只能处理 get 和 post 请求，软件和 app 可以发起各种不同种类的请求</li>
</ol>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ol>
<li>中间件的<strong>顺序</strong>很重要，越详细的越往前写，越抽象的越往后写</li>
<li>express 寻找路由的顺序，是按照程序书写时从上到下，上面找到了就执行，下面符合的地址就执行不了了，匹配第一个路由之后不会继续匹配了。</li>
<li>想要继续寻找路由，需要在回调中添加一个 next 参数<code>(req, res, next)</code>，并执行它 <code>next()</code>，这样可以用两段小程序处理一个事，可以把业务分开。</li>
<li>解决路由冲突的第一种方法合理设置顺序，匹配了第一个，就不会往下匹配了。路由表，具体的往上写，抽象的往下写。</li>
<li>第二种解决方法是加入判断和 next()，还有两项业务挂载到一个路由上，注意第一个send之后，不能进行第二次send，next 的时候最后要一个中间件接受不满足所有匹配，最后会进行怎样的操作。</li>
<li>express 中有个很抽象的 app.use([path,]function[,function]) 函数，可以填写多个地址，用了 use 之后，设定了 path 之后，客户端访问path/任意东西，都会执行这个回调函数，可以把第一个参数的层级无限扩充下去，提供了req.originUrl 填写的全部网址，baseUrl app.use 中写的网址，req.path 第一个减去第二个</li>
<li>app.use(‘/‘,function) ，任何网址都会经过这个路由，但是会截断路由，这个必须得写next，不写网址的时候，也相当于写了一个 ‘/‘，也就是所有网址</li>
<li>app.use 的主要作用就是后面传入其他的参数和函数，这个回调会默认被传入 req 和 res 两个参数</li>
<li><code>app.use(&#39;/static&#39;, app.static(&#39;./public&#39;))</code> 可以把静态文件挂载到 static 这个路由下面，这样路由和文件夹的名字就不怕冲突了</li>
<li>用 express 写 404，最后放一个，<code>app.use(function(req, res) {res.send(&quot;没有这个页面&quot;)}</code>，所有路由都找不到的时候，就走这个路由，直接就是 404 了</li>
<li>post 必须用 body-parser 这个中间件</li>
<li><code>app.get(&quot;/&quot;, showIndex)</code> 这个 showIndex 的函数不用穿 req 和 res，因为它是个中间件，相当于回调的时候自动送进去了两个参数</li>
</ol>
<h2 id="内容渲染"><a href="#内容渲染" class="headerlink" title="内容渲染"></a>内容渲染</h2><ol>
<li>大多数情况下，内容渲染用 res.render()，将会根据views 中的模板文件进行渲染，自己写文件夹 <code>app.set(&quot;views&quot;,文件夹名)</code></li>
<li>这个函数根据内容，自动帮我们设置了 Content-type 头部和 200 状态码。</li>
<li>想写不同的状态码，可以用 <code>res.status(404).send(&quot;sorry, we can&#39;t find that!&quot;)</code></li>
<li>设置不同的 Content-Type，用 <code>res.set(&quot;Content-Type&quot;,&quot;text/html&quot;)</code></li>
<li>res.send 和 res.end 一样，只能设一次，但是 send 有个好处，自动帮我们设置状态吗和 MIME 类型。</li>
</ol>
<h2 id="post-和-get-请求"><a href="#post-和-get-请求" class="headerlink" title="post 和 get 请求"></a>post 和 get 请求</h2><ol>
<li><code>app.use(express.static(&quot;./public&quot;)</code> 就解决了所有静态文件的问题</li>
<li>get 请求的参数在 url 中，原生 node 中需要 URL 模块来识别参数字符串。在 express 中，可以直接使用 req.query 对象</li>
<li>POST 在 express 中不能直接获得，body-parser 模块，使用之后可以用 req.body 得到参数。但是表单中含有文件的上传，那么需要使用 formidable 这样的工具</li>
<li>body-parser 的使用<ol>
<li><code>const bodyParser = require(&quot;body-parser&quot;)</code></li>
<li><code>app.use(bodyParser, urlencoded({extended: false}))</code></li>
<li>或者 <code>app.use(bodyParser, json())</code></li>
</ol>
</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p>AJAX 请求的都是 JSON</p>
</li>
<li><p>node.js 所有的js文件可以从自己出发，用相对目录引用</p>
</li>
<li><p>Node.js 的编程思维：因为所有的东西都是异步的，所以，内层函数，不是return 回来东西，而是调用高层函数提供的回调函数。先干具体的事情，用回调代替返回值</p>
<p>不是这样</p>
<pre class=" language-javascript"><code class="language-javascript">res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">"name"</span><span class="token punctuation">:</span> student<span class="token punctuation">.</span><span class="token function">getDetailById</span><span class="token punctuation">(</span><span class="token number">234234</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>而是这样</p>
<pre class=" language-javascript"><code class="language-javascript">student<span class="token punctuation">.</span><span class="token function">getDetailById</span><span class="token punctuation">(</span><span class="token number">234234</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string">"name"</span><span class="token punctuation">:</span> detail<span class="token punctuation">.</span>name
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
</li>
<li><p>Node 全是回调函数，如果我们自己的方法中包含IO或者数据库，也要用回调函数的方法封装。callback(err, null) 和 callback(null, err)</p>
</li>
<li><p>可以将最后的app.use 写404</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>异步操作</title>
    <url>/2020/06/02/node/%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h2><ol>
<li>当代码需要等待一个无状态的东西的时候，比如说不知道用户什么时候输入</li>
<li>异步的就是执行要好长时间的代码，我们直接绕过它</li>
<li>JS 代码计时器</li>
</ol>
<pre class=" language-JavaScript"><code class="language-JavaScript">console.time("main");
// 执行一段代码
console.timeEnd("main");</code></pre>
<ol start="4">
<li>手动写异步的操作用 <code>setTimeout([function],0)</code> 实现</li>
<li>callback 一般都是错误优先的回调函数，异步操作发生异常的话，外界是捕获不到的。错误优先的回调函数，如下</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> doSomethingAsync <span class="token punctuation">(</span>path<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>错误<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'xxx 错误'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ol start="6">
<li>典型的异步操作<ol>
<li>打电话是同步操作，发短信是异步操作</li>
<li>程序世界中：定时器、Ajax、文件操作 是典型的异步的。</li>
<li>Node.js 所有的会发生阻塞的操作都是异步的，主要是文件操作和网络操作</li>
</ol>
</li>
<li>I/O：可以理解为从输入到输出之间的转化过程</li>
<li>对于耗费时间的任务 Node.js 把这个任务和任务执行完的回调函数，下达给了操作系统（这么理解），放在任务队列（Event Loop）的最后一个，让它去执行</li>
<li>效率最高：专注于做一件事，这件事做完之后马上再去做另外一件事情。</li>
<li>由于 Windows 和 *nix 平台的差异，Node 提供了libuv 作为抽象封装层，保证上层的 Node 与下层的自定义线程池及 IOCP 之间各自独立</li>
</ol>
<h2 id="非阻塞的优势"><a href="#非阻塞的优势" class="headerlink" title="非阻塞的优势"></a>非阻塞的优势</h2><ol>
<li>提高代码的响应效率</li>
<li>充分利用单核CPU</li>
<li>改善I/O的不可预测带来的问题</li>
<li>但是目前市面上大多数都是多核 CPU，不能很好利用多核，一般运用虚拟化技术把多核 CPU 虚拟城单核机</li>
</ol>
<h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><ol start="12">
<li>进程和线程 <ol>
<li>进程是一个更大的单位，线程更小</li>
<li>进程：每一个<strong>正在运行</strong>的应用程序都至少有一个进程，它给应用程序提供运行环境，是操作系统为应用程序分配资源的一个单位。</li>
<li>线程：用来执行代码，一个进程内部可以有很多线程，一个线程同时只能干一件事情</li>
<li>传统的开发方式大部分的I/O都是阻塞的，小更多的线程来更好的利用硬件资源</li>
<li>多线程的缺点<ol>
<li>线程之间共享某些数据，同步起来很麻烦</li>
<li>更致命的是：（主要单核CPU的问题，伪多线程）<ol>
<li>创建线程耗费</li>
<li>线程数量有限，线程初始化空间 2M 已经很大了，这个占得是内存</li>
<li>虽然多线程，但是还是只有一个CPU</li>
<li>CPU 在不同线程之间转换，有个上下文转换，非常耗费时间。（Node最大的性能优势）</li>
</ol>
</li>
</ol>
</li>
<li>例如： node 进程启动之后，会默认创建一个线程，用于执行我们的代码，一般是叫main thread。</li>
</ol>
</li>
<li>在chrome 的控制台中，按shift + return 可以换行写代码。</li>
<li>异步回调的问题：嵌套过深；回调黑洞（里层调用外层内容，形成死循环）。——Promise解决回调嵌套的问题。<ol>
<li>不容易阅读</li>
<li>不容易调试：断点不容易打</li>
<li>不容易维护：加一个功能难</li>
</ol>
</li>
<li>V8 引擎的一个最主要特点就是单线程</li>
</ol>
<hr>
<h2 id="事件驱动和非阻塞，Node-js-如何利用单线程"><a href="#事件驱动和非阻塞，Node-js-如何利用单线程" class="headerlink" title="事件驱动和非阻塞，Node.js 如何利用单线程"></a>事件驱动和非阻塞，Node.js 如何利用单线程</h2><ol>
<li>Node.js 主线程之外，内部有一个事件队列</li>
<li>Node 的执行过程有一个事件循环，事件循环回去判断是不是有阻塞操作，阻塞的就安排到 Node 底层的 Thread Pool 线程池中</li>
<li>所以对于编程Node是单线程的，实际底层运行的时候它还是多线程的，用多线程来执行那些阻塞的操作。</li>
<li>为了避免线程创建耗费资源 Node 的多线程是实现创建好，放在 THread Pool 中的。</li>
<li>专业一点的表述<ol>
<li>Node平台将一个任务联通该任务的回调函数放到一个事件循环系统中；</li>
<li>事件循环高效的管理系统线程池同时高效执行每一个任务</li>
<li>当任务完成过后自动执行回调函数</li>
<li>Node 将所有的阻塞操作交给了内部实现的线程池</li>
<li>Node.js 本身主线程主要就是不断地往返调度</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 实现一个简单的区块链</title>
    <url>/2020/06/02/temp/Node.js%20%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
    <content><![CDATA[<h1 id="Node-js-实现一个简单的区块链"><a href="#Node-js-实现一个简单的区块链" class="headerlink" title="Node.js 实现一个简单的区块链"></a>Node.js 实现一个简单的区块链</h1><h3 id="blockchain-js"><a href="#blockchain-js" class="headerlink" title="blockchain.js"></a>blockchain.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> initBlock <span class="token operator">=</span> <span class="token punctuation">{</span> 
  index<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  prevHash<span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>
  hash<span class="token punctuation">:</span> <span class="token string">'000076b0b009d79eea894aedcaa2325c2984fef49f3c53a3b5fcbc48a581cc52'</span><span class="token punctuation">,</span>
  timestamp<span class="token punctuation">:</span> <span class="token number">1550374969656</span><span class="token punctuation">,</span>
  nonce<span class="token punctuation">:</span> <span class="token number">5492</span> 
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Blockchain</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>blockchain <span class="token operator">=</span> <span class="token punctuation">[</span>initBlock<span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>difficulty <span class="token operator">=</span> <span class="token number">6</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 获取最新区块</span>
  <span class="token function">getLastBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>blockchain<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">balance</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> balance <span class="token operator">=</span>  <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>block <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> 
      <span class="token punctuation">}</span>
      block<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>trans <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>address <span class="token operator">===</span> trans<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          balance <span class="token operator">-</span><span class="token operator">=</span> trans<span class="token punctuation">.</span>amount
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>address <span class="token operator">===</span> trans<span class="token punctuation">.</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          balance <span class="token operator">+</span><span class="token operator">=</span> trans<span class="token punctuation">.</span>amount
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> balance
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 挖矿 打包交易</span>
  <span class="token function">mine</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 挖矿结束 矿工奖励 每次挖矿成功给 100</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> newBlock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateNewBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 区块合法，并且区块链合法，就新增一下</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidBlock</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">return</span> newBlock
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error, Invalid Block'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">generateNewBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 1. 生成新区块</span>
    <span class="token comment" spellcheck="true">// 2. 不停的计算 hash 直到符合条件的哈希值，获得记账权</span>
    <span class="token keyword">let</span> nonce <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span>length <span class="token comment" spellcheck="true">// 区块索引值</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data
    <span class="token keyword">const</span> prevHash <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLastBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hash
    <span class="token keyword">let</span> timestamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> hash  <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computeHash</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> prevHash<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span>data<span class="token punctuation">,</span> nonce<span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>difficulty<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'0'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nonce <span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span>
      hash  <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computeHash</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> prevHash<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span>data<span class="token punctuation">,</span> nonce<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mine'</span><span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      index<span class="token punctuation">,</span>
      data<span class="token punctuation">,</span>
      prevHash<span class="token punctuation">,</span>
      hash<span class="token punctuation">,</span>
      timestamp<span class="token punctuation">,</span>
      nonce
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">computeHashForBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computeHash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>index<span class="token punctuation">,</span> block<span class="token punctuation">.</span>prevHash<span class="token punctuation">,</span> block<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span> block<span class="token punctuation">.</span>data<span class="token punctuation">,</span> block<span class="token punctuation">.</span>nonce<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">computeHash</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> prevHash<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> nonce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> crypto
      <span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>index <span class="token operator">+</span> prevHash <span class="token operator">+</span> timestamp <span class="token operator">+</span> data <span class="token operator">+</span> nonce<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">isValidBlock</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">,</span> lastBlock<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLastBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 区块的 index = 最新区块的index + 1</span>
    <span class="token comment" spellcheck="true">// 新区块的timestamp 大于最后一个区块</span>
    <span class="token comment" spellcheck="true">// 最新区块的 prevHash = 最后一个区块的 hash</span>
    <span class="token comment" spellcheck="true">// 区块的 hash 值 符合难度要求</span>
    <span class="token comment" spellcheck="true">// 新区快 hash 计算正确</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> newBlock<span class="token punctuation">.</span>index <span class="token operator">!==</span> lastBlock<span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newBlock<span class="token punctuation">.</span>timestamp <span class="token operator">&lt;=</span> lastBlock<span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newBlock<span class="token punctuation">.</span>prevHash <span class="token operator">!==</span> lastBlock<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newBlock<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>difficulty<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'0'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newBlock<span class="token punctuation">.</span>hash <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computeHashForBlock</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>

  <span class="token function">isValidChain</span><span class="token punctuation">(</span>chain<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>blockchain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 校验除了创世区块之外的区块</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>chain<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isValidBlock</span><span class="token punctuation">(</span>chain<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> chain<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error, Invalid Chain'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 校验创世区块</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>chain<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>initBlock<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error, Invalid Genesis Block'</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>

  <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">from</span> <span class="token operator">!==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 交易非挖矿</span>
      <span class="token keyword">const</span> balance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">balance</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&lt;</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'not enough balance'</span><span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> balance<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 签名校验（后面完成）</span>
    <span class="token keyword">const</span> transObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> amount<span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>transObj<span class="token punctuation">)</span>
    <span class="token keyword">return</span> transObj
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// let bc = new Blockchain()</span>
<span class="token comment" spellcheck="true">// bc.mine()</span>
<span class="token comment" spellcheck="true">// bc.blockchain[1].nonce = '3123123'</span>
<span class="token comment" spellcheck="true">// bc.mine()</span>
<span class="token comment" spellcheck="true">// bc.mine()</span>
<span class="token comment" spellcheck="true">// bc.mine()</span>
<span class="token comment" spellcheck="true">// bc.mine()</span>
<span class="token comment" spellcheck="true">// console.log(bc.blockchain)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Blockchain</code></pre>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vorpal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vorpal'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Blockchain <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./blockchain'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> blockchain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blockchain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Table <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cli-table'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  head<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'TH 1 label'</span><span class="token punctuation">,</span> <span class="token string">'TH 2 label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  colWidths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 原始值: [{name: 'woniu', age: 18}, {name: 'imooc', age: 22}]</span>
<span class="token keyword">function</span> <span class="token function">formatLog</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">=</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> first <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> head <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>
  <span class="token keyword">const</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    head<span class="token punctuation">:</span> head<span class="token punctuation">,</span>
    colWidths<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>h <span class="token operator">=</span><span class="token operator">></span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  table<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>res<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

vorpal
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'balance &lt;address>'</span><span class="token punctuation">,</span> <span class="token string">'查询余额'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> balance <span class="token operator">=</span> blockchain<span class="token punctuation">.</span><span class="token function">balance</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>address<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">formatLog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>address<span class="token punctuation">:</span> args<span class="token punctuation">.</span>address<span class="token punctuation">,</span> balance<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

vorpal
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'detail &lt;index>'</span><span class="token punctuation">,</span> <span class="token string">'查看区块详情'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> block <span class="token operator">=</span> blockchain<span class="token punctuation">.</span>blockchain<span class="token punctuation">[</span>args<span class="token punctuation">.</span>index<span class="token punctuation">]</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

vorpal
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'trans &lt;from> &lt;to> &lt;amount>'</span><span class="token punctuation">,</span> <span class="token string">'挖矿'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> trans <span class="token operator">=</span> blockchain<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>to<span class="token punctuation">,</span> args<span class="token punctuation">.</span>amount<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>trans<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">formatLog</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

vorpal
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'mine &lt;address>'</span><span class="token punctuation">,</span> <span class="token string">'挖矿'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newBlock <span class="token operator">=</span> blockchain<span class="token punctuation">.</span><span class="token function">mine</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>address<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">formatLog</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

vorpal
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'chain'</span><span class="token punctuation">,</span> <span class="token string">'查看区块链'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">formatLog</span><span class="token punctuation">(</span>blockchain<span class="token punctuation">.</span>blockchain<span class="token punctuation">)</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Welcome to ljw-block-chain'</span><span class="token punctuation">)</span>

vorpal<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'help'</span><span class="token punctuation">)</span>

vorpal
  <span class="token punctuation">.</span><span class="token function">delimiter</span><span class="token punctuation">(</span><span class="token string">'ljw-block-chain => '</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 CSS</title>
    <url>/2020/06/02/temp/css/</url>
    <content><![CDATA[<h2 id="flex-容器属性"><a href="#flex-容器属性" class="headerlink" title="flex 容器属性"></a>flex 容器属性</h2><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><ol>
<li>注意 flex 容器不是块状元素</li>
<li>属性值<ol>
<li><code>display: flex;</code></li>
<li><code>display: inline-flex;</code></li>
</ol>
</li>
</ol>
<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><ol>
<li>主轴方向</li>
<li>属性值<ol>
<li>row 横排从左到右</li>
<li>row-reserve 横排从右到左</li>
<li>column 纵排从上到下</li>
<li>column-reverse 纵排从下到上</li>
</ol>
</li>
</ol>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><ol>
<li>换行</li>
<li>属性值<ol>
<li>nowrap （默认值）单行显示</li>
<li>wrap 多行显示，换行</li>
</ol>
</li>
</ol>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><ol>
<li>主轴方向排列方式，对齐方式</li>
<li>用于在主轴上对齐伸缩项目。这一行为会在所有可伸缩长度及所有自动边距均被解释后进行。著作权归作者所有。商业转载请联系作者获得授权,非商业转载请注明出处。当一行上的所有伸缩项目都不能伸缩或可伸缩但是已经达到其最大长度时，这一属性才会对多余的空间进行分配。著作权归作者所有。商业转载请联系作者获得授权,非商业转载请注明出处。</li>
<li>属性值<ol>
<li>flex-start: 伸缩项目向一行的起始weizhi</li>
<li>flex-end</li>
<li>center: 主轴方向居中</li>
<li>space-between：主轴方向内容分居两侧，其他内容的间距平均分配剩余的空间</li>
<li>space-around：主轴方向内容的间距平均分配生育的空间</li>
</ol>
</li>
</ol>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><ol>
<li>侧轴对齐方式</li>
<li>属性值： <ol>
<li>flex-start</li>
<li>flex-end</li>
<li>center</li>
<li>stretch</li>
<li>baseline</li>
</ol>
</li>
</ol>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><ol>
<li>当伸缩容器的侧轴还有多余空间时，用来调整伸缩行在伸缩容器里的对其方式</li>
<li>只有多行的伸缩容器才会在侧轴上有多余的空间以供对齐，因为仅包含一行的伸缩容器中，唯一的一行会自动伸展填充全部的空间。著作权归作者所有。商业转载请联系作者获得授权,非商业转载请注明出处。</li>
<li>属性值： <ol>
<li>flex-start</li>
<li>flex-end</li>
<li>center</li>
<li>stretch</li>
<li>baseline</li>
</ol>
</li>
</ol>
<h2 id="flex-项目属性"><a href="#flex-项目属性" class="headerlink" title="flex 项目属性"></a>flex 项目属性</h2><p>order 顺序</p>
<p>flex-grow 扩张</p>
<p>Flex-shrink 缩小</p>
<p>flex-basis 基础值</p>
<p>flex flex-grow 和 fl</p>
<p>align-self 对齐方式</p>
<h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>控制项目的摆放顺序，默认值为 0， 可以为负数，值越小项目越靠前拜访。</p>
<h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p>容器宽度（row）超过所有项目宽度之和的时候，项目是不是需要拉伸。</p>
<p>控制项目的放大比例，默认为0，不放大。</p>
<p>值得注意的是，放大的比例是相对于剩余空间而言，而不是项目自己的大小，分得剩余空间相应比例加到自身宽度或高度上。</p>
<h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><p>容器宽度不能容纳所有项目的时候，每个项目是不是要缩小，</p>
<p>控制项目缩小比例，默认值为1，同比缩小。</p>
<p>缩小比例也是按照剩余空间。</p>
<p>？搜死的骆驼比马大</p>
<p>Flex-shrink ：0 表示不缩小</p>
<h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><p>若横轴为主轴，flex-basis 可以当做width 来用；</p>
<p>若纵轴是主轴，flex-basis 可以当做 height 来使用</p>
<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>Flex 是 flex-grow flex-shrink flex-basis 三个属性的缩写</p>
<p>flex: 1 代表flex-grow: 1 加上 flex-shrink: 1 加上 flex-basis: 0%。子元素一个flex：1，父元素给个宽度，直接等宽布局。</p>
<h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p>控制自身在侧轴方向的对齐方式。</p>
<h2 id="多行文本省略显示"><a href="#多行文本省略显示" class="headerlink" title="多行文本省略显示"></a>多行文本省略显示</h2><h4 id="所有浏览器兼容的方法"><a href="#所有浏览器兼容的方法" class="headerlink" title="所有浏览器兼容的方法"></a>所有浏览器兼容的方法</h4><pre><code>p {
width: 300px;
position: relative;
line-height: 1.5em;
height: 1.5em;
overflow: hidden;
}
p:after {
content: &#39;...&#39;;
position: absolute;
bottom: 0;
right: 0;
padding: 0 5px;
background-color: #fff;
}</code></pre><h2 id="CSS-瀑布流"><a href="#CSS-瀑布流" class="headerlink" title="CSS 瀑布流"></a>CSS 瀑布流</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token class">.grid</span> </span><span class="token punctuation">{</span>
      <span class="token property">-webkit-column-count</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>
      <span class="token property">-webkit-column-gap</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
      <span class="token property">-webkit-column-fill</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
      <span class="token property">-moz-column-count</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>
      <span class="token property">-moz-column-gap</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
      <span class="token property">-moz-column-fill</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
      <span class="token property">column-count</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>
      <span class="token property">column-gap</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
      <span class="token property">column-fill</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.block</span> </span><span class="token punctuation">{</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ee01ca</span><span class="token punctuation">;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
      <span class="token property">word-wrap</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span>
      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
      <span class="token property">-webkit-column-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>
      <span class="token property">-moz-column-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>
      <span class="token property">column-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.one</span> </span><span class="token punctuation">{</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.two</span> </span><span class="token punctuation">{</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.three</span> </span><span class="token punctuation">{</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ervewrv<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>afrvewrwerb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfvdsf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>vdfvdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfw45g4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ervewrv<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>afrvewrwerb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfvdsf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>vdfvdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfw45g4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv4r<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv454<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv4r<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv454<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ervewrv<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ervewrv<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>afrvewrwerb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfvdsf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>vdfvdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfw45g4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv4r<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv454<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ervewrv<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>afrvewrwerb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfvdsf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>vdfvdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfw45g4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv4r<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv454<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>afrvewrwerb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfvdsf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>vdfvdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfw45g4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ervewrv<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>afrvewrwerb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfvdsf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>vdfvdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dfw45g4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv4r<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv454<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv4r<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>block one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4rv454<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h2 id="label-的使用"><a href="#label-的使用" class="headerlink" title="label 的使用"></a>label 的使用</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui_button ui_button_primary<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xFile<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">clip</span><span class="token punctuation">:</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>
<h2 id="a-标签各种状态"><a href="#a-标签各种状态" class="headerlink" title="a 标签各种状态"></a>a 标签各种状态</h2><ul>
<li>a:link    {color:blue;}</li>
<li>a:visited {color:blue;}</li>
<li>a:hover   {color:red;}</li>
<li>a:active  {color:yellow;}</li>
</ul>
<h2 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h2><h3 id="动画的使用"><a href="#动画的使用" class="headerlink" title="动画的使用"></a>动画的使用</h3><h4 id="定义关键帧"><a href="#定义关键帧" class="headerlink" title="定义关键帧"></a>定义关键帧</h4><pre><code>-webkit- @keyframes 必须有的动画名称{
    from{background:red;}
    to{background:yellow;}
}</code></pre><p>####使用动画</p>
<pre><code>div{
    -webkit-animation: 动画名称 2s;
}</code></pre><ol>
<li>animation-name: 动画名称，必填</li>
<li>animation-duration: 动画时间，必填</li>
<li>animation-timing-function:  缓动函数<ol>
<li>linear 匀速</li>
<li>ease 缓冲</li>
<li>ease-in 由慢到快</li>
<li>后面还有很多；</li>
</ol>
</li>
<li>animation-delay: 动画延迟</li>
<li>animation-itereation-count: 动画重复进行的次数</li>
<li>animation-play-state:;</li>
</ol>
<h3 id="关键帧的两种写法"><a href="#关键帧的两种写法" class="headerlink" title="关键帧的两种写法"></a>关键帧的两种写法</h3><h4 id="第一种-from-和-to"><a href="#第一种-from-和-to" class="headerlink" title="第一种 from 和 to"></a>第一种 from 和 to</h4><pre><code>-webkit- @keyframes 必须有的动画名称{
    from{background:red;}
    to{background:yellow;}
}</code></pre><h4 id="第二种-百分数"><a href="#第二种-百分数" class="headerlink" title="第二种 百分数"></a>第二种 百分数</h4><pre><code>-webkit- @keyframes 必须有的动画名称{
    0%{background:red;}
    20%{background:orange;}
    50%{background:yellow;}
    70%{background:green;}
    100%{background:blue;}    
}
div{
    -webkit- animation: 动画名称 持续时间 linear;
}</code></pre><h3 id="js-控制-css-动画"><a href="#js-控制-css-动画" class="headerlink" title="js 控制 css 动画"></a>js 控制 css 动画</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><pre><code>ocss +=&quot;keyframes change{
    from{background:black}
    to{background:yellow}
}&quot;
var span =  document.getElementsByTagName(&quot;span&quot;);
span[1].style.webkitanimation = &quot;change 3s&quot;</code></pre><h4 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h4><pre><code>obj.addEventListener(&quot;webkitAnimationEnd&quot;,function(){

});</code></pre>]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs 常见操作符</title>
    <url>/2020/06/02/temp/Rxjs%20%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    <content><![CDATA[<p>在思考维度上，添加时间的考量。</p>
<p>把事件想象成随着时间变化的流。</p>
<p>流主动把事件推给你，不像传统编程我们要不同去拉。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> length$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 下面的代码等同于 Rx.Observable.fromEvent(width, 'keyup').map(ev => ev.target.value);</span>
<span class="token keyword">const</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//const area$ = Rx.Observable.combineLatest(length$, width$, (l, w) => {return l*w});</span>
<span class="token keyword">const</span> area$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>length$<span class="token punctuation">,</span> width$<span class="token punctuation">,</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> l<span class="token operator">*</span>w<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
area$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> area<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="常见操作符（一）"><a href="#常见操作符（一）" class="headerlink" title="常见操作符（一）"></a>常见操作符（一）</h2><h3 id="常见的创建类操作符"><a href="#常见的创建类操作符" class="headerlink" title="常见的创建类操作符"></a>常见的创建类操作符</h3><ol>
<li>from：把数组、Promise、以及 Iterable 转化为 Observable，例如 <code>Rx.Observable.from([1, 2, 3, 4])</code></li>
<li>fromEvent：把事件转化为 Observable</li>
<li>of：接受一系列的数据并把它们 emit 出去，例如 <code>Rx.Observable.of({id:1,value:20},{id:2,value:30})</code></li>
</ol>
<h3 id="常见转换类操作符"><a href="#常见转换类操作符" class="headerlink" title="常见转换类操作符"></a>常见转换类操作符</h3><ol>
<li>map：对原始流中的元素进行处理，映射成新的元素</li>
<li>mapTo：将流的值变成一个常量，例如上面的例子 <code>Rx.Observable.fromEvent(width, &#39;keyup&#39;).mapTo(1)</code>，等不关心一个点击事件的内容，只关心事件发生了的时候可以用，等同于 <code>Rx.Observable.fromEvent(width, &#39;keyup&#39;).map(_ =&gt; 1)</code></li>
<li>pluck：</li>
</ol>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>新建一个 quote.module.ts</p>
<pre><code>export interface Quote {
  id?: string;
  cn: string;
  pic: string;
  en: string
}</code></pre><p>在根目录下建立 mock 文件夹和 data.json 文件</p>
<pre><code>{
  &quot;quotes&quot;: [
    {
      &quot;id&quot;: 1,
      &quot;cn&quot;: &#39;ads&#39;,
      &quot;en&quot;: &#39;adfs&#39;,
      &quot;pic&quot;: &#39;/abc_hello.png&#39;
    }
  ]
}</code></pre><p>敲击<code>json-server ./mock</code></p>
<p>新建 quote.service.ts，快捷方式 <code>ng-service</code></p>
<pre><code>import { Injectable, Inject } from &#39;@angular/core&#39;;
import { Http } from &#39;@angular/http&#39;
import { Observable } from &#39;rxjs/Observable&#39;;
import { Quote } from &#39;../domain/quote.model&#39;;

@Injectable()
export class QuoteService {
  constructor(
      private http: Http,
      @Inject(&#39;BASE_CONFIG) private config
  ) {}

  getQuote():Observable&lt;Quote&gt; {
      const uri = `${this.config.uri}/quote/Math.floor(${Math.random()*10)}`
    return this.http.get(uri)
        .map(res =&gt; res.json() as Quote)
  }
}</code></pre><p>修改 services 目录下的 services.module.ts 文件</p>
<pre><code>import {NgModule,ModuleWithProviders} from &#39;@angular/core&#39;;
import { CommonModule } from &#39;@angular/common&#39;;
import { QuoteService } from &#39;./quote.service&#39;;

@NgModule()
export class ServicesModule {
  static forRoot(): ModuleWithProviders {
    return {
      ngModule: ServiceModule,
      providers: [QuoteService]
    }
  }
}</code></pre><p>在 CoreModule 的 @NgModule 中添加一个 provider</p>
<pre><code>...
providers: [
  {provide: &#39;BASE_CONFIG&#39;, useValue: {
      uri: &#39;http://localhost:3000&#39;
  }}
]
...</code></pre><p>修改loginComponent，在 constructor 中添加 <code>private quoteService$:QuoteService</code>，生命一个变量 <code>quote: Quote</code>    继续修改constructor，注意，要给 quote 一个初始只，防止网络不通的时候</p>
<pre><code>this.quoteService$
    .getQuote()
    .subscribe(q =&gt; this.quote = q);</code></pre><h2 id="常见操作符（二）"><a href="#常见操作符（二）" class="headerlink" title="常见操作符（二）"></a>常见操作符（二）</h2><h3 id="Observable-的性质"><a href="#Observable-的性质" class="headerlink" title="Observable 的性质"></a>Observable 的性质</h3><ol>
<li>next：</li>
<li>error：</li>
<li>Complete：</li>
<li>特殊的 <ol>
<li>永不结束</li>
<li>Never（不结束，也不发射）</li>
<li>Empty（结束但不发射）</li>
<li>Throw（直接进入error 状态）</li>
</ol>
</li>
</ol>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ol>
<li>工具类操作符：do</li>
<li>变换类操作符：scan</li>
<li>数学类操作符：reduce</li>
<li>过滤类操作符： filter, take, first/last, skip</li>
<li>创建类操作符：Interval, Timer</li>
</ol>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>subscribe 可以接受三个<strong>函数</strong>作为参数</p>
<pre class=" language-Js"><code class="language-Js">const interval$ = Rx.Observable.interval(100).take(3);
interval$.subscribe(
    val => console.log(val),
    err => console.log(err),
    () => console.log('I am complete')
)</code></pre>
<h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// const timer$ = Rx.Observable.timer(100);</span>
<span class="token keyword">const</span> timer$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
timer$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="例子-do"><a href="#例子-do" class="headerlink" title="例子 - do"></a>例子 - do</h3><p>do 可以作为一个跟外部进行一些交互，做一些处理</p>
<pre><code>const logLabel = &#39;当前的·值改变了&#39;;
const interval$ = Rx.Observable.interval(100)
    .map(val =&gt; val * 2)
    .do(v =&gt; console.log(logLabel + v))
    .take(3);
interval$.subscribe(val =&gt; console.log(val));</code></pre><h3 id="例子-filter"><a href="#例子-filter" class="headerlink" title="例子 - filter"></a>例子 - filter</h3><p>本来应该 0，1，2 结束，现在变成0，1，2，3，4</p>
<pre><code>const logLabel = &#39;当前的·值改变了&#39;;
const interval$ = Rx.Observable.interval(100)
    .filter(val =&gt; val % 2 === 0)
    .do(v =&gt; console.log(logLabel + v))
    .take(3);
interval$.subscribe(val =&gt; console.log(val));</code></pre><h3 id="例子-first-和-last"><a href="#例子-first-和-last" class="headerlink" title="例子 - first 和 last"></a>例子 - first 和 last</h3><p>.first 和 .take(1)</p>
<p>无穷序列的last() 是永远不会结束的，认为制造出了 empty，无法发射值</p>
<pre><code>const interval$ = Rx.Observable.interval(100)
    .filter(val =&gt; val % 2 === 0)
    .first()
interval$.subscribe(
    val =&gt; console.log(val),
    err =&gt; console.log(err),
    () =&gt; console.log(&#39;completed)
)</code></pre><h3 id="例子-skip"><a href="#例子-skip" class="headerlink" title="例子 - skip"></a>例子 - skip</h3><pre><code>const interval$ = Rx.Observable.interval(100)
    .filter(val =&gt; val % 2 === 0)
    .skip(2)
interval$.subscribe(
    val =&gt; console.log(val),
    err =&gt; console.log(err),
    () =&gt; console.log(&#39;completed)
)</code></pre><h3 id="例子-scan"><a href="#例子-scan" class="headerlink" title="例子 - scan"></a>例子 - scan</h3><p>接受一个函数作为参数 ，第一个参数是累加结果，y 是序列的新值</p>
<pre><code>const interval$ = Rx.Observable.interval(100)
    .filter(val =&gt; val % 2 === 0)
    .scan((x, y) =&gt; return x + y) 
    .take(4)
interval$.subscribe(
    val =&gt; console.log(val),
    err =&gt; console.log(err),
    () =&gt; console.log(&#39;completed)
)</code></pre><h1 id="其他高阶操作符"><a href="#其他高阶操作符" class="headerlink" title="其他高阶操作符"></a>其他高阶操作符</h1><h2 id="mergeMap-和-switchMap"><a href="#mergeMap-和-switchMap" class="headerlink" title="mergeMap 和 switchMap"></a>mergeMap 和 switchMap</h2><p>删除文章的时候，后台要同时删除文章下面的评论，如果连续两个删除文章请求，服务器收到第二个请求的话，如果要继续删除第一篇文章的数据，就是mergeMap，如果不再删除第一篇的数据了，直接去删除第二篇的数据的话，就用 switchMap。 </p>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>命名规范等</title>
    <url>/2020/06/02/temp/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E7%AD%89/</url>
    <content><![CDATA[<h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>eslint</p>
<p>stylelint</p>
<h2 id="JS-推荐写法"><a href="#JS-推荐写法" class="headerlink" title="JS 推荐写法"></a>JS 推荐写法</h2><h3 id="3-1、每个常量都需命名"><a href="#3-1、每个常量都需命名" class="headerlink" title="3.1、每个常量都需命名"></a>3.1、每个常量都需命名</h3><h3 id="3-2、推荐使用字面量"><a href="#3-2、推荐使用字面量" class="headerlink" title="3.2、推荐使用字面量"></a>3.2、推荐使用字面量</h3><p>创建对象和数组推荐使用字面量，因为这不仅是性能最优也有助于节省代码量。 </p>
<p>推荐：</p>
<pre><code>let obj = {   
     name:&#39;tom&#39;,     
     age:15,     
     sex:&#39;男&#39; 
}</code></pre><p>不推荐：</p>
<pre><code>let obj = {};
obj.name = &#39;tom&#39;;
obj.age = 15;
obj.sex = &#39;男&#39;;复制代码</code></pre><h3 id="3-3、对象设置默认属性的推荐写法"><a href="#3-3、对象设置默认属性的推荐写法" class="headerlink" title="3.3、对象设置默认属性的推荐写法"></a>3.3、对象设置默认属性的推荐写法</h3><p>推荐：</p>
<pre><code>const menuConfig = {
  title: &quot;Order&quot;,
  // User did not include &#39;body&#39; key
  buttonText: &quot;Send&quot;,
  cancellable: true
};

function createMenu(config) {
  config = Object.assign(
    {
      title: &quot;Foo&quot;,
      body: &quot;Bar&quot;,
      buttonText: &quot;Baz&quot;,
      cancellable: true
    },
    config
  );

  // config now equals: {title: &quot;Order&quot;, body: &quot;Bar&quot;, buttonText: &quot;Send&quot;, cancellable: true}
  // ...
}

createMenu(menuConfig);
复制代码</code></pre><p>不推荐：</p>
<pre><code>const menuConfig = {
  title: null,
  body: &quot;Bar&quot;,
  buttonText: null,
  cancellable: true
};

function createMenu(config) {
  config.title = config.title || &quot;Foo&quot;;
  config.body = config.body || &quot;Bar&quot;;
  config.buttonText = config.buttonText || &quot;Baz&quot;;
  config.cancellable =
    config.cancellable !== undefined ? config.cancellable : true;
}

createMenu(menuConfig);</code></pre><h3 id="3-4-命名规范"><a href="#3-4-命名规范" class="headerlink" title="3.4 命名规范"></a>3.4 命名规范</h3><table>
<thead>
<tr>
<th>can</th>
<th>判断是否可执行某个动作</th>
</tr>
</thead>
<tbody><tr>
<td>has</td>
<td>判断是否含有某个值</td>
</tr>
<tr>
<td>is</td>
<td>判断是否为某个值</td>
</tr>
<tr>
<td>get</td>
<td>获取某个值</td>
</tr>
<tr>
<td>set</td>
<td>设置某个值</td>
</tr>
</tbody></table>
<blockquote>
<p>布尔值或者返回值是布尔类型的函数，命名以 <code>is</code> <code>has</code> <code>should</code> 开头：</p>
</blockquote>
<pre class=" language-text"><code class="language-text">// Dirty
const done = current >= goal;
// Clean
const isComplete = current >= goal;</code></pre>
<blockquote>
<p>函数以其效果命名，而不是怎么做的来命名</p>
</blockquote>
<pre class=" language-text"><code class="language-text">// Dirty
const loadConfigFromServer = () => {
  ...
};
// Clean
const loadConfig = () => {
  ...
};</code></pre>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>rem 适配简单原理</title>
    <url>/2020/06/02/temp/rem%20%E9%80%82%E9%85%8D%E7%AE%80%E5%8D%95%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>假如 设计图尺寸 375px</p>
<p>设置 1rem = 10px</p>
<p>有一个 50px 的元素</p>
<p>适配一个 360px 的屏幕，适配一个 480px 的屏幕</p>
<p>375px / 360px = 5rem * 10px/1rem / 5rem * Xpx/1rem</p>
<p>375px / 480px = 5rem * 10px/1rem / 5rem * Ypx/1rem</p>
<p>得出公示</p>
<p>设计图宽度 / 手机屏幕宽度 =  measuredSize / htmlFontSize</p>
<p>htmlFontSize = measuredSize * 手机屏幕宽度 / 设计图宽度</p>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>temp/基础数据类型与引用数据类型</title>
    <url>/2020/06/02/temp/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="基础数据类型与引用数据类型"><a href="#基础数据类型与引用数据类型" class="headerlink" title="基础数据类型与引用数据类型"></a>基础数据类型与引用数据类型</h1><hr>
<p>title: 基础数据类型与引用数据类型<br>date:<br>categories:</p>
<ul>
<li>临时<br>tags:</li>
<li>临时</li>
</ul>
<hr>
<blockquote>
<p>数据类型：存储的时候分配多少内存，读取的时候怎么处理二进制数据</p>
</blockquote>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在人的角度看</p>
<p>固定的是名字，变化的是名字对应的值</p>
<p>在计算机的角度看</p>
<p>固定的是地址，变化的地址里边存储的数据</p>
<p>内存可以看做一本很厚很厚的书，每一页有一个编号（相当于地址），可以通过编号查看书写折页纸上的内容</p>
<h2 id="认识数组"><a href="#认识数组" class="headerlink" title="认识数组"></a>认识数组</h2><h3 id="数组的名与实"><a href="#数组的名与实" class="headerlink" title="数组的名与实"></a>数组的名与实</h3><ul>
<li>数组的“实”是一块地址连续的内存，像一个本子里连续的10几页</li>
<li>数组的名指向这个连续内存的第一个内存地址</li>
<li>数组的变量与基本变量一样，本身存储一个地址。但是与基本变量不一样的是，数组变量名指向的地址是数组的第一个地址</li>
<li>数组变量保存的并不是数组，而是数组的地址的第一个</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>构建自己的网站</title>
    <url>/2020/06/02/temp/%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h2 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h2><ol>
<li>别用万网，监管严格，而且是奸商（第一年免费，续费越来越贵，向外转很贵），别用.cn域名</li>
<li>国外域名注册商推荐：godaddy, namecheap， 衡天主机（推荐送whois保护）</li>
<li>whois保护,信息，电话，邮箱等公开信息变成注册商的信息</li>
<li>奇葩的域名tt和xyz和io和fm</li>
<li>推荐超级便宜的国际域名注册商namesilo，优势很明显：价格很便宜、支持visa信用卡、paypal、支付宝付款；免费赠送whois保护，免费赠送域名停靠服务，还可享受优惠码。</li>
</ol>
<h2 id="网站主机"><a href="#网站主机" class="headerlink" title="网站主机"></a>网站主机</h2><ol>
<li>virtual host 虚拟主机，层次较低，限制流量</li>
<li>VPS 虚拟专用服务器，权限较高，DIY网络的性能</li>
<li>独立服务器，整个服务器都是你的</li>
<li>CDN=Content Distribution Net个人分发网络，服务器集群</li>
<li>服务器系统：Windows Server和linux</li>
<li>Linux虚拟主机是主流</li>
<li>推荐香港的衡天主机：速度快，不用备案</li>
<li>美国的虚拟主机，硬件好，性价比不高</li>
<li>VPS复杂，VPS一键安装包，amh简单、Inmp一键安装包</li>
<li>虚拟主机是个共享的ip地址，容易被封掉</li>
</ol>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>编程原则</title>
    <url>/2020/07/09/temp/%E7%BC%96%E7%A8%8B%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<ul>
<li>DRY（不要重复自己，don’t repeat yourself）</li>
<li>高内聚低耦合（loose coupling high cohesion）</li>
<li>YAGNI （你不会用到它的，ya ain’t gonna need it）</li>
<li>最小意外原则（Principle of least surprise）</li>
<li>单一责任（single responsibility）</li>
</ul>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 stylus</title>
    <url>/2020/06/02/temp/%E5%AD%A6%E4%B9%A0%20stylus/</url>
    <content><![CDATA[<h4 id="package-json-中使用-stylus"><a href="#package-json-中使用-stylus" class="headerlink" title="package.json 中使用 stylus"></a>package.json 中使用 stylus</h4><pre class=" language-css"><code class="language-css"><span class="token selector">scripts: </span><span class="token punctuation">{</span>
  <span class="token string">'stylus'</span><span class="token punctuation">:</span> <span class="token string">'mkdir css &amp; stylus -m -w styl/ -o css/'</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="gulp-中使用-stylus"><a href="#gulp-中使用-stylus" class="headerlink" title="gulp 中使用 stylus"></a>gulp 中使用 stylus</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i gulp-stylus gulp-clean-css -D</code></pre>
<p>gulpfile.js</p>
<pre class=" language-javascript"><code class="language-javascript">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'stylus'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./styl/..'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">stylus</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string">'include css'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleanCSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      level<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      rebaseTo<span class="token punctuation">:</span> <span class="token string">'css/'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span>DEST <span class="token operator">+</span> 'css<span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="N-M-选择器"><a href="#N-M-选择器" class="headerlink" title="^[N..M] 选择器"></a>^[N..M] 选择器</h4><pre class=" language-css"><code class="language-css">a
  b
    c
      d 
        font-size <span class="token number">14</span>px
        <span class="token number">.</span>abc ^[-<span class="token number">1..</span>-<span class="token number">1</span>]<span class="token punctuation">:</span>hover
          color red</code></pre>
<h4 id="引用属性值"><a href="#引用属性值" class="headerlink" title="引用属性值"></a>引用属性值</h4><pre class=" language-css"><code class="language-css">p
  margin <span class="token number">10</span>px
  padding <span class="token punctuation">(</span>@margin / <span class="token number">2</span><span class="token punctuation">)</span></code></pre>
<p>场景： 已知宽高绝对居中</p>
<pre class=" language-css"><code class="language-css">#logo
position absolute
top <span class="token number">50%</span>
left <span class="token number">50%</span>
width <span class="token number">150</span>px
height <span class="token number">80</span>px
margin-left <span class="token function">-</span><span class="token punctuation">(</span>@width / <span class="token number">2</span><span class="token punctuation">)</span>
margin-top <span class="token function">-</span><span class="token punctuation">(</span>@height / <span class="token number">2</span><span class="token punctuation">)</span></code></pre>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>属性名里边用 n 要带上{}，属性值里边直接用</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">for n in 1<span class="token class">..10</span>
  <span class="token class">.col-</span></span><span class="token punctuation">{</span>n<span class="token punctuation">}</span>
    width <span class="token number">10%</span> * n</code></pre>
<p>使用场景：日历组件</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">for n in (0<span class="token class">..6</span>)
  saturday = 8 - n
  sunday = 9 - n
  &amp;<span class="token class">.empty-</span></span><span class="token punctuation">{</span>n<span class="token punctuation">}</span>
    <span class="token selector">flex n n 14<span class="token class">.285714</span>% * n
    min-width 14<span class="token class">.285714</span>% * n
    max-width 100%

    ~<span class="token pseudo-class">:nth-child</span>(7n + </span><span class="token punctuation">{</span>saturday<span class="token punctuation">}</span><span class="token selector">),
    ~<span class="token pseudo-class">:nth-child</span>(7n + </span><span class="token punctuation">{</span>sunday<span class="token punctuation">}</span><span class="token punctuation">)</span>
      color orange</code></pre>
<p>使用场景：spin 页面加载</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bar</span>
  animation suofang 1s ease-in-out infinite
  for n in 1<span class="token class">..5</span>
    &amp;<span class="token pseudo-class">:nth-child</span>(</span><span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">)</span>
      animation-delay <span class="token number">.1</span>s * n

@keyframe suofang
  <span class="token number">0%</span>
    transform <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">.2</span><span class="token punctuation">)</span>
  <span class="token number">50%</span>
    transform <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token number">100%</span>
    transform <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">.2</span><span class="token punctuation">)</span></code></pre>
<h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><pre class=" language-css"><code class="language-css">$need-support-ie = true
body
  if $need-support-ie 
    padding <span class="token number">5</span>px
  else
    margin <span class="token number">5</span>px</code></pre>
<h4 id="mixin-amp-functions"><a href="#mixin-amp-functions" class="headerlink" title="mixin &amp; functions"></a>mixin &amp; functions</h4><pre class=" language-css"><code class="language-css"><span class="token function">border-radius</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
  -webkit-border-radius n
  -moz-border-radius n
  border-radius n

form input[type=button]
  <span class="token function">border-radius</span><span class="token punctuation">(</span><span class="token number">5</span>px<span class="token punctuation">)</span> // function
  border-radius <span class="token number">5</span>px // mixin</code></pre>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime 使用</title>
    <url>/2020/06/02/tools/sublime%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<ol>
<li>[ctrl + p]是 go to anything<br> a. [/]之后直接跟地址<br> b. [:]之后接行号<br> c. [@]之后可以接选择器或者函数</li>
<li>多行游标功能：利用光标对他们进行整体修改。也可以选择“：{”修改的内容。<br> a. 光标移动到一个单词上，按快捷键 [Ctrl + D]，会选中当前单词，再按一次选中下一个单词，可以一直重复操作。[Ctrl + K]跳过当前选择，再按[Ctrl + D]，选择下一个。<br> b. 也可以使用[Ctrl]，然后用鼠标选择。<br> c. 选中第一个之后按快捷键 [Alt+ F3] 全选内容。<br> d. 选中之后按[Ctrl + Shift + L]，进行拆行。<br> e. 选择一个位置，然后按住[Shift]键，再拖动鼠标右键。</li>
<li>Ctrl + H 能够实现替换</li>
<li>命令模式<br> a. [ctrl + shift + P]启动命令模式<br> b. set syntax javascript，切换语法模式，支持模糊匹配，js就可以表示javascript<br> c. 可以减少记忆快捷键和使用鼠标</li>
<li>综合技巧演示<br> a. ctrl + N 新建工作区<br> b. ctrl + shift + P，打开命令模式<br> c. 输入ss html，通过模糊匹配，确定语法<br> d. [edit - tag - closetag]，闭合标记，快捷键为Alt + .<br> e. 输入感叹号，快捷键[ctrl + E]，直接输出一大段html代码（需要插件）<br> f. 输入[ctrl + P]，go to anything，在页面中搜索用#开头，输入#body，按一下回车，然后光标移动到body，再按[ctrl + Enter]，在下面添加一行<br> e. 生成无序列表ul&gt;.item$*10，”.”代表class，”$”代表序号，再按ctrl + e<br> f. 选中一块代码，ctrl + ]，就是增加缩进<br> g. 鼠标选中”&lt;&gt;”标记，按住[alt + F3]全选，移动方向键，按回车，输入h2{this is a tittle}，大括号在插件中的意思是输出内容，光标移动到行末尾，按[ctrl + E]<br> h. [ctrl + shift +enter]，可以在上一行插入代码<br> i. [ctrl + shift + v]，在粘贴的同时保留了缩进</li>
<li>sublime的高级特性：<br> a. 安装package control 插件<br> b. ctrl + shift + P，搜索pci，theme进行<br> c. snippets 以模板的方式进行<br> d. 使用插件 Javascript &amp; NodeJS Snippets,输入gi就会出现document.getElementById(‘id’);用好tab键；更多功能上<a href="https://packagecontrol.io/上面输入插件名称，在里边找" target="_blank" rel="noopener">https://packagecontrol.io/上面输入插件名称，在里边找</a><br> e. 安装JQuery<br> f. PersonModule.findOne({name:’test’},function(err,result){<pre><code> console.log(result);</code></pre> });安装插件Insert Callback 之后，可以用快捷键[alt +c]实现这个功能。<br> g. advanceNewfile插件，用[ctrl + alt + N]，可以建了之后直接输入名称，或者用……/……直接在指定目录下创建<br> h. 测试get和post请求，用httpRequest,快捷键[Ctrl +alt + R]<br> i. nettus fetch，写前端程序，下载类库和更新类库，命令模式，fetch manage管理，可以下载和管理underscore<br> j. sidebarenhancement 增强sidebar<br> k. 快速添加注释，docblocker，/<em>或者/*</em>之后按回车，在函数的上方输入/**，之后按住tab键就会自动生成注释<br> l. 使用lint进行语法及风格校验，先安装sublimeLinter，之后NodeJS，然后<code>cnpm install jshint</code>,配置 jshint, 在项目文件夹下创建 .jshintrc 文件，配置三个等号在文件中写如下内容，在 jshint.com 中有所有可配置信息的所有说明<pre><code>{
 &quot;eqeqeq&quot;: true;
}</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>git 学习</title>
    <url>/2020/06/02/tools/Learn_git/</url>
    <content><![CDATA[<ol>
<li>输入git 或者 git help 会显示出常用的命令和解释</li>
<li>git help -a 显示所有命令</li>
<li>git help -g 显示手册，继续输入标题，进入详细说明，例如git help add，F 键乡下翻页，B 键向上翻页，q 推出介绍</li>
<li>配置 git<ol>
<li>system设置：所有使用这台电脑的人</li>
<li>global设置： 全局，用户设置<ol>
<li><code>git config --global user.name &quot;吕嘉文&quot;</code>，设置名字</li>
<li><code>git config --list</code> ,查看配置</li>
<li><code>git config --unset --global user.name</code>，删除掉 user.name 这个配置</li>
<li>其他可以配置的<code>git config --global user.email/color.ui(true)/ &quot;设置项&quot;</code></li>
</ol>
</li>
<li>project设置： 针对项目进行设置</li>
</ol>
</li>
<li>初始化一个项目<ol>
<li>命令init ，是initialize 的简写</li>
<li>在项目的目录下面执行<code>git init</code></li>
<li>不想 git 跟踪项目的话，删除 .git 这个文件就行了 </li>
</ol>
</li>
<li>提交<ol>
<li>修改了文件之后，添加一条修改描述的信息</li>
<li>在工作目录下输入 <code>git status</code>，会显示当前所在的分支，</li>
<li>initial commit 表示一个初始的提交</li>
<li>nothng to commit 目前没有变化需要提交</li>
<li>新建文件之后，输入 <code>git status</code>，这些文件会显示为untracked files，输入<code>git add .</code> 跟踪所有文件，或者 <code>git add 文件名</code>，跟踪指定的文件。</li>
<li>跟踪的文件有变化的话，输入git status 会提示changes to be commit 将要提交的修改</li>
<li><code>git commit 描述信息</code> -m ‘确认提交’`</li>
<li>git log 查看以往的提交</li>
</ol>
</li>
<li>修改一个文件之后<ol>
<li><code>git status</code> 的结果是 changes not staged for commit 没有存到暂存区的修改</li>
<li><code>git diff 文件名称</code> 会显示文件修改之后的对比，如果不加文件名称，会对比所有修改过的文件，默认对比的是暂存区和工作目录的对比，想要比较仓库中的文件可以输入<code>git diff --staged</code></li>
<li><code>git add 文件名称</code>， 就把文件添加到暂存区中了</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>好用的工具集合</title>
    <url>/2020/06/02/tools/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>VS code 使用</title>
    <url>/2020/06/01/tools/vs%20code%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="VSCode-使用指南"><a href="#VSCode-使用指南" class="headerlink" title="VSCode 使用指南"></a>VSCode 使用指南</h1><h3 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h3><p>可以使用 Command + P 调出类似 sublime text 的 go to everywhere</p>
<h3 id="编辑功能"><a href="#编辑功能" class="headerlink" title="编辑功能"></a>编辑功能</h3><ul>
<li><p>多光标选取 <code>Command + 鼠标单击</code></p>
</li>
<li><p>逐步选中其他相同的 symbol，<code>Command + D</code></p>
</li>
<li><p>代码格式化 <code>Shift + Alt + F</code></p>
</li>
<li><p>重构（重命名）Symbol <code>F2</code></p>
</li>
<li><p>查找所有引用 Symbol 的代码 <code>Shift + F12</code></p>
</li>
<li><p>跳转到 symbol 的定义处<code>F12</code>，也可以在 symbol 下面展开一个面板，显示定义处的代码 <code>Alt + F12</code></p>
</li>
<li><p>如果你是指格式化，快捷键是：shift+alt+f</p>
</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><code>Command + P</code> ，? 查询所有命令，&gt; 找到所有命令，：跳转到指定行··</li>
<li><code>Command +鼠标左键</code></li>
</ul>
<h2 id="从别的地方借鉴来的"><a href="#从别的地方借鉴来的" class="headerlink" title="从别的地方借鉴来的"></a>从别的地方借鉴来的</h2><h4 id="外观增强"><a href="#外观增强" class="headerlink" title="外观增强"></a>外观增强</h4><ol>
<li><p>配色<a href="https://link.zhihu.com/?target=http%3A//ethanschoonover.com/solarized">Solarized Dark</a></p>
</li>
<li><p>字体<a href="https://link.zhihu.com/?target=https%3A//github.com/tonsky/FiraCode/wiki/VS-Code-Instructions">Fira Code</a></p>
</li>
</ol>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
   <span class="token property">"editor.cursorStyle"</span><span class="token operator">:</span> <span class="token string">"block"</span><span class="token punctuation">,</span>
   <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Fira Code"</span><span class="token punctuation">,</span>
   <span class="token property">"editor.fontLigatures"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
   <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
   <span class="token property">"editor.lineHeight"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
   <span class="token property">"editor.lineNumbers"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>
   <span class="token property">"editor.minimap.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
   <span class="token property">"editor.renderIndentGuides"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
   <span class="token property">"editor.rulers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token property">"workbench.colorTheme"</span><span class="token operator">:</span> <span class="token string">"Solarized Dark"</span><span class="token punctuation">,</span>
   <span class="token property">"workbench.iconTheme"</span><span class="token operator">:</span> <span class="token string">"vscode-great-icons"</span>
<span class="token punctuation">}</span> </code></pre>
<ol start="3">
<li>Guides 缩进参考，与内置的缩进参考线不同，Guides 能够让你通过配置项来修改参考线的颜色、样式、缩进空白的背景色等，如果你愿意折腾，甚至能够配置出类似 Indent Rainbow 那样风格的参考线。下图是我使用 Solarized Dark 主题时参考线的配置：</li>
</ol>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
      <span class="token property">"guides.normal.color.dark"</span><span class="token operator">:</span> <span class="token string">"rgba(91, 91, 91, 0.6)"</span><span class="token punctuation">,</span>
      <span class="token property">"guides.normal.color.light"</span><span class="token operator">:</span> <span class="token string">"rgba(220, 220, 220, 0.7)"</span><span class="token punctuation">,</span>
      <span class="token property">"guides.active.color.dark"</span><span class="token operator">:</span> <span class="token string">"rgba(210, 110, 210, 0.6)"</span><span class="token punctuation">,</span>
      <span class="token property">"guides.active.color.light"</span><span class="token operator">:</span> <span class="token string">"rgba(200, 100, 100, 0.7)"</span><span class="token punctuation">,</span>
      <span class="token property">"guides.active.style"</span><span class="token operator">:</span> <span class="token string">"dashed"</span><span class="token punctuation">,</span>
      <span class="token property">"guides.normal.style"</span><span class="token operator">:</span> <span class="token string">"dashed"</span><span class="token punctuation">,</span>
      <span class="token property">"guides.stack.style"</span><span class="token operator">:</span> <span class="token string">"dashed"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></code></pre>
<ol start="4">
<li>TODO Highlight TODO Highlight 能够帮我们把这些关键词高亮出来</li>
</ol>
<h4 id="风格检查和插件"><a href="#风格检查和插件" class="headerlink" title="风格检查和插件"></a>风格检查和插件</h4><ol>
<li><p>ESlint</p>
</li>
<li><p>EditorConfig</p>
</li>
</ol>
<pre class=" language-yml"><code class="language-yml">[*]
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = false
insert_final_newline = true
indent_style = space
indent_size = 2

[{*.yml,*.json}]
indent_style = space
indent_size = 2 </code></pre>
<ol start="3">
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Desbenp.prettier-vscode">Prettier </a> 格式化代码的工具</li>
</ol>
<h4 id="智能建议、代码片段、自动补全和插件"><a href="#智能建议、代码片段、自动补全和插件" class="headerlink" title="智能建议、代码片段、自动补全和插件"></a>智能建议、代码片段、自动补全和插件</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"editor.quickSuggestions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"other"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"strings"</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> </code></pre>
<ol>
<li><p>代码补全：</p>
<ol>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dxabikos.JavaScriptSnippets">Javascript (ES6) Code Snippets</a> </li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dnikhilkumar80.js-patterns-snippets">Javascript Patterns Snippets</a></li>
</ol>
</li>
<li><p>自动补全</p>
<ol>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dchristian-kohler.path-intellisense">Path Intellisense</a>，文件路径补全</li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3DZignd.html-css-class-completion">IntelliSense for CSS class names</a> CSS 类名补全，会自动扫描整个项目里面的 CSS 类名并在你输入类名时做智能提示</li>
<li><a href="https://link.zhihu.com/?target=https%3A//emmet.io/">Emmet</a>，以前叫做 Zen Coding，我发现后，也是爱不释手，可以把类 CSS 选择符的字符串展开成 HTML 标签，VSCode 已经内置，官方介绍文档<a href="https://link.zhihu.com/?target=https%3A//code.visualstudio.com/docs/editor/emmet">参见</a></li>
</ol>
</li>
<li><p>功能增强</p>
<ol>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dnaumovs.color-highlight">Color Highlight</a>，识别代码中的颜色，包括各种颜色格式；</li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3DCoenraadS.bracket-pair-colorizer">Bracket Pair Colorizer</a>，识别代码中的各种括号，并且标记上不同的颜色</li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dalefragnani.project-manager">Project Manager</a>，项目管理，让我们方便的在命令面板中切换项目文件夹</li>
<li>Git Lens 把 VSCode 结合 Git 的使用体验优化到了极致</li>
<li>Code Outline 能在单独窗口中列出当源代码中的各种符号</li>
<li>Code Spell Checker 强烈推荐</li>
<li>Code Runner，名副其实的代码运行插件，支持数十种语言，在不离开代码编辑器的前提下通过命令面板可直接执行代码</li>
<li>Open-In-Browser</li>
</ol>
</li>
</ol>
<h4 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h4><ol>
<li>Faker  能够帮你快速的插入用例数据。Faker 可以随机生成姓名、地址、图像、电话号码，或者经典的乱数假文段落，并且每个类别还包含了各种子类别，你可以根据自身的需求来使用这些数据。</li>
<li>Icon Fonts 这是一个能够在项目中添加图标字体的插件。该插件支持超过 20 个热门的图标集，包括了 Font Awesome、Ionicons、Glyphicons 和 Material Design Icons。</li>
</ol>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>提高效率有没有法门？是有的，简单的事情重复化，重复的事情标准化，标准的事情自动化，发现一个痛点，用插件解决一个痛点，你的效率自然就上来了。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 MySQL 基础</title>
    <url>/2020/06/01/database/%E5%AD%A6%E4%B9%A0%20MySQL/</url>
    <content><![CDATA[<h1 id="05-检索数据：你还在使用-SELECT-么？（二刷）"><a href="#05-检索数据：你还在使用-SELECT-么？（二刷）" class="headerlink" title="05 | 检索数据：你还在使用 SELECT * 么？（二刷）"></a>05 | 检索数据：你还在使用 SELECT * 么？（二刷）</h1><h2 id="SELECT-的执行顺序"><a href="#SELECT-的执行顺序" class="headerlink" title="SELECT 的执行顺序"></a>SELECT 的执行顺序</h2><ol>
<li>关键字的顺序是不能颠倒的：</li>
</ol>
<pre class=" language-SQL"><code class="language-SQL">SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ...</code></pre>
<ol start="2">
<li>SELECT 语句的执行顺序（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</li>
</ol>
<pre class=" language-SQL"><code class="language-SQL">FROM > WHERE > GROUP BY > HAVING > SELECT的字段 > DISTINCT > ORDER BY > LIMIT</code></pre>
<p>关键字顺序和执行顺序是下面这样的</p>
<pre class=" language-SQL"><code class="language-SQL">SELECT DISTINCT player_id, player_name, count(*) as num #顺序5
FROM player JOIN team ON player.team_id = team.team_id #顺序1
WHERE height > 1.80 #顺序2
GROUP BY player.team_id #顺序3
HAVING num > 2 #顺序4
ORDER BY num DESC #顺序6
LIMIT 2 #顺序7</code></pre>
<p>如果加上这个计算过程，完整的顺序是：<br>1、FROM子句组装数据<br>2、WHERE子句进行条件筛选<br>3、GROUP BY分组<br>4、使用聚集函数进行计算；<br>5、HAVING筛选分组；<br>6、计算所有的表达式；<br>7、SELECT 的字段；<br>8、ORDER BY排序<br>9、LIMIT筛选<br>所以中间有两个过程是需要计算的：聚集函数 和 表达式。其余是关键字的执行顺序，如文章所示。</p>
<p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个虚拟表，然后将这个虚拟表传入下一个步骤中作为输入。</p>
<h2 id="SQL-的执行原理"><a href="#SQL-的执行原理" class="headerlink" title="SQL 的执行原理"></a>SQL 的执行原理</h2><p>首先，你可以注意到，SELECT 是先执行 FROM 这一步的。在这个阶段，如果是多张表联查，还会经历下面的几个步骤：  </p>
<ol>
<li>首先先通过 CROSS JOIN 求笛卡尔积，相当于得到虚拟表 vt（virtual table）1-1；</li>
<li>通过 ON 进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 vt1-2；</li>
<li>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟表 vt1-2 的基础上增加外部行，得到虚拟表 vt1-3。</li>
</ol>
<p>当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得到是我们的原始数据。</p>
<p>当我们拿到了查询数据表的原始数据，也就是最终的虚拟表 vt1，就可以在此基础上再进行 WHERE 阶段。在这个阶段中，会根据 vt1 表的结果进行筛选过滤，得到虚拟表 vt2。</p>
<p>然后进入第三步和第四步，也就是 GROUP 和 HAVING 阶段。在这个阶段中，实际上是在虚拟表 vt2 的基础上进行分组和分组过滤，得到中间的虚拟表 vt3 和 vt4。</p>
<p>当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 SELECT 和 DISTINCT 阶段。</p>
<p>首先在 SELECT 阶段会提取想要的字段，然后在 DISTINCT 阶段过滤掉重复的行，分别得到中间的虚拟表 vt5-1 和 vt5-2。</p>
<p>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 ORDER BY 阶段，得到虚拟表 vt6。</p>
<p>最后在 vt6 的基础上，取出指定行的记录，也就是 LIMIT 阶段，得到最终的结果，对应的是虚拟表 vt7。</p>
<h1 id="06-数据过滤：SQL-数据过滤有哪些方法？（二刷）"><a href="#06-数据过滤：SQL-数据过滤有哪些方法？（二刷）" class="headerlink" title="06 | 数据过滤：SQL 数据过滤有哪些方法？（二刷）"></a>06 | 数据过滤：SQL 数据过滤有哪些方法？（二刷）</h1><p>在 WHERE 子句中，你可以使用比较运算符、逻辑运算符和通配符这三种方式对检索条件进行过滤。</p>
<ul>
<li>提升查询效率的一个很重要的方式，就是约束返回结果的数量</li>
<li>还有一个很有效的方式，就是指定筛选条件，进行过滤。</li>
</ul>
<p>当 WHERE 子句中同时出现 AND 和 OR 操作符的时候，你需要考虑到执行的先后顺序，也就是两个操作符执行的优先级。一般来说 () 优先级最高，其次优先级是 AND，然后是 OR。</p>
<h2 id="通配符："><a href="#通配符：" class="headerlink" title="通配符："></a>通配符：</h2><p>（%）代表零个或多个字符，而（_）只代表一个字符。</p>
<p>建议你尽量少用通配符，因为它需要消耗数据库更长的时间来进行匹配。即使你对 LIKE 检索的字段进行了索引，索引的价值也可能会失效。如果要让索引生效，那么 LIKE 后面就不能以（%）开头，比如使用LIKE ‘%太%’或LIKE ‘%太’的时候就会对全表进行扫描。如果使用LIKE ‘太%’，同时检索的字段进行了索引的时候，则不会进行全表扫描。</p>
<p>保持高效率的一个很重要的原则，就是要避免全表扫描，所以我们会考虑在 WHERE 及 ORDER BY 涉及到的列上增加索引。</p>
<h2 id="索引不生效"><a href="#索引不生效" class="headerlink" title="索引不生效"></a>索引不生效</h2><ol>
<li>不要在WHERE子句后面对字段做函数处理，同时也避免对索引字段进行数据类型转换</li>
<li>避免在索引字段上使用&lt;&gt;，!=，以及对字段进行NULL判断（包括 IS NULL, IS NOT NULL）</li>
<li>在索引字段后，慎用IN和NOT IN，如果是连续的数值，可以考虑用BETWEEN进行替换</li>
</ol>
<p>因为在WHERE子句中，如果对索引字段进行了函数处理，或者使用了&lt;&gt;,!=或NULL判断等，都会造成索引失效。</p>
<h1 id="07-为什么是-SQL-函数？为什么使用-SQL-函数可能会带来问题（二刷）"><a href="#07-为什么是-SQL-函数？为什么使用-SQL-函数可能会带来问题（二刷）" class="headerlink" title="07 | 为什么是 SQL 函数？为什么使用 SQL 函数可能会带来问题（二刷）"></a>07 | 为什么是 SQL 函数？为什么使用 SQL 函数可能会带来问题（二刷）</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>什么是 SQL 函数</li>
<li>内置的 SQL 函数包括哪些？</li>
<li>如何使用 SQL 函数对一个数据表进行操作，比如针对一个王者荣耀的英雄数据库，我们可以使用这些函数完成哪些操作？</li>
<li>什么情况下使用 SQL 函数？为什么使用 SQL 函数有时候会带来问题？</li>
</ol>
<h2 id="什么是-SQL-函数"><a href="#什么是-SQL-函数" class="headerlink" title="什么是 SQL 函数"></a>什么是 SQL 函数</h2><p>函数把我们经常使用的代码封装起来，需要的时候直接调用即可。这样既提高了代码效率，又提高了可维护性。</p>
<h2 id="常用的-SQL-函数"><a href="#常用的-SQL-函数" class="headerlink" title="常用的 SQL 函数"></a>常用的 SQL 函数</h2><ol>
<li>算术函数</li>
<li>字符串函数</li>
<li>日期函数</li>
<li>转换函数</li>
</ol>
<h3 id="算术函数"><a href="#算术函数" class="headerlink" title="算术函数"></a>算术函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td>ABS()</td>
<td>取绝对值</td>
</tr>
<tr>
<td>MOD()</td>
<td>取余</td>
</tr>
<tr>
<td>ROUND()</td>
<td>四舍五入为指定小数位数，两个参数，字段名称，小数位数</td>
</tr>
</tbody></table>
<p>SELECT ABS(-2)，运行结果为 2。</p>
<p>SELECT MOD(101,3)，运行结果 2。</p>
<p>SELECT ROUND(37.25,1)，运行结果 37.3。</p>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td>CONCAT()</td>
<td>将多个字符串拼接起来</td>
</tr>
<tr>
<td>LENGTH()</td>
<td>计算字段长度，一个汉字算三个字符</td>
</tr>
<tr>
<td>CHAR_LENGTH()</td>
<td>计算字符长度，汉字、数字、字母都算一个字符</td>
</tr>
<tr>
<td>LOWER()</td>
<td>英文转小写</td>
</tr>
<tr>
<td>UPPER()</td>
<td>英文转大写</td>
</tr>
<tr>
<td>REPLACE()</td>
<td>替换，参数：要替换的表达式或字段名，想要查找替换字符串、替换成哪个字符串</td>
</tr>
<tr>
<td>SUBSTRING()</td>
<td>截取字符串，参数：要替换的表达式或字段名，开始截取的位置、想要街区的字符串长度</td>
</tr>
</tbody></table>
<p>SELECT CONCAT(‘abc’, 123)，运行结果为 abc123。</p>
<p>SELECT LENGTH(‘你好’)，运行结果为 6。</p>
<p>SELECT CHAR_LENGTH(‘你好’)，运行结果为 2。</p>
<p>SELECT LOWER(‘ABC’)，运行结果为 abc。</p>
<p>SELECT UPPER(‘abc’)，运行结果 ABC。</p>
<p>SELECT REPLACE(‘fabcd’, ‘abc’, 123)，运行结果为 f123d。</p>
<p>SELECT SUBSTRING(‘fabcd’, 1,3)，运行结果为 fab。</p>
<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>定义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>CURRENT_DATE()</td>
<td>系统当前时间</td>
<td>2019-04-03</td>
</tr>
<tr>
<td>CURRENT_TIME()</td>
<td>系统当前时间，没有具体的日期</td>
<td>09:48:52</td>
</tr>
<tr>
<td>CURRENT_TIMESTAMP()</td>
<td>系统当前时间，包括具体的日期 + 时间</td>
<td>2019-04-03 21:26:34</td>
</tr>
<tr>
<td>EXTRACT()</td>
<td>抽取具体的年、月、日</td>
<td></td>
</tr>
<tr>
<td>DATE()</td>
<td>返回时间的日期部分</td>
<td>2019-04-01</td>
</tr>
<tr>
<td>YEAR()</td>
<td>返回时间的年份部分</td>
<td>2019</td>
</tr>
<tr>
<td>MONTH()</td>
<td>返回时间的月份部分</td>
<td>04</td>
</tr>
<tr>
<td>DAY()</td>
<td>返回时间的天数部分</td>
<td>01</td>
</tr>
<tr>
<td>HOUR()</td>
<td>返回时间的小时部分</td>
<td>09</td>
</tr>
<tr>
<td>MINUTE()</td>
<td>返回时间的分钟部分</td>
<td>48</td>
</tr>
<tr>
<td>SECOND()</td>
<td>返回时间的秒部分</td>
<td>52</td>
</tr>
</tbody></table>
<p>这里需要注意的是，DATE 日期格式必须是 yyyy-mm-dd 的形式。如果要进行日期比较，就要使用 DATE 函数，不要直接使用日期与字符串进行比较，我会在后面的例子中讲具体的原因。</p>
<h3 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>定义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>CAST()</td>
<td>数据类型转换</td>
<td>CAST(123.123 AS INT)，SELECT CAST(123.123 AS DECIMAL(8,2))</td>
</tr>
<tr>
<td>COALESCE()</td>
<td>返回第一个非空数值</td>
<td>SELECT COALESCE(null,1,2)，运行结果为 1</td>
</tr>
</tbody></table>
<p>转换为小鼠的话，DECIMAL(a,b)来指定，其中 a 代表整数部分和小数部分加起来最大的位数，b 代表小数位数、</p>
<p>因为很多时候你无法确认 birthdate 的数据类型是字符串，还是 datetime 类型，如果你想对日期部分进行比较，那么使用DATE(birthdate)来进行比较是更安全的。</p>
<p>10：11</p>
<h3 id="SQL-函数有问题"><a href="#SQL-函数有问题" class="headerlink" title="SQL 函数有问题"></a>SQL 函数有问题</h3><p>DBMS 不同，实现的函数不同，使用 MySQL 的可移植性很差</p>
<p>????它会导致查询不走索引，直接全表遍历，导致慢查询-这才是最重要的问题。</p>
<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ol>
<li>关键字和函数名称全部大写</li>
<li>数据库名、表名、字段名称全部小写</li>
<li>SQL 语句必须以分号结尾</li>
</ol>
<h1 id="08-什么事-SQL-的聚集函数，如何利用它们汇总表的数据？（二刷）"><a href="#08-什么事-SQL-的聚集函数，如何利用它们汇总表的数据？（二刷）" class="headerlink" title="08 | 什么事 SQL 的聚集函数，如何利用它们汇总表的数据？（二刷）"></a>08 | 什么事 SQL 的聚集函数，如何利用它们汇总表的数据？（二刷）</h1><h2 id="掌握"><a href="#掌握" class="headerlink" title="掌握"></a>掌握</h2><ol>
<li>聚集函数都有哪些，能否在一条 SELECT 语句中使用多个聚集函数；</li>
<li>如何对数据进行分组，并进行聚类统计；</li>
<li>如何使用 HAVING 过滤分组，HAVING 和 WHERE 的区别是什么。</li>
</ol>
<h2 id="SQL-聚集函数"><a href="#SQL-聚集函数" class="headerlink" title="SQL 聚集函数"></a>SQL 聚集函数</h2><h3 id="有哪些聚集函数"><a href="#有哪些聚集函数" class="headerlink" title="有哪些聚集函数"></a>有哪些聚集函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>COUNT()</td>
<td>总行数</td>
</tr>
<tr>
<td>MAX()</td>
<td>最大值</td>
</tr>
<tr>
<td>MIN()</td>
<td>最小值</td>
</tr>
<tr>
<td>SUM()</td>
<td>求和</td>
</tr>
<tr>
<td>AVG()</td>
<td>平均值</td>
</tr>
</tbody></table>
<p>COUNT(role_assist)会忽略值为 NULL 的数据行，而 COUNT(*) 只是统计数据行数，不管某个字段是否为 NULL。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class=" language-SQL"><code class="language-SQL">SELECT COUNT(*), AVG(hp_max), MAX(hp_max), MIN(hp_max)  FROM heros WHERE role_main = '射手' OR role_assist = '射手';</code></pre>
<pre class=" language-SQL"><code class="language-SQL">SELECT COUNT(DISTINCT hp_max)  FROM heros WHERE role_main = '射手' OR role_assist = '射手';</code></pre>
<p>需要说明的是 AVG、MAX、MIN 等聚集函数会自动忽略值为 NULL 的数据行，MAX 和 MIN 函数也可以用于字符串类型数据的统计，如果是英文字母，则按照 A—Z 的顺序排列，越往后，数值越大。如果是汉字则按照全拼拼音进行排列。</p>
<h3 id="分组聚集统计"><a href="#分组聚集统计" class="headerlink" title="分组聚集统计"></a>分组聚集统计</h3><p>使用一个字段进行分组</p>
<pre class=" language-SQL"><code class="language-SQL">SELECT COUNT(*), role_main FROM heros GROUP BY role_main;</code></pre>
<p>使用多个字段进行分组</p>
<pre class=" language-SQL"><code class="language-SQL">SELECT COUNT(*) AS num, role_main, role_assist FROM heros GROUP BY role_main, role_assist ORDER BY num DESC;</code></pre>
<h3 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h3><p>过滤分组我们使用的是 HAVING。HAVING 的作用和 WHERE 一样，都是起到过滤的作用，只不过 WHERE 是用于数据行，而 HAVING 则作用于分组。</p>
<pre class=" language-SQL"><code class="language-SQL">SELECT COUNT(*) AS num, role_main, role_assist FROM heros GROUP BY role_main, role_assist HAVING num > 5 ORDER BY num DESC;</code></pre>
<p>where 和 having</p>
<pre class=" language-SQL"><code class="language-SQL">SELECT COUNT(*) as num, role_main, role_assist
FROM heros
WHERE hp_max > 6000
GROUP BY role_main, role_assist
HAVING num > 5
ORDER BY num DESC</code></pre>
<p>先使用 where 子句进行筛选，再使用 GROUP BY 进行分组，然后使用 HAVING 进行分组条件判断，然后使用 ORDER BY</p>
<p>记住顺序</p>
<pre><code>SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ...</code></pre><p>在执行顺序上，SELECT字段在GROUP BY和HAVING之后，不过在SELECT字段之前，已经计算了聚集函数，也就是COUNT(*) as num。</p>
<p>聚集函数的计算在GROUP BY之后，HAVING之前</p>
<h1 id="09-子查询：子查询的种类？如何提高子查询的性能（二刷ing）"><a href="#09-子查询：子查询的种类？如何提高子查询的性能（二刷ing）" class="headerlink" title="09 | 子查询：子查询的种类？如何提高子查询的性能（二刷ing）"></a>09 | 子查询：子查询的种类？如何提高子查询的性能（二刷ing）</h1><p>SQL 还允许我们进行子查询，也就是嵌套在查询中的查询。</p>
<p>很多时候，我们无法直接从数据表中得到查询结果，需要从查询结果集中再次进行查询，才能得到想要的结果。这个“查询结果集”就是今天我们要讲的子查询。</p>
<h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><ol>
<li>子查询可以分为关联子查询和非关联子查询。我会举一个 NBA 数据库查询的例子，告诉你什么是关联子查询，什么是非关联子查询；</li>
<li>子查询中有一些关键词，可以方便我们对子查询的结果进行比较。比如存在性检测子查询，也就是 EXISTS 子查询，以及集合比较子查询，其中集合比较子查询关键词有 IN、SOME、 ANY 和 ALL，这些关键词在子查询中的作用是什么；</li>
<li>子查询也可以作为主查询的列，我们如何使用子查询作为计算字段出现在 SELECT 查询中呢？</li>
</ol>
<h2 id="什么是关联子查询，什么是非关联子查询"><a href="#什么是关联子查询，什么是非关联子查询" class="headerlink" title="什么是关联子查询，什么是非关联子查询"></a>什么是关联子查询，什么是非关联子查询</h2><p>子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做非关联子查询。</p>
<p>同样，如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为关联子查询。</p>
<p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为关联子查询。比如我们想要查找每个球队中大于平均身高的球员有哪些，并显示他们的球员姓名、身高以及所在球队 ID。</p>
<p>在一个表里边进行的子查询</p>
<pre class=" language-SQL"><code class="language-SQL">SELECT player_name, height, team_id
FROM player AS a
WHERE height > (
    SELECT AVG(height)
    FROM player AS b
    WHERE a.team_id = b.team_id
);</code></pre>
<h2 id="EXISTS-子查询"><a href="#EXISTS-子查询" class="headerlink" title="EXISTS 子查询"></a>EXISTS 子查询</h2><p>关联子查询通常也会和 EXISTS 一起来使用，EXISTS 子查询用来判断条件是否满足，满足的话为 True，不满足为 False。</p>
<h1 id="12-｜-视图在-SQL-中的作用是什么，它是怎样工作的？"><a href="#12-｜-视图在-SQL-中的作用是什么，它是怎样工作的？" class="headerlink" title="12 ｜ 视图在 SQL 中的作用是什么，它是怎样工作的？"></a>12 ｜ 视图在 SQL 中的作用是什么，它是怎样工作的？</h1><p>视图，也就是我们今天要讲的虚拟表，本身是不具有数据的，它是 SQL 中的一个重要概念</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>其他设计模式</title>
    <url>/2020/06/01/design-pattern/%E5%85%B6%E4%BB%96%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="其他设计模式（用得少）"><a href="#其他设计模式（用得少）" class="headerlink" title="其他设计模式（用得少）"></a>其他设计模式（用得少）</h2><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li>clone 自己，生成一个新对象</li>
<li>java 默认有 clone 接口，不用自己实现</li>
<li>Object.create 用到了原型模式的思想，基于一个原型，创建一个对象</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    first<span class="token punctuation">:</span> <span class="token string">'undefined'</span><span class="token punctuation">,</span>
    last<span class="token punctuation">:</span> <span class="token string">'undefined'</span><span class="token punctuation">,</span>
    getName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>last
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, I am '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> x <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>prototype<span class="token punctuation">)</span>
x<span class="token punctuation">.</span>first <span class="token operator">=</span> <span class="token string">'A'</span>
x<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token string">'B'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
x<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>prototype<span class="token punctuation">)</span>
y<span class="token punctuation">.</span>first <span class="token operator">=</span> <span class="token string">'C'</span>
y<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token string">'D'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
y<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h4 id="对比-JS-中的原型-prototype"><a href="#对比-JS-中的原型-prototype" class="headerlink" title="对比 JS 中的原型 prototype"></a>对比 JS 中的原型 prototype</h4><ul>
<li><p>prototype 可以理解为 ES6 class 的一种底层原理</p>
</li>
<li><p>而 class 是实现面向对象的基础，并不是服务于某个模式 </p>
</li>
<li><p>若干年后 ES6 全面普及，大家可能会忽略掉 prototype</p>
</li>
<li><p>但是 Object.create 却会长久存在</p>
</li>
</ul>
<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul>
<li>用于把抽象化与实现化解耦</li>
<li>使得二者可以独立变化</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="/images/image-20191110161648910.png" alt="image-20191110161648910"></p>
<p>不好的代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ColorShape</span> <span class="token punctuation">{</span>
    <span class="token function">yellowCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yellow circle'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">redCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red circle'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">yellowTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yellow triangle'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">redTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red triangle'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorShpae</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cs<span class="token punctuation">.</span><span class="token function">yellowCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cs<span class="token punctuation">.</span><span class="token function">redCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cs<span class="token punctuation">.</span><span class="token function">yellowTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cs<span class="token punctuation">.</span><span class="token function">redTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p><img src="/images/image-20191110162042544.png" alt="image-20191110162042544"></p>
<p>桥接模式</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color
    <span class="token punctuation">}</span>
    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> red <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> yellow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> red<span class="token punctuation">)</span>
circle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> triangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> yellow<span class="token punctuation">)</span>
triangle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h4 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul>
<li>抽象和实现的分离，解耦</li>
<li>开放封闭原则</li>
</ul>
<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><ul>
<li>生成树形结构，表示“整体-部分”的关系</li>
<li>让整体和部分都具有一致的操作方式</li>
<li>例如文件系统树</li>
<li>JS 经典应用中，未找到这么复杂的数据结构</li>
<li>虚拟 DOM 中的 vnode 是这种形式，但是数据类型简单</li>
<li>用 JS 实现一个菜单，不算经典应用，与业务相关</li>
</ul>
<h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">123</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">456</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
    tag<span class="token punctuation">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>
    attr<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">:</span> <span class="token string">'div1'</span><span class="token punctuation">,</span>
        className<span class="token punctuation">:</span> <span class="token string">'container'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            tag<span class="token punctuation">:</span> <span class="token string">'P'</span><span class="token punctuation">,</span>
      attr<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            tag<span class="token punctuation">:</span> <span class="token string">'P'</span><span class="token punctuation">,</span>
      attr<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'456'</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>整体和单个节点的操作是一致的</li>
<li>整体和单个节点的数据结构也保持一致</li>
</ul>
<h4 id="设计原则验证-1"><a href="#设计原则验证-1" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul>
<li>将整体和单个节点的操作抽象出来</li>
<li>符合开放封闭原则</li>
</ul>
<h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><ul>
<li>共享、元素局</li>
</ul>
<h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><ul>
<li>共享内存（主要考虑内存，而非效率）</li>
<li>相同的数据，共享使用</li>
<li>JS 中未找到经典应用场景</li>
</ul>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>无限下拉别表，将时间代理到高层节点上</p>
<p>如果绑定到 a 标签，对内存开销太大</p>
<p>实际上是个代理模式的例子，但是它体现了享元模式的思想</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>a1<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>a2<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>a3<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>a4<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span>
    div1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<h4 id="设计原则验证-2"><a href="#设计原则验证-2" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul>
<li>将相同的部分抽象出来</li>
<li>符合开放封闭原则</li>
<li>共享的数据，不同的地方不一样的话，不用享元模式，需要使用装饰器模式，适配器模式，代理模式</li>
</ul>
<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>对内部的特殊处理，可以把它封装成一个方法对外输出</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>
    <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">handle1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">hander2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">handle3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">handle1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">handle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">handle3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><h4 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h4><ul>
<li>一步操作可能分配多个职责角色来完成 </li>
<li>把这些角色都分开， 然后用一个链穿起来</li>
<li>将发起者和各个处理者进行隔离</li>
<li>发起者和处理者，各个处理者之间进行隔离</li>
</ul>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
        <span class="token keyword">this</span><span class="token punctuation">.</span>nextAction <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
    <span class="token function">setNextAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nextAction <span class="token operator">=</span> action
    <span class="token punctuation">}</span>
    <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">审批`</span></span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextAction <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>nextAction<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token punctuation">(</span><span class="token string">'组长'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token punctuation">(</span><span class="token string">'经理'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token punctuation">(</span><span class="token string">'总监'</span><span class="token punctuation">)</span>

a1<span class="token punctuation">.</span><span class="token function">setNextAction</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>
a2<span class="token punctuation">.</span><span class="token function">setNextAction</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span>

a1<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h4 id="JS-中的链式操作"><a href="#JS-中的链式操作" class="headerlink" title="JS  中的链式操作"></a>JS  中的链式操作</h4><ul>
<li>职责链模式和业务结合较多，JS 中能联想到链式操作</li>
<li>Node 中 stream 的 pipe，Promise.then</li>
</ul>
<h4 id="设计模式验证"><a href="#设计模式验证" class="headerlink" title="设计模式验证"></a>设计模式验证</h4><ul>
<li>发起者与各个处理者进行隔离</li>
<li>符合开放封闭原则</li>
</ul>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h4 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h4><ul>
<li>执行命令时，发布者和执行者分开</li>
<li>中间加入命令对象，作为中转站</li>
<li>类似于打仗的时候，统帅下达命令给打鼓的，打鼓的一打鼓，全军收到命令了 </li>
<li>发布者和接受者不能直接接触的时候可以用</li>
</ul>
<p><img src="/images/image-20191114125450072.png" alt="image-20191114125450072"></p>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>
    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver
    <span class="token punctuation">}</span>
    <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发命令'</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Invoker</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command
    <span class="token punctuation">}</span>
    <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始'</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> soldier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Receiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 士兵</span>
<span class="token keyword">let</span> trumpeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span>solider<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 小号手</span>
<span class="token keyword">let</span> general <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Invoker</span><span class="token punctuation">(</span>trumpeter<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将军</span>
general<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h4 id="JS-中的应用"><a href="#JS-中的应用" class="headerlink" title="JS 中的应用"></a>JS 中的应用</h4><ul>
<li>网页富文本编辑器，浏览器封装了一个命令对象</li>
<li>document.execCommand(‘bold’)</li>
<li>document.execCommand(‘undo’)</li>
</ul>
<h4 id="设计模式验证-1"><a href="#设计模式验证-1" class="headerlink" title="设计模式验证"></a>设计模式验证</h4><ul>
<li>命令对象与执行对象分开，解耦</li>
<li>符合开放封闭原则</li>
</ul>
<h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><h4 id="概念-6"><a href="#概念-6" class="headerlink" title="概念"></a>概念</h4><ul>
<li>随时记录一个对象的状态变化</li>
<li>随时可以恢复之前的某个状态（如撤销功能）</li>
<li>未找到 JS 中经典应用，除了一些工具（如编辑器）</li>
</ul>
<h4 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 状态备忘</span>
<span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content
    <span class="token punctuation">}</span>

    <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 备忘录列表</span>
<span class="token keyword">class</span> <span class="token class-name">CareTaker</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token function">add</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Editor</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
    <span class="token function">setContent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content
    <span class="token punctuation">}</span>
    <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content
    <span class="token punctuation">}</span>
    <span class="token function">saveContentToMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">getContentFromMemento</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> careTaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CareTaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
editor<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span>
editor<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">'222'</span><span class="token punctuation">)</span>
careTaker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">saveContentToMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
editor<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">'333'</span><span class="token punctuation">)</span>
careTaker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">saveContentToMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
editor<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">'444'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
editor<span class="token punctuation">.</span><span class="token function">getContentFromMemento</span><span class="token punctuation">(</span>careTaker<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
editor<span class="token punctuation">.</span><span class="token function">getContentFromMemento</span><span class="token punctuation">(</span>careTaker<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h4 id="设计原则验证-3"><a href="#设计原则验证-3" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul>
<li>状态对象与使用者分开，解耦</li>
<li>符合开放封闭原则</li>
</ul>
<h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><h4 id="概念-7"><a href="#概念-7" class="headerlink" title="概念"></a>概念</h4><p><img src="/images/image-20191119124354169.png" alt="image-20191119124354169"></p>
<h4 id="演示-2"><a href="#演示-2" class="headerlink" title="演示"></a>演示</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a
        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b
    <span class="token punctuation">}</span>
    <span class="token function">setA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>number
        <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>number<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">setB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>number
        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 买房者，A 和 B</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token function">setNumber</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> num
        <span class="token comment" spellcheck="true">// 如果有中介者，通过中介者去修改 B</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m<span class="token punctuation">.</span><span class="token function">setB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token function">setNumber</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> num
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m<span class="token punctuation">.</span><span class="token function">setA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mediator</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
a<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>number<span class="token punctuation">,</span> b<span class="token punctuation">.</span>number<span class="token punctuation">)</span>
b<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>number<span class="token punctuation">,</span> b<span class="token punctuation">.</span>number<span class="token punctuation">)</span></code></pre>
<h4 id="设计原则验证-4"><a href="#设计原则验证-4" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul>
<li>将各个关联对象通过中介者隔离</li>
<li>符合开放封闭原则</li>
</ul>
<h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><ul>
<li>将数据操作和数据结构进行分离</li>
<li>使用场景不多</li>
</ul>
<h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><ul>
<li>描述语言语法如何定义，如何解释和编译</li>
<li>用于专业场景</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/2020/06/02/design-pattern/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="9-行为型：状态模式"><a href="#9-行为型：状态模式" class="headerlink" title="9 行为型：状态模式"></a>9 行为型：状态模式</h2><h3 id="状态模式之掘金小册"><a href="#状态模式之掘金小册" class="headerlink" title="状态模式之掘金小册"></a>状态模式之掘金小册</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">-</span> 美式咖啡态（american<span class="token punctuation">)</span>：只吐黑咖啡
<span class="token operator">-</span> <span class="token function">普通拿铁态</span><span class="token punctuation">(</span>latte<span class="token punctuation">)</span>：黑咖啡加点奶
<span class="token operator">-</span> 香草拿铁态（vanillaLatte）：黑咖啡加点奶再加香草糖浆
<span class="token operator">-</span> <span class="token function">摩卡咖啡态</span><span class="token punctuation">(</span>mocha<span class="token punctuation">)</span>：黑咖啡加点奶再加点巧克力</code></pre>
<p>初代代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">changeState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 记录当前状态</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">'american'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 这里用 console 代指咖啡制作流程的业务逻辑</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我只吐黑咖啡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">'latte'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`给黑咖啡加点奶`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">'vanillaLatte'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'黑咖啡加点奶再加香草糖浆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">'mocha'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'黑咖啡加点奶再加点巧克力'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>单一职责原则</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">CoffeeMaker</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑
  **/</span>
    <span class="token comment" spellcheck="true">// 初始化状态，没有切换任何咖啡模式</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'init'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">changeState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 记录当前状态</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">'american'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 这里用 console 代指咖啡制作流程的业务逻辑</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">americanProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">'latte'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">latteProcress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">'vanillaLatte'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">vanillaLatteProcress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">'mocha'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mochaProcress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">americanProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我只吐黑咖啡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token punctuation">}</span>

  <span class="token function">latteProcress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">americanProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'加点奶'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>

  <span class="token function">vanillaLatteProcress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">latteProcress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'再加香草糖浆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">mochaProcress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">latteProcress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'再加巧克力'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> mk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mk<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token string">'latte'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>开放封闭再改造一下，按照策略模式来</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> stateToProcessor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">american</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我只吐黑咖啡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">latte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">american</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'加点奶'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">vanillaLatte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">latte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'再加香草糖浆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mocha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">latte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'再加巧克力'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CoffeeMaker</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑
  **/</span>
    <span class="token comment" spellcheck="true">// 初始化状态，没有切换任何咖啡模式</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'init'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 关注咖啡机状态切换函数</span>
  <span class="token function">changeState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 记录当前状态</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 若状态不存在，则返回</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stateToProcessor<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stateToProcessor<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> mk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mk<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token string">'latte'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>但这里有一点大家需要引起注意：这种方法仅仅是看上去完美无缺，其中却暗含一个非常重要的隐患——stateToProcessor 里的工序函数，感知不到咖啡机的内部状况。</p>
<h4 id="策略与状态的辨析"><a href="#策略与状态的辨析" class="headerlink" title="策略与状态的辨析"></a>策略与状态的辨析</h4><p>怎么理解这个问题？大家知道，策略模式是对算法的封装。算法和状态对应的行为函数虽然本质上都是行为，但是算法的独立性可高多了。</p>
<p>比如说我一个询价算法，我只需要读取一个数字，我就能啪啪三下五除二给你吐出另一个数字作为返回结果——它和计算主体之间可以是分离的，我们只要关注计算逻辑本身就可以了。</p>
<p>但状态可不一样了。拿咱们咖啡机来说，为了好懂，咱写代码的时候把真正咖啡的制作工序用 console 来表示了。但大家都知道，做咖啡要考虑的东西可太多了。 比如咱们做拿铁，拿铁里的牛奶从哪来，是不是从咖啡机的某个储物空间里去取？再比如我们行为函数是不是应该时刻感知咖啡机每种原材料的用量、进而判断自己的工序还能不能如期执行下去？这就决定了行为函数必须能很方便地拿到咖啡机这个主体的各种信息——它必须得对主体有感知才行。</p>
<p>策略模式和状态模式确实是相似的，它们都封装行为、都通过委托来实现行为分发。<br>但策略模式中的行为函数是”潇洒“的行为函数，它们不依赖调用主体、互相平行、各自为政，井水不犯河水。而状态模式中的行为函数，首先是和状态主体之间存在着关联，由状态主体把它们串在一起；另一方面，正因为关联着同样的一个（或一类）主体，所以不同状态对应的行为函数可能并不会特别割裂。</p>
<h4 id="进一步改造"><a href="#进一步改造" class="headerlink" title="进一步改造"></a>进一步改造</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">CoffeeMaker</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'init'</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>leftMilk <span class="token operator">=</span> <span class="token string">'500ml'</span>
    <span class="token punctuation">}</span>

    stateToProcessor <span class="token operator">=</span> <span class="token punctuation">{</span>
        that<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
        <span class="token function">american</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'咖啡机现在的牛奶存储量是: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>that<span class="token punctuation">.</span>leftMilk<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我只吐黑咖啡'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">latte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">american</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'加点奶'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">vanillaLatte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">latte</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'再加香草糖浆'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mocha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">latte</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'再加巧克力'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">changeState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stateToProcessor<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stateToProcessor<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> mk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
mk<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token string">'latte'</span><span class="token punctuation">)</span></code></pre>
<h3 id="状态模式之慕课网"><a href="#状态模式之慕课网" class="headerlink" title="状态模式之慕课网"></a>状态模式之慕课网</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul>
<li>一个对象有状态变化</li>
<li>每次状态变化都会出发一个逻辑</li>
<li>不能总是用 if…else控制</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>交通信号灯不同颜色的变化</p>
<h5 id="传统-UML-类图"><a href="#传统-UML-类图" class="headerlink" title="传统 UML 类图"></a>传统 UML 类图</h5><p><img src="/images/image-20191109192810908.png" alt="image-20191109192810908"></p>
<h5 id="简化-UML-类图"><a href="#简化-UML-类图" class="headerlink" title="简化 UML 类图"></a>简化 UML 类图</h5><p><img src="/images/image-20191109192847012.png" alt="image-20191109192847012"></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color
    <span class="token punctuation">}</span>

    <span class="token function">handle</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`turn to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> light.`</span></span><span class="token punctuation">)</span>
        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 主体 </span>
<span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>

    <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
    <span class="token punctuation">}</span>

    <span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>使用</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> green <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> yellow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> red <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 绿灯亮了</span>
green<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 黄灯亮了</span>
yellow<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 红灯亮了</span>
red<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><h5 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h5><ul>
<li>有限个状态、以及在这些状态之间的变化</li>
<li>如交通信号灯</li>
<li>推荐一个开源的 lib： javascript-state-machine</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> StateMachine <span class="token keyword">from</span> <span class="token string">'javascript-state-machine'</span>

<span class="token keyword">let</span> fsm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StateMachine</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  init<span class="token punctuation">:</span> <span class="token string">'收藏'</span><span class="token punctuation">,</span>
    transitions<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> <span class="token string">'doStore'</span><span class="token punctuation">,</span>
      <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'收藏'</span><span class="token punctuation">,</span>
      to<span class="token punctuation">:</span> <span class="token string">'取消收藏'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> <span class="token string">'deleteStore'</span><span class="token punctuation">,</span>
      <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'取消收藏'</span><span class="token punctuation">,</span>
      to<span class="token punctuation">:</span> <span class="token string">'收藏'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function">onDoStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'收藏成功'</span><span class="token punctuation">)</span>
      <span class="token function">updateText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">onDeleteStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'取消收藏'</span><span class="token punctuation">)</span>
      <span class="token function">updateText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> $btn <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span>

$btn<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fsm<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">'收藏'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fsm<span class="token punctuation">.</span><span class="token function">doStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    fsm<span class="token punctuation">.</span>deleteStore
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">updateText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  $btn<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>fsm<span class="token punctuation">.</span>state<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 初始化文案</span>
<span class="token function">updateText</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h5 id="写一个简单的-Promise"><a href="#写一个简单的-Promise" class="headerlink" title="写一个简单的 Promise"></a>写一个简单的 Promise</h5><ul>
<li>三种状态 pending fulfilled rejected</li>
<li>pending=&gt;fullfilled</li>
<li>pending =&gt; rejected</li>
<li>不能逆向变化</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fsm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StateMachine</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    init<span class="token punctuation">:</span> <span class="token string">'pending'</span><span class="token punctuation">,</span>
    transitions<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> <span class="token string">'resolve'</span><span class="token punctuation">,</span>
            <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'pending'</span><span class="token punctuation">,</span>
            to<span class="token punctuation">:</span> <span class="token string">'fulfilled'</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> <span class="token string">'reject'</span><span class="token punctuation">,</span>
            <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'pending'</span><span class="token punctuation">,</span>
            to<span class="token punctuation">:</span> <span class="token string">'rejected'</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 参数 state 当前状态</span>
        <span class="token comment" spellcheck="true">// 参数 data 当前 MyPromise 的实例</span>
        onResolve<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data<span class="token punctuation">.</span>successList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        onReject<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data<span class="token punctuation">.</span>failList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>successList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>failList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fsm<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fsm<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">then</span><span class="token punctuation">(</span>successFn<span class="token punctuation">,</span> failFn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>successList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>successFn<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>failList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>failFn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">loadImg</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>
    img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'load fail'</span><span class="token punctuation">)</span>
    img<span class="token punctuation">.</span>src<span class="token operator">=</span> src<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> promise<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/img/bd_logo1.png'</span><span class="token punctuation">)</span>
result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>img <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fail1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>img <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fail2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h5 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h5><ul>
<li>将状态对象和主题对象分离，状态的变化逻辑单独处理</li>
<li>符合开放封闭原则</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>imooc 去哪儿火车票学习笔记</title>
    <url>/2020/07/09/fe-frameworkds/imooc%20%E5%8E%BB%E5%93%AA%E5%84%BF%E7%81%AB%E8%BD%A6%E7%A5%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h2><ul>
<li>渐进式网络应用</li>
<li>可控的静态缓存</li>
<li>离线访问能力</li>
<li>优化载入速度</li>
</ul>
<h3 id="效率类"><a href="#效率类" class="headerlink" title="效率类"></a>效率类</h3><ul>
<li>iconfont</li>
<li>snippets</li>
</ul>
<h3 id="原则类"><a href="#原则类" class="headerlink" title="原则类"></a>原则类</h3><ul>
<li>职责分离<ul>
<li>两耳不闻窗外事</li>
<li>模块解耦</li>
<li>优化可维护性</li>
</ul>
</li>
</ul>
<h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><ul>
<li>Context</li>
<li>ContextType</li>
<li>Lazy</li>
<li>Suspense</li>
<li>memo</li>
</ul>
<h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><ul>
<li>Context 提供了一种方式，能够让数据在组件树中传递，而不必一级一级手动传递</li>
<li>损失了一部分独立性</li>
<li>context<ul>
<li>provider</li>
<li>consumer</li>
</ul>
</li>
<li>API<ul>
<li>createContext(defaultValue?)</li>
</ul>
</li>
</ul>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token punctuation">,</span> createContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> BatteryContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Middle</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Leaf</span><span class="token punctuation">/></span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> contextType <span class="token operator">=</span> BatteryContext<span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> battery <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Battery<span class="token punctuation">:</span> <span class="token punctuation">{</span>battery<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 或者在组件的 constructor 之中声明 this.state</span>
  <span class="token comment" spellcheck="true">// 这个是新写法</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
     battery<span class="token punctuation">:</span> <span class="token number">60</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> battery <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BatteryContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>battery<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>battery<span class="token punctuation">:</span> battery<span class="token number">-1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>change battery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Middle</span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BatteryContext.Provider</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre>
<h3 id="Lazy-和-Suspense"><a href="#Lazy-和-Suspense" class="headerlink" title="Lazy 和 Suspense"></a>Lazy 和 Suspense</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>暂时没有使用的资源 =&gt; 延迟加载</p>
<h4 id="途径"><a href="#途径" class="headerlink" title="途径"></a>途径</h4><ul>
<li><p>webpack code spliting</p>
</li>
<li><p>import</p>
<ul>
<li>import from 静态导入模块</li>
<li>import(‘XXX组件’).then(………)</li>
</ul>
</li>
<li><p>lazy 封装了组件的导入行为</p>
</li>
</ul>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token punctuation">,</span> lazy<span class="token punctuation">,</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "About" */</span><span class="token string">'./About.jsx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// ErrorBoundary 后台组件渲染错误</span>
<span class="token comment" spellcheck="true">// 利用 componentDidCatch</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    hasError<span class="token punctuation">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// componentDidCatch() {</span>
  <span class="token comment" spellcheck="true">//   console.log('error')</span>
  <span class="token comment" spellcheck="true">//   this.setState({</span>
  <span class="token comment" spellcheck="true">//     hasError: true</span>
  <span class="token comment" spellcheck="true">//   })</span>
  <span class="token comment" spellcheck="true">// }</span>

  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      hasError<span class="token punctuation">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'has error'</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'no error'</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback={&lt;div</span><span class="token punctuation">></span></span>loading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>About</span><span class="token punctuation">/></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<h3 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h3><p>下面这样写，即使 Foo 组件不需要渲染也会一直调用 Foo 的render 方法</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Foo render'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>加一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Foo</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mike<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre>
<p>优化一下，试用一下 shouldComponentUpdate：</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Foo render'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>加一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Foo</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mike<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre>
<p>在优化一下，使用 PureComponent，注意，只有传入属性本身的对比，如果属性是对象，对象内部的属性变化，就无能为力了。</p>
<pre><code>import React, {Component, PureComponent } from &#39;react&#39;;
import &#39;./App.css&#39;;

class Foo extends PureComponent {
  render() {
    console.log(&#39;Foo render&#39;)
    return null
  }
}

class App extends Component {
  state = {
    count: 0
  }
  render() {
    return (
      &lt;div&gt;
        &lt;button onClick={() =&gt; this.setState({count: this.state.count+1})}&gt;加一&lt;/button&gt;
        &lt;Foo name=&quot;Mike&quot;/&gt;
      &lt;/div&gt;
    )
  }
}

export default App;</code></pre><p>来展示一下 bug 的代码，本该变化的结果没变化，注意只有props 的第一级变化才会触发变化</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token punctuation">,</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Foo render'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    person<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        age<span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>person
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          person<span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>person<span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span></span><span class="token attr-name">}</span><span class="token punctuation">></span></span>
          加一
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Foo</span> <span class="token attr-name">person</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>person<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>使用 无状态 组件 Foo 和 memo 的解决方案</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token punctuation">,</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> Foo <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Foo render'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
          加一
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Foo</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mike<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>推论：拆分的越细，prop 和 state 越简单，越容易写成 pureComponent 或者 memo 的形式</p>
<h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><h3 id="什么是-hooks"><a href="#什么是-hooks" class="headerlink" title="什么是 hooks"></a>什么是 hooks</h3><blockquote>
<p>Hooks let you use state and other React features without writing a class</p>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="原始写法"><a href="#原始写法" class="headerlink" title="原始写法"></a>原始写法</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span>
        size<span class="token punctuation">:</span> <span class="token punctuation">[</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    onResize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      size<span class="token punctuation">:</span> <span class="token punctuation">[</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onResize<span class="token punctuation">)</span>
    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

    <span class="token function">componentWillUnmout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onResize<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span> X <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="原始写法优化（渲染组件）"><a href="#原始写法优化（渲染组件）" class="headerlink" title="原始写法优化（渲染组件）"></a>原始写法优化（渲染组件）</h4><pre><code>以后补充下</code></pre><h4 id="原始写法优化（高阶组件）"><a href="#原始写法优化（高阶组件）" class="headerlink" title="原始写法优化（高阶组件）"></a>原始写法优化（高阶组件）</h4><pre><code>以后补充下</code></pre><h3 id="类组件不足"><a href="#类组件不足" class="headerlink" title="类组件不足"></a>类组件不足</h3><ul>
<li>状态逻辑复用难<ul>
<li>缺少复用机制</li>
<li>渲染属性和高阶组件导致层级冗余</li>
</ul>
</li>
<li>趋向复杂难以维护<ul>
<li>生命周期函数混杂不相干的逻辑</li>
<li>想干逻辑分散在不同的生命周期中</li>
</ul>
</li>
<li>this 指向困扰<ul>
<li>内联函数过度创建新句柄，导致子组件过度渲染，比如传递<code>() =&gt; {}</code></li>
<li>类成员函数不能保证 this，必须使用 this 属性来声明回调函数</li>
</ul>
</li>
<li>Hooks 优势：优化类组件的三大问题<ul>
<li>函数组件无 this 问题，函数内部没有实例化的概念，就没有了 this 指向的问题</li>
<li>自定义Hook 方便复用状态逻辑（hooks 是函数组件内部调用的特殊函数，最常见的有 useEffect 和 useState）</li>
<li>副作用的关注点分离（除了数据向视图转化之外的其他东西，例如绑定解绑事件、发送请求、访问原生 DOM 元素、本地持久化缓存….，每个 useEffect 只处理一种副作用）</li>
</ul>
</li>
</ul>
<h3 id="写法优化（Hooks-写法）"><a href="#写法优化（Hooks-写法）" class="headerlink" title="写法优化（Hooks 写法）"></a>写法优化（Hooks 写法）</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token function">useSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span>title <span class="token operator">=</span> size<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
      <span class="token punctuation">{</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">*</span> <span class="token punctuation">{</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="使用-State-Hooks"><a href="#使用-State-Hooks" class="headerlink" title="使用 State Hooks"></a>使用 State Hooks</h3><h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><p>class 组件</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">+</span> <span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>hooks 组件</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">+</span> <span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>count<span class="token punctuation">:</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre>
<p>注意：</p>
<ul>
<li>调用规规矩矩来</li>
<li>useState 可以传入一个函数，来进行延迟初始化，处理复杂的逻辑，避免每次都执行复杂逻辑 </li>
</ul>
<h3 id="使用-Effect-Hooks"><a href="#使用-Effect-Hooks" class="headerlink" title="使用 Effect Hooks"></a>使用 Effect Hooks</h3><h4 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h4><ul>
<li>绑定事件</li>
<li>网络请求</li>
<li>访问 DOM</li>
</ul>
<h4 id="副作用时机"><a href="#副作用时机" class="headerlink" title="副作用时机"></a>副作用时机</h4><ul>
<li>Mount 之后，之前做法componentDidMount</li>
<li>Update 之后，之前做法componentDidUpdate</li>
<li>Unmout 之前，之前做法componentWillUnmount</li>
<li>以后都是 useEffect</li>
</ul>
<h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><ul>
<li>组件每次 渲染 之后调用</li>
<li>并且根据自定义状态决定调用或者不调用</li>
<li>useEffect 的第二个参数<ul>
<li>不传数组，每次运行之后都会执行 useEffect</li>
<li>传空数组，只 mount 和 unmonut 的时候运行</li>
<li>首次渲染和数组中的元素变化的时候会去执行</li>
<li>也就是说，只有数组的每一项都没变的情况下，useEffect 才不会执行，第一次肯定会执行</li>
</ul>
</li>
</ul>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>size<span class="token punctuation">,</span> setSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    width<span class="token punctuation">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>
    height<span class="token punctuation">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> onResize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      width<span class="token punctuation">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>
      height<span class="token punctuation">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"count:"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span>title <span class="token operator">=</span> count
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"绑定事件"</span><span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> onResize<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"解绑事件"</span><span class="token punctuation">)</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> onResize<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">+</span> <span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>count<span class="token punctuation">:</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span>，size<span class="token punctuation">:</span><span class="token punctuation">{</span>size<span class="token punctuation">.</span>width<span class="token punctuation">}</span> <span class="token operator">*</span> <span class="token punctuation">{</span>size<span class="token punctuation">.</span>height<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre>
<h3 id="4-4-使用-Context-Hooks"><a href="#4-4-使用-Context-Hooks" class="headerlink" title="4-4 使用 Context Hooks"></a>4-4 使用 Context Hooks</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> createContext<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">const</span> CountContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">+</span> <span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CountContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Counter</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CountContext.Provider</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>CountContext<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre>
<h3 id="4-5-使用-Memo、Callback-Hooks"><a href="#4-5-使用-Memo、Callback-Hooks" class="headerlink" title="4-5 使用 Memo、Callback Hooks"></a>4-5 使用 Memo、Callback Hooks</h3><p>useMemo 判断依赖是否改变，进而判断是否触发一段逻辑</p>
<p>useMemo 渲染期间调用</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">+</span> <span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        double<span class="token punctuation">:</span> <span class="token punctuation">{</span>double<span class="token punctuation">}</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Counter</span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Counter</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>imooc 实战</tag>
        <tag>react</tag>
        <tag>redux</tag>
      </tags>
  </entry>
  <entry>
    <title>React 学习笔记</title>
    <url>/2020/06/02/fe-frameworkds/react%20%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="React-学习笔记"><a href="#React-学习笔记" class="headerlink" title="React 学习笔记"></a>React 学习笔记</h1><p>代码的注释应该是解释为什么，而不是解释是什么</p>
<h1 id="撩课-react"><a href="#撩课-react" class="headerlink" title="撩课 react"></a>撩课 react</h1><p>props 传入构造函数</p>
<p>state 构造函数自带</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 创建 组件类</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true">// 2. 初始化 state</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
            age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 3. 设置 props 属性的默认值</span>
  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> <span class="token string">'阿财'</span><span class="token punctuation">,</span>
      gender<span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 4. 设置 props 属性的类型</span>
  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
      gender<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>stringjav
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props
      <span class="token keyword">const</span> <span class="token punctuation">{</span>age<span class="token punctuation">,</span> friends<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>p<span class="token operator">></span>狗的名字：<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
              <span class="token operator">&lt;</span>p<span class="token operator">></span>狗的性别：<span class="token punctuation">{</span>gender<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
                <span class="token operator">&lt;</span>p<span class="token operator">></span>狗的年龄：<span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
              <span class="token operator">&lt;</span>p<span class="token operator">></span>狗的性别：<span class="token punctuation">{</span>
                  friends<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>friend<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
                      <span class="token operator">&lt;</span>span key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
                  <span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">addYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>长一岁<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">addYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> tempArr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>friends
    tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'狗友'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          ages<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
          friends<span class="token punctuation">:</span> tempArr
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>CustomTextInput<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h2 id="ref-使用场景"><a href="#ref-使用场景" class="headerlink" title="ref 使用场景"></a>ref 使用场景</h2><ul>
<li>处理焦点、文本选择或者媒体控制</li>
<li>触发强制动画</li>
<li>集成第三方 DOM 库</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">CustomTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>myInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>myInput<span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入"</span><span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>获取焦点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>myInput<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>CustomTextInput<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h2 id="组件的例子"><a href="#组件的例子" class="headerlink" title="组件的例子"></a>组件的例子</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>React 练习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
      <span class="token selector"><span class="token id">#app</span> </span><span class="token punctuation">{</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">fieldset </span><span class="token punctuation">{</span>
        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid purple<span class="token punctuation">;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">fieldset input </span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">table </span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid purple<span class="token punctuation">;</span>
        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">thead </span><span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/prop-types.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
      <span class="token comment" spellcheck="true">// 1. 父组件 -------------------------------</span>
      <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
        <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 初始化状态</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
            studentArr<span class="token punctuation">:</span> <span class="token punctuation">[</span>
              <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"周杰伦"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> phone<span class="token punctuation">:</span> <span class="token string">"18899989839"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"谢霆锋"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> phone<span class="token punctuation">:</span> <span class="token string">"18299839890"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"刘德华"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> phone<span class="token punctuation">:</span> <span class="token string">"18998938783"</span> <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>

          <span class="token comment" spellcheck="true">// 绑定this</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>delFromArrWithIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delFromArrWithIndex<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>addToArr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addToArr<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/**
         * 根据索引删除一条学生记录
         * @param index
         */</span>
        <span class="token function">delFromArrWithIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 1. 删除</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> studentArr <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
          studentArr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 2. 更新状态</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            studentArr
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/**
         * 插入一条学生记录
         * @param {object}student
         */</span>
        <span class="token function">addToArr</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 1. 插入</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> studentArr <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
          studentArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 2. 更新数据</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            studentArr
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>Add addToArr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addToArr<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>List
                studentArr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>studentArr<span class="token punctuation">}</span>
                delFromArr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>delFromArrWithIndex<span class="token punctuation">}</span>
              <span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment" spellcheck="true">// 2. 子组件 - 添加版块 -------------------------------</span>
      <span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
        <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 绑定ref</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>stuName <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>stuAge <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>stuGender <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>stuPhone <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//  设置props中属性的类型</span>
        <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
          addToArr<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>fieldset<span class="token operator">></span>
                <span class="token operator">&lt;</span>legend<span class="token operator">></span><span class="token function">撩课信息录入系统</span><span class="token punctuation">(</span>React版<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>legend<span class="token operator">></span>
                <span class="token operator">&lt;</span>div<span class="token operator">></span>
                  <span class="token operator">&lt;</span>span<span class="token operator">></span>姓名<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
                  <span class="token operator">&lt;</span>input
                    ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuName<span class="token punctuation">}</span>
                    type<span class="token operator">=</span><span class="token string">"text"</span>
                    placeholder<span class="token operator">=</span><span class="token string">"请输入姓名"</span>
                  <span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>div<span class="token operator">></span>
                  <span class="token operator">&lt;</span>span<span class="token operator">></span>年龄<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
                  <span class="token operator">&lt;</span>input
                    ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuAge<span class="token punctuation">}</span>
                    type<span class="token operator">=</span><span class="token string">"text"</span>
                    placeholder<span class="token operator">=</span><span class="token string">"请输入年龄"</span>
                  <span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>div<span class="token operator">></span>
                  <span class="token operator">&lt;</span>span<span class="token operator">></span>性别<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
                  <span class="token operator">&lt;</span>select ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuGender<span class="token punctuation">}</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"男"</span><span class="token operator">></span>男<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
                    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"女"</span><span class="token operator">></span>女<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
                  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>div<span class="token operator">></span>
                  <span class="token operator">&lt;</span>span<span class="token operator">></span>手机<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
                  <span class="token operator">&lt;</span>input
                    ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuPhone<span class="token punctuation">}</span>
                    type<span class="token operator">=</span><span class="token string">"text"</span>
                    placeholder<span class="token operator">=</span><span class="token string">"请输入手机号码"</span>
                  <span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dealWithClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>创建新用户<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>fieldset<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 点击添加按钮</span>
        <span class="token function">dealWithClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 1. 读取用户输入的数据</span>
          <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stuName<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
          <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stuAge<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
          <span class="token keyword">const</span> gender <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stuGender<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
          <span class="token keyword">const</span> phone <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stuPhone<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">;</span>

          <span class="token comment" spellcheck="true">// 2. 数据的校验</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> <span class="token operator">!</span>age <span class="token operator">||</span> <span class="token operator">!</span>gender <span class="token operator">||</span> <span class="token operator">!</span>phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"输入的数据不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token comment" spellcheck="true">// 3. 添加数据</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">addToArr</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> phone <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment" spellcheck="true">// 4. 清除输入框中的数据</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>stuName<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>stuAge<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>stuGender<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>stuPhone<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment" spellcheck="true">// 3. 子组件 - 展示版块 -------------------------------</span>
      <span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//  设置props中属性的类型</span>
        <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
          studentArr<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>array<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
          delFromArr<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// console.log(this.props.studentArr);</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> studentArr<span class="token punctuation">,</span> delFromArr <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>table<span class="token operator">></span>
                <span class="token operator">&lt;</span>thead<span class="token operator">></span>
                  <span class="token operator">&lt;</span>tr<span class="token operator">></span>
                    <span class="token operator">&lt;</span>td<span class="token operator">></span>姓名<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
                    <span class="token operator">&lt;</span>td<span class="token operator">></span>性别<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
                    <span class="token operator">&lt;</span>td<span class="token operator">></span>年龄<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
                    <span class="token operator">&lt;</span>td<span class="token operator">></span>手机<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
                    <span class="token operator">&lt;</span>td<span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
                  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span>
                <span class="token operator">&lt;</span>tbody<span class="token operator">></span>
                  <span class="token punctuation">{</span>studentArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
                    <span class="token operator">&lt;</span>tr key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">></span>
                      <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
                      <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>gender<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
                      <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
                      <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>phone<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
                      <span class="token operator">&lt;</span>td<span class="token operator">></span>
                        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">delFromArr</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
                      <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>
                  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment" spellcheck="true">// 4. 渲染组件</span>
      ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="阶段划分"><a href="#阶段划分" class="headerlink" title="阶段划分"></a>阶段划分</h3><ol>
<li>初始化阶段<ol>
<li><strong>constructor</strong></li>
<li>static getDerivedStateFromProps()</li>
<li><strong>componentWillMount()</strong> / UNSAFE_componentWillMount()</li>
<li><strong>render()</strong></li>
<li><strong>componentDidMount()</strong></li>
</ol>
</li>
<li>更新阶段（props 或者 state 的改变可能会引起组件的更新，组件重新渲染的过程中会调用）<ol>
<li>componentWillReceiveProps()</li>
<li>UNSAFE_componentWillReceiveProps()</li>
<li>static getDerivedStateFromProps()</li>
<li>shouldComponentUpdate()</li>
<li><strong>componentWillUpdate()</strong> / UNSAFE_componentWillUpdate()：内存里边，数据已经是最新的了，界面还没有更新</li>
<li><strong>render()</strong></li>
<li>getSnapshotBeforeUpdate()</li>
<li><strong>componentDidUpdate()</strong></li>
</ol>
</li>
<li>卸载阶段<ol>
<li>componentWillUnmount()</li>
</ol>
</li>
<li>错误处理<ol>
<li>componentDidCatch()</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux 基础</title>
    <url>/2020/06/02/fe-frameworkds/redux%20%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Redux-学习笔记"><a href="#Redux-学习笔记" class="headerlink" title="Redux 学习笔记"></a>Redux 学习笔记</h1><h2 id="Redux-概念简述"><a href="#Redux-概念简述" class="headerlink" title="Redux 概念简述"></a>Redux 概念简述</h2><p> react 只是一个数据层的框架，还需要一个数据层的框架与之配合</p>
<p>Redux = Reducer + Flux</p>
<h2 id="Redux-的工作流程"><a href="#Redux-的工作流程" class="headerlink" title="Redux 的工作流程"></a>Redux 的工作流程</h2><h3 id="图书馆类比-Redux"><a href="#图书馆类比-Redux" class="headerlink" title="图书馆类比 Redux"></a>图书馆类比 Redux</h3><ul>
<li>React Components（借书的用户）</li>
<li>Action Creators（我要借什么书）</li>
<li>Store（图书馆管理员，记不住所有书的情况）存储数据的公共区域</li>
<li>Reducers 图书管理员，手中记录所有图书的账本，借书的时候查看一下，有没有这本书，还书的时候查看一下，书放在哪儿</li>
</ul>
<h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><ul>
<li>ActionCreaters =&gt; Store &lt;=&gt; Reducers</li>
</ul>
<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><ul>
<li>ActionCreaters dispatch action 到 store 中，告诉 Store 组件要或去数据</li>
<li>Sotre 知道了你要获取数据，Store 到 Reducers 里边去查一下应该返回什么样的数据</li>
<li>Store 将数据返回给组件</li>
</ul>
<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><ul>
<li><p>ActionCreaters dispatch action 到 store 中，告诉 Store 组件要或去修改数据</p>
</li>
<li><p>Store 知道了你要修改数据，他问一下 Reducer Store 应该如何修改数据</p>
</li>
<li><p>Store 更改完数据之后，告诉 React Component 数据改完了，你可以重新获取数据了</p>
</li>
<li><p>React Component 重新获取数据</p>
</li>
</ul>
<h2 id="redux-使用"><a href="#redux-使用" class="headerlink" title="redux 使用"></a>redux 使用</h2><p>src/ToDoList.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token string">'antd/dist/antd.css'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Input<span class="token punctuation">,</span> Button<span class="token punctuation">,</span> List <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>

<span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>padding<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Input 
          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span> 
          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span> placeholder<span class="token operator">=</span><span class="token string">"todo info"</span>
          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> marginRight<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Input<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">></span>保存<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span>List
          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginTop<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">380</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
          bordered
          dataSource<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">}</span>
          renderItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>List<span class="token punctuation">.</span>Item onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleItemItemDelete<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>
              <span class="token punctuation">{</span>item<span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token punctuation">.</span>Item<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">handleInputChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>
      type<span class="token punctuation">:</span> <span class="token string">'change_input_value'</span><span class="token punctuation">,</span>
      value<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">handleStoreChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请填写内容'</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>
      type<span class="token punctuation">:</span> <span class="token string">'add_todo_item'</span><span class="token punctuation">,</span>
      value<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue
    <span class="token punctuation">}</span>
    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">handleItemItemDelete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>
      type<span class="token punctuation">:</span> <span class="token string">'delete_todo_item'</span><span class="token punctuation">,</span>
      value<span class="token punctuation">:</span> index
    <span class="token punctuation">}</span>
    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> TodoList</code></pre>
<p>src/store/index.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span>
<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  reducer<span class="token punctuation">,</span>
  window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre>
<p>src/store/reducer.js</p>
<p>注意：<strong>reducer 可以接受 state，但是绝对不能修改 state</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>
  inputValue<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
  list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// reducer 可以接受 state，但是绝对不能修改 state</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'change_input_value'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
    newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>value
    <span class="token keyword">return</span> newState
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'add_todo_item'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
    newState<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">return</span> newState
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'delete_todo_item'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
    newState<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> newState
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> state
<span class="token punctuation">}</span></code></pre>
<h3 id="ActionTypes-的拆分"><a href="#ActionTypes-的拆分" class="headerlink" title="ActionTypes 的拆分"></a>ActionTypes 的拆分</h3><p>src/store/actionTypes.js</p>
<p>这样可以让我们更容易发现错误，常量和变量写错了，代码会迅速报错，但是写一个字符串就很难排查错误了</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> CHANGE_INPUT_VALUE <span class="token operator">=</span> <span class="token string">'change_input_value'</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> ADD_TODO_ITEM <span class="token operator">=</span> <span class="token string">'add_todo_item'</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> DELETE_TODO_ITEM <span class="token operator">=</span> <span class="token string">'delete_todo_item'</span></code></pre>
<h3 id="使用-actionCreator-统一创建-action"><a href="#使用-actionCreator-统一创建-action" class="headerlink" title="使用 actionCreator 统一创建 action"></a>使用 actionCreator 统一创建 action</h3><p>不正规方法</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token punctuation">:</span> DELETE_TODO_ITEM<span class="token punctuation">,</span>
  value<span class="token punctuation">:</span> index
<span class="token punctuation">}</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span></code></pre>
<p>正规的方法</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> CHANGE_INPUT_VALUE <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actionTypes'</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> getInputChangeAction <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token punctuation">:</span> CHANGE_INPUT_VALUE<span class="token punctuation">,</span>
    value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>这样可以提高代码的可维护性</li>
<li>方便之后测试</li>
</ul>
<h3 id="ruducer-补充说明"><a href="#ruducer-补充说明" class="headerlink" title="ruducer 补充说明"></a>ruducer 补充说明</h3><h4 id="原则一-stroe-是惟一的"><a href="#原则一-stroe-是惟一的" class="headerlink" title="原则一 stroe 是惟一的"></a>原则一 stroe 是惟一的</h4><h4 id="原则二-只有-store-能够改变自己的内容"><a href="#原则二-只有-store-能够改变自己的内容" class="headerlink" title="原则二 只有 store 能够改变自己的内容"></a>原则二 只有 store 能够改变自己的内容</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'change_input_value'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
    newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>value
    <span class="token keyword">return</span> newState
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> state
<span class="token punctuation">}</span></code></pre>
<p>注意：此时我们返回的是一个新的对象，我们没有在 reducer 里边修改 store，reducer 把这个新的对象返回给了 store，store 自己更新了这个数据。</p>
<p>reducer 可以接受 state，但是绝不能修改 state</p>
<h3 id="原则三-reducer-必须是纯函数"><a href="#原则三-reducer-必须是纯函数" class="headerlink" title="原则三 reducer 必须是纯函数"></a>原则三 reducer 必须是纯函数</h3><p>纯函数：</p>
<ul>
<li>给定固定的输入，就一定会有固定的输出</li>
<li>而且不会有副总用</li>
</ul>
<h3 id="reducx-核心-API"><a href="#reducx-核心-API" class="headerlink" title="reducx 核心 API"></a>reducx 核心 API</h3><ul>
<li><p>createStore</p>
</li>
<li><p>store.dispatch(action)</p>
</li>
<li><p>store.getState()</p>
</li>
<li><p>store.subscribe(() =&gt; {})</p>
</li>
</ul>
<h2 id="Redux-高级"><a href="#Redux-高级" class="headerlink" title="Redux 高级"></a>Redux 高级</h2><h3 id="UI-组件与容器组件的拆分"><a href="#UI-组件与容器组件的拆分" class="headerlink" title="UI 组件与容器组件的拆分"></a>UI 组件与容器组件的拆分</h3><ul>
<li>UI 组件：傻瓜组件，处理渲染</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Input<span class="token punctuation">,</span> Button<span class="token punctuation">,</span> List <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span>

<span class="token keyword">class</span> <span class="token class-name">TodoListUI</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>padding<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Input 
          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span> 
          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span>
          placeholder<span class="token operator">=</span><span class="token string">"todo info"</span>
          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> marginRight<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Input<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">></span>保存<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span>List
          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginTop<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">380</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
          bordered
          dataSource<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>list<span class="token punctuation">}</span>
          renderItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>List<span class="token punctuation">.</span>Item onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">handleItemItemDelete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>
              <span class="token punctuation">{</span>item<span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token punctuation">.</span>Item<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> TodoListUI</code></pre>
<ul>
<li>容器组件：聪明组件，处理逻辑</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token string">'antd/dist/antd.css'</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>
<span class="token keyword">import</span> TodoListUI <span class="token keyword">from</span> <span class="token string">'./TodoListUI'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getInputChangeAction<span class="token punctuation">,</span> getAddItemAction<span class="token punctuation">,</span> getDeleteItemAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store/actionCreators'</span>

<span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleItemItemDelete <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleItemItemDelete<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>TodoListUI
        inputValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span>
        handleInputChange <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span>
        handleBtnClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">}</span>
        list<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">}</span>
        handleItemItemDelete<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleItemItemDelete<span class="token punctuation">}</span>
      <span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">handleInputChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">getInputChangeAction</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请填写内容'</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">getAddItemAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>
    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">handleItemItemDelete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">getDeleteItemAction</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">handleStoreChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> TodoList</code></pre>
<h3 id="无状态组件"><a href="#无状态组件" class="headerlink" title="无状态组件"></a>无状态组件</h3><ul>
<li><p>当一个组件之中只有一个 render 函数的时候，就可以用无状态组件来定义它。</p>
</li>
<li><p>无状态组件的性能比较高</p>
</li>
<li><p>UI 组件通常定义为无状态组件</p>
</li>
</ul>
<p>src/TodoListUI.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Input<span class="token punctuation">,</span> Button<span class="token punctuation">,</span> List <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span>

<span class="token keyword">const</span> TodoListUI <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>padding<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Input 
        value<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span> 
        onChange<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span>
        placeholder<span class="token operator">=</span><span class="token string">"todo info"</span>
        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> marginRight<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Input<span class="token operator">></span>
      <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">></span>保存<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
      <span class="token operator">&lt;</span>List
        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginTop<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">380</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
        bordered
        dataSource<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>list<span class="token punctuation">}</span>
        renderItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>List<span class="token punctuation">.</span>Item onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token function">handleItemItemDelete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>
            <span class="token punctuation">{</span>item<span class="token punctuation">}</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token punctuation">.</span>Item<span class="token operator">></span>
        <span class="token punctuation">)</span><span class="token punctuation">}</span>
      <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> TodoListUI</code></pre>
<h3 id="使用-Redux-thunk-中间件，进行-ajax-请求"><a href="#使用-Redux-thunk-中间件，进行-ajax-请求" class="headerlink" title="使用 Redux-thunk 中间件，进行 ajax 请求"></a>使用 Redux-thunk 中间件，进行 ajax 请求</h3><p>redux 的一个中间件，可以把异步请求放入 redux 的 action 里边去编写</p>
<p>使用了 redux-thunk 之后：</p>
<ul>
<li>action之前必须是一个对象，加载 redux-thunk 之后，就可以是一个函数了</li>
<li>store 之前必须接受一个对象，加载 redux-thunk 之后，store 就可以接受函数了，而且它还会帮你自动执行以下这个函数</li>
</ul>
<p>src/store/index.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware<span class="token punctuation">,</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span>
<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">'redux-thunk'</span>
<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span>

<span class="token keyword">const</span> composeEnhancers <span class="token operator">=</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ <span class="token operator">?</span>
    window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><span class="token punctuation">(</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> compose
<span class="token keyword">const</span> enhancer <span class="token operator">=</span> <span class="token function">composeEnhancers</span><span class="token punctuation">(</span>
  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  reducer<span class="token punctuation">,</span>
  enhancer
<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre>
<p>src/store/actionCreators.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> getTodoList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"lv"</span><span class="token punctuation">,</span> <span class="token string">"jia"</span><span class="token punctuation">,</span> <span class="token string">"wen"</span><span class="token punctuation">]</span>
      <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">initListAction</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// ...</span></code></pre>
<p>src/TodoList.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span>
<span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ...</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">getTodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// ....</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// ...</span></code></pre>
<h3 id="什么是-redux-中间件"><a href="#什么是-redux-中间件" class="headerlink" title="什么是 redux 中间件"></a>什么是 redux 中间件</h3><p>介于 action 和 store 之间，对 dispatch 方法的一个封装或者说升级</p>
<p>最原始的dispatch 方法，只能接受一个对象，并且将它传给 store</p>
<p>升级之后，dispatch 可以接受函数作为参数，并且会执行函数，在函数内部决定将什么东西传递给 store</p>
<p>其他中间件：redux-logger、redux-saga</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>redux</tag>
      </tags>
  </entry>
  <entry>
    <title>掘金 vue 组件精讲笔记</title>
    <url>/2020/06/02/fe-frameworkds/%E6%8E%98%E9%87%91%20vue%20%E7%BB%84%E4%BB%B6%E7%B2%BE%E8%AE%B2%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="掘金-vue-组件精讲笔记"><a href="#掘金-vue-组件精讲笔记" class="headerlink" title="掘金 vue 组件精讲笔记"></a>掘金 vue 组件精讲笔记</h1><p>一个再复杂的组件，都是由三部分组成的：prop、event、slot，它们构成了 Vue.js 组件的 API。如果你开发的是一个通用组件，那一定要事先设计好这三部分，因为组件一旦发布，后面再修改 API 就很困难了，使用者都是希望不断新增功能，修复 bug，而不是经常变更接口。如果你阅读别人写的组件，也可以从这三个部分展开，它们可以帮助你快速了解一个组件的所有功能。</p>
<p><code>prop</code> 定义了这个组件有哪些可配置的属性，组件的核心功能也都是它来确定的。写通用组件时，props 最好用<strong>对象</strong>的写法，这样可以针对每个属性设置类型、默认值或自定义校验属性的值</p>
<p><strong>在组件开发中，最难的环节应当是解耦组件的交互逻辑，尽量把复杂的逻辑分发到不同的子组件中，然后彼此建立联系，在这其中，计算属性（computed）和混合（mixins）是两个重要的技术点，合理利用，就能发挥出 Vue.js 语言的最大特点：把状态（数据）的维护交给 Vue.js 处理，我们只专注在交互上。</strong></p>
<h2 id="组件的通信"><a href="#组件的通信" class="headerlink" title="组件的通信"></a>组件的通信</h2><h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide / inject"></a>provide / inject</h3><blockquote>
<p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。</p>
</blockquote>
<p>主要解决了跨级组件间的通信问题</p>
<p>使用场景：子组件获取上级组件的状态</p>
<p>father.vue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  provide<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> 'Aresn
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>son.vue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  inject<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p> provide 和 inject 绑定并<strong>不是可响应</strong>的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。</p>
</blockquote>
<p>使用 Vuex，最主要的目的是跨组件通信、全局数据维护、多人协同开发。需求比如有：用户的登录信息维护、通知信息维护等全局的状态和数据。</p>
<p>如何 自己实现一个 vuex</p>
<p>app.vue 是整个项目第一个被渲染的组件，而且只会渲染一次（即使切换路由，app.vue 也不会被再次渲染），利用这个特性，很适合做一次性全局的状态数据管理，例如，我们将用户的登录信息保存起来</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    provide <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        app<span class="token punctuation">:</span> <span class="token keyword">this</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        userInfo<span class="token punctuation">:</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      getUserInfo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 这里通过 ajax 获取用户信息后，赋值给 this.userInfo，以下为伪代码</span>
        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/user/info'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>userInfo <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>如果你的项目足够复杂，或需要多人协同开发时，在 <code>app.vue</code> 里会写非常多的代码，多到结构复杂难以维护。这时可以使用 Vue.js 的混合 <code>mixins</code>，将不同的逻辑分开到不同的 js 文件里。</p>
<p>下面是一个 mixin</p>
<p><em>user.js：</em></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      userInfo<span class="token punctuation">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    getUserInfo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 这里通过 ajax 获取用户信息后，赋值给 this.userInfo，以下为伪代码</span>
      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/user/info'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userInfo <span class="token operator">=</span> data<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>然后在 <code>app.vue</code> 中混合：</p>
<p><em>app.vue：</em></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">import</span> mixins_user <span class="token keyword">from</span> <span class="token string">'../mixins/user.js'</span><span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixins_user<span class="token punctuation">]</span><span class="token punctuation">,</span>
    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>

      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>独立组件使用 provide / inject 的场景，主要是具有联动关系的组件，比如接下来很快会介绍的第一个实战：具有数据校验功能的表单组件 Form。它其实是两个组件，一个是 Form，一个是 FormItem，FormItem 是 Form 的子组件，它会依赖 Form 组件上的一些特性（props），所以就需要得到父组件 Form</p>
<p>古老的做法</p>
<pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  form <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">'Form'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>$parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> parent<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>每个组件都可以设置 <code>name</code> 选项，作为组件名的标识，利用这个特点，通过向上遍历，直到找到需要的组件。</p>
<p>问题：</p>
<ul>
<li><p>父组件向子组件（跨级）传递数据</p>
</li>
<li><p>子组件向父组件（跨级）传递数据</p>
</li>
</ul>
<h3 id="派发与广播-——-自行实现-dispatch-和-broadcast-方法"><a href="#派发与广播-——-自行实现-dispatch-和-broadcast-方法" class="headerlink" title="派发与广播 —— 自行实现 dispatch 和 broadcast 方法"></a>派发与广播 —— 自行实现 dispatch 和 broadcast 方法</h3><p>自己监听自己 $emit 的事件</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleEmitEvent"</span><span class="token operator">></span>触发自定义事件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      handleEmitEvent <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 在当前组件上触发自定义事件 test，并传值</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'Hello Vue.js'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 监听自定义事件 test</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<p><strong>自行实现 dispatch 和 broadcast</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Emitter <span class="token keyword">from</span> <span class="token string">'../mixins/emitter.js'</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>Emitter<span class="token punctuation">]</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function">handleDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">handleBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><em>emitter.js</em></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">broadcast</span><span class="token punctuation">(</span>componentName<span class="token punctuation">,</span> eventname<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        cosnt name <span class="token operator">=</span> child<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> componentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      child<span class="token punctuation">.</span>$emit<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span>concat<span class="token punctuation">[</span>params<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      broadcast<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span><span class="token punctuation">[</span>componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>params<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span>componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$root
      <span class="token keyword">let</span> name <span class="token operator">=</span> parent<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name

      <span class="token keyword">while</span><span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> name <span class="token operator">!==</span> componentName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>$parent
          <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          name <span class="token operator">=</span> parent<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name
          <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent<span class="token punctuation">.</span>$emit<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">broadcast</span><span class="token punctuation">(</span>componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      broadcast<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>具体用法</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> A<span class="token punctuation">.</span>vue <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span>触发事件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">import</span> Emitter <span class="token keyword">from</span> <span class="token string">'../mixins/emitter.js'</span><span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'componentA'</span><span class="token punctuation">,</span>
    mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span> Emitter <span class="token punctuation">]</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      handleClick <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token string">'componentB'</span><span class="token punctuation">,</span> <span class="token string">'on-message'</span><span class="token punctuation">,</span> <span class="token string">'Hello Vue.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// B.vue</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">'componentB'</span><span class="token punctuation">,</span>
  created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'on-message'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>showMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    showMessage <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="第一个实战项目"><a href="#第一个实战项目" class="headerlink" title="第一个实战项目"></a>第一个实战项目</h3><p>一个 Vue.js 组件的接口来自三个部分：props、slots、events。**</p>
<p>注意，Vue.js 的组件渲染顺序是由内而外的，所以 FormItem 要先于 Form 渲染，在 FormItem 的 mounted 触发时，我们向 Form 派发了事件 <code>on-form-item-add</code>，并将当前 FormItem 的实例（this）传递给了 Form，而此时，Form 的 mounted 尚未触发，因为 Form 在最外层，如果在 Form 的 mounted 里监听事件，是不可以的，所以要在其 created 内监听自定义事件，Form 的 created 要先于 FormItem 的 mounted。</p>
<p>Form 支持两种事件来触发校验：</p>
<ul>
<li><strong>blur</strong>：失去焦点时触发，常见的有输入框失去焦点时触发校验；</li>
<li><strong>change</strong>：实时输入时触发或选择时触发，常见的有输入框实时输入时触发校验、下拉选择器选择项目时触发校验等。</li>
</ul>
<h3 id="组件的通信-3-找到任意组件实例-——-findComponents-系列方法"><a href="#组件的通信-3-找到任意组件实例-——-findComponents-系列方法" class="headerlink" title="组件的通信 3: 找到任意组件实例 —— findComponents 系列方法"></a>组件的通信 3: 找到任意组件实例 —— findComponents 系列方法</h3><p><strong>src/utils/assist.js</strong></p>
<h3 id="Vue-的构造器-extend-与手动挂载-mount"><a href="#Vue-的构造器-extend-与手动挂载-mount" class="headerlink" title="Vue 的构造器 extend 与手动挂载 $mount"></a>Vue 的构造器 extend 与手动挂载 $mount</h3><p>创建一个 Vue 实例时，都会有一个选项 <code>el</code>，来指定实例的根节点，如果不写 <code>el</code> 选项，那组件就处于未挂载状态。</p>
<p><code>Vue.extend</code> 的作用，就是基于 Vue 构造器，创建一个“子类”，它的参数跟 <code>new Vue</code> 的基本一样，但 <code>data</code> 要跟组件一样，是个函数，再配合 <code>$mount</code> ，就可以让组件渲染，并且挂载到任意指定的节点上，比如 body。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>

<span class="token keyword">const</span> AlertComponent <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>{{message}}&lt;/div>`</span></span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      message<span class="token punctuation">:</span> <span class="token string">'Hello, Lvjiawen'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>我们调用 <code>$mount</code> 方法对组件进行了手动渲染，但它仅仅是被渲染好了，并没有挂载到节点上，也就显示不了组件。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>$mount</code> 也有一些快捷的挂载方式，以下两种都是可以的：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 在 $mount 里写参数来指定挂载的节点</span>
<span class="token keyword">new</span> <span class="token class-name">AlertComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 不用 $mount，直接在创建实例时指定 el 选项</span>
<span class="token keyword">new</span> <span class="token class-name">AlertComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token punctuation">:</span> <span class="token string">'#app'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>实现同样的效果，除了用 extend 外，也可以直接创建 Vue 实例，并且用一个 Render 函数来渲染一个 .vue 文件：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> Notification <span class="token keyword">from</span> <span class="token string">'./notification.vue'</span>

<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> Instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>Notification<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      props<span class="token punctuation">:</span> props
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> component <span class="token operator">=</span> Instance<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appdenChild</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
<span class="token keyword">const</span> notification <span class="token operator">=</span> Instance<span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre>
<p>需要注意的是，我们是用 <code>$mount</code> 手动渲染的组件，如果要销毁，也要用 <code>$destroy</code> 来手动销毁实例，必要时，也可以用 <code>removeChild</code> 把节点从 DOM 中移除。</p>
<h3 id="实战-3"><a href="#实战-3" class="headerlink" title="实战 3"></a>实战 3</h3><p>new Function 的语法：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Function</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span>argN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span> functionBody<span class="token punctuation">)</span></code></pre>
<p>arg1, arg2, … argN 是被函数使用的参数名称，<strong>functionBody</strong> 是一个含有包括函数定义的 JavaScript 语句的<strong>字符串</strong>。也就是说，示例中的字符串 <code>return a + b</code> 被当做语句执行了。</p>
<p>notification.js 并不是最终的文件，它只是对 alert.vue 添加了一个方法 <code>newInstance</code>。虽然 alert.vue 包含了 template、script、style 三个标签，并不是一个 JS 对象，那怎么能够给它扩展一个方法 <code>newInstance</code> 呢？事实上，alert.vue 会被 Webpack 的 vue-loader 编译，把 template 编译为 Render 函数，最终就会成为一个 JS 对象，自然可以对它进行扩展。</p>
<h3 id="更灵活的组件：-render-函数与-functional-render"><a href="#更灵活的组件：-render-函数与-functional-render" class="headerlink" title="更灵活的组件： render 函数与 functional render"></a>更灵活的组件： render 函数与 functional render</h3><p>一般来说，我们写 Vue.js 组件，模板都是写在 <code>&lt;template&gt;</code> 内的，但它并不是最终呈现的内容，template 只是一种对开发者友好的语法，能够一眼看到 DOM 节点，容易维护，在 Vue.js 编译阶段，会解析为 Virtual DOM。</p>
<p>与 DOM 操作相比，Virtual DOM 是基于 JavaScript 计算的，所以开销会小很多。</p>
<p>![image-20190325162921254](/Users/lvjiawen/Library/Application Support/typora-user-images/image-20190325162921254.png)</p>
<p>正常的 DOM 节点在 HTML 中是这样的：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>用 Virtual DOM 创建的 JavaScript 对象一般会是这样的：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vNode <span class="token operator">=</span> <span class="token punctuation">{</span>
  tag<span class="token punctuation">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>
  attributes<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token string">'main'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token comment" spellcheck="true">// p 节点</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<p>vNode 对象通过一些特定的选项描述了真实的 DOM 结构。</p>
<p>来看一组 template 和 Render 写法的对照：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>内容 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        show<span class="token punctuation">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      show<span class="token punctuation">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  render<span class="token punctuation">:</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> childNode

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      childNode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'内容1'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      childNode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'内容2'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      attrs<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">:</span> <span class="token string">'main'</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        container<span class="token punctuation">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      style<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        color<span class="token punctuation">:</span> 'red
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>childNode<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>这里的 <code>h</code>，即 <code>createElement</code>，是 Render 函数的核心。</strong></p>
<p>h 有三个参数，分别是：</p>
<ol>
<li>要渲染的元素或组件</li>
<li>对应属性的数据对象</li>
<li>子节点</li>
</ol>
<p>重复渲染多个组件或元素，可以通过一个循环和工厂函数来解决：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  render<span class="token punctuation">:</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  render<span class="token punctuation">:</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> children <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      length<span class="token punctuation">:</span> <span class="token number">5</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>在 runtime 版本的 Vue.js 中，如果使用 Vue.extend 手动构造一个实例，使用 template 选项是会报错的</p>
<p>Vue.js 提供了一个 <code>functional</code> 的布尔值选项，设置为 true 可以使组件无状态和无实例，也就是没有 data 和 this 上下文。这样用 Render 函数返回虚拟节点可以更容易渲染，因为函数化组件（Functional Render）只是一个函数，渲染开销要小很多。</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 HTTP 协议</title>
    <url>/2020/06/01/net/%E5%AD%A6%E4%B9%A0%20HTTP%20%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="第一部分-概述"><a href="#第一部分-概述" class="headerlink" title="第一部分 概述"></a>第一部分 概述</h2><ol>
<li>HTTP 是 HyperText Transfer Protocol 的缩写，意思是超文本传输协议，只有计算机之间都遵守这个协议才能相互通讯。它设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。</li>
<li>URI，统一资源标识符，字符串定义，我们常用的 URL，是统一资源定位符的意思，是 URI 的一个子集，</li>
</ol>
<ol start="4">
<li>TCP，传输控制协议，英文是 Transmission Control Protocol，应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分割成适当长度的报文段（通常受该计算机连接的网络的数据链路层的最大传输单元（MTU）的限制）。之后TCP把结果包传给IP层，由它来通过网络将包传送给接收端实体的TCP层。TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。</li>
<li>TCP 传输协议的特点<ol>
<li>有序数据传输</li>
<li>重发丢失的封包</li>
<li>舍弃重复的封包</li>
<li>无错误数据传输</li>
<li>阻塞/流量控制</li>
<li>连接导向（确认有建立三方交握，连线已建立才做传输。）</li>
</ol>
</li>
<li>HTTP 流程：由HTTP客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。</li>
<li>下面的一节来具体论述 5 和 6<br>的过程。</li>
</ol>
<h2 id="第二部分-发展历史"><a href="#第二部分-发展历史" class="headerlink" title="第二部分 发展历史"></a>第二部分 发展历史</h2><h3 id="HTTP-0-9："><a href="#HTTP-0-9：" class="headerlink" title="HTTP/0.9："></a>HTTP/0.9：</h3><ol>
<li>只有一个 GET 方法</li>
<li>服务器只能回应 HTML 格式的字符串</li>
</ol>
<h3 id="HTTP-1-0-1996年5月"><a href="#HTTP-1-0-1996年5月" class="headerlink" title="HTTP/1.0(1996年5月)"></a>HTTP/1.0(1996年5月)</h3><ol>
<li>引入了 POST 和 HEAD 方法</li>
<li>任何格式的内容都可以发送，包括文字、图像、视频、二进制文件等。</li>
<li>HTTP 的请求和回应格式改变，在数据部分之外，每次请求必须包含头信息</li>
<li>还增加了：状态吗、多字符集支持、多部分发送、权限、缓存、内容编码等</li>
<li>HTTP/1.0 版的主要缺点是，每个TCP连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。TCP连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢（slow start）。所以，HTTP 1.0版本的性能比较差。随着网页加载的外部资源越来越多，这个问题就愈发突出了。</li>
</ol>
<h3 id="HTTP-1-1-1997年1月"><a href="#HTTP-1-1-1997年1月" class="headerlink" title="HTTP/1.1(1997年1月)"></a>HTTP/1.1(1997年1月)</h3><ol>
<li>是引入了持久连接（persistent connection），即TCP连接默认不关闭，可以被多个请求复用，客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。</li>
<li>还引入了管道机制（pipelining），即在同一个TCP连接里面，客户端可以同时发送多个请求。这样就进一步改进了HTTP协议的效率。</li>
<li>Content-Length 字段，声明多个响应之中每一个响应的数据长度</li>
<li>分块传输编码，产生一块数据，就发送一块，采用”流模式”（stream）取代”缓存模式”（buffer）。1.1版规定可以不使用Content-Length字段，而使用”分块传输编码”（chunked transfer encoding）。只要请求或回应的头信息有Transfer-Encoding字段，就表明回应将由数量未定的数据块组成。</li>
<li>新增了许多动词方法：PUT、PATCH、HEAD、 OPTIONS、DELETE。</li>
<li>客户端请求的头信息新增了Host字段，用来指定服务器的域名。</li>
<li>缺点：1.1版允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这称为”队头堵塞”（Head-of-line blocking）。为了避免这个问题，只有两种方法：一是减少请求数，二是同时多开持久连接。这导致了很多的网页优化技巧，比如合并脚本和样式表、将图片嵌入CSS代码、域名分片（domain sharding）等等。如果HTTP协议设计得更好一些，这些额外的工作是可以避免的。</li>
</ol>
<h3 id="HTTP-2-2015年"><a href="#HTTP-2-2015年" class="headerlink" title="HTTP/2(2015年)"></a>HTTP/2(2015年)</h3><ol>
<li>二进制协议</li>
<li>多工，在一个TCP连接里面，服务器同时收到了A请求和B请求，于是先回应A请求，结果发现处理过程非常耗时，于是就发送A请求已经处理好的部分， 接着回应B请求，完成后，再发送A请求剩下的部分。</li>
<li>数据流，HTTP/2 将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流ID，用来区分它属于哪个数据流。另外还规定，客户端发出的数据流，ID一律为奇数，服务器发出的，ID为偶数。</li>
<li>头信息压缩，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了（比如Cookie和User Agent），只发送索引号，这样就提高速度了。</li>
<li>服务器推送，允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。常见场景是客户端请求一个网页，这个网页里面包含很多静态资源。正常情况下，客户端必须收到网页后，解析HTML源码，发现有静态资源，再发出静态资源请求。其实，服务器可以预期到客户端请求网页后，很可能会再请求静态资源，所以就主动把这些静态资源随着网页一起发给客户端了。</li>
</ol>
<h2 id="第三部分-HTTP-请求"><a href="#第三部分-HTTP-请求" class="headerlink" title="第三部分 HTTP 请求"></a>第三部分 HTTP 请求</h2><h3 id="HTTP-请求信息"><a href="#HTTP-请求信息" class="headerlink" title="HTTP 请求信息"></a>HTTP 请求信息</h3><ol>
<li>组成：<ol>
<li>请求行，例如GET /images/logo.gif HTTP/1.1，表示从/images目录下请求logo.gif这个文件。</li>
<li>请求头，例如Accept-Language: en</li>
<li>空行</li>
<li>其他消息体</li>
</ol>
</li>
<li>请求行和标题必须以<CR><LF>作为结尾。空行内必须只有<CR><LF>而无其他空格。在HTTP/1.1协议中，所有的请求头，除Host外，都是可选的。</li>
</ol>
<h3 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h3><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源，下面一一介绍：</p>
<ol>
<li>GET：向指定的资源发出「显示」请求。使用GET方法应该只用在读取资料，而不应当被用于产生「副作用」的操作中，因为GET可能会被网络蜘蛛等随意访问。</li>
<li>POST：向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会建立新的资源或修改現有资源，或二者皆有。</li>
<li>PUT：向指定资源位置上传其最新内容。</li>
<li>DELETE：请求服务器删除Request-URI所标识的资源。</li>
<li>HEAD：与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器將不传回资源的本文部份。它的好处在于，使用这個方法可以在不必传输全部内容的情况下，就可以获取其中关于该资源的信息。</li>
<li>OPTIONS：這个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</li>
<li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li>
<li>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于 SSL 加密伺服器的连结（经由由非加密的HTTP代理伺服器）。</li>
<li>HTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。</li>
<li>于GET和HEAD方法而言，除了进行获取资源信息外，这些请求不应当再有其他意义。也就是说，这些方法应当被认为是“安全的”。 客户端可能会使用其他“非安全”方法，例如POST，PUT及DELETE，应该以特殊的方式（通常是按钮而不是超链接）告知客户可能的后果（例如一个按钮控制的资金交易），或请求的操作可能是不安全的（例如某个文件将被上传或删除）。</li>
</ol>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。</p>
<ol>
<li>1xx 消息 —— 请求已被服务器接收，继续处理</li>
<li>2xx 成功 —— 请求已成功被服务器接收、理解、并接受</li>
<li>3xx 重定向 —— 重定向需要后续操作才能完成这一请求</li>
<li>4xx 请求错误 —— 求含有词法错误或者无法被执行<ol>
<li>错误一般是<ol>
<li>请求的时候有语法错误</li>
<li>请求无法实现</li>
</ol>
</li>
<li>400 客户端请求有语法错误，服务器端不能理解</li>
<li>401 请求没有经过授权</li>
<li>403 服务器端接到请求，但是还是不能实现，没太懂</li>
<li>404 资源未找到</li>
<li>405 某个请求所针对的资源不支持对应的请求方法的时候</li>
</ol>
</li>
<li>5xx 服务器错误 —— 服务器在处理某个正确请求时发生错误<ol>
<li>500 服务器端发生了一个未知的错误</li>
<li>501 服务器不认识或者不支持对应的请求方法的时候</li>
<li>503 服务器端当前还不能处理客户端的这个请求，过一段时间可能会恢复正常</li>
</ol>
</li>
</ol>
<h2 id="域名解析和三次握手"><a href="#域名解析和三次握手" class="headerlink" title="域名解析和三次握手"></a>域名解析和三次握手</h2><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><ol>
<li>搜索浏览器自身的 DNS 缓存，看其中有没有域名缓存和ip地址</li>
<li>搜索操作系统自身的 DNS 缓存</li>
<li>读取本地的 HOST 文件</li>
<li>浏览器发起一个 DNS 的一个系统调用，运营商的 DNS 解析<ol>
<li>宽带运营商服务器服务器查看本身缓存，如果没有，有则返回信息，没有则执行下一步</li>
<li>运营商服务器发起一个迭代 DNS 解析请求<ol>
<li>问其根域，xxx.com 的域名地址是多少</li>
<li>根域回复：我只知道com域的顶级域的ip地址</li>
<li>运营商服务器拿到 .com 域这个顶级域的ip地址</li>
<li>运营商服务器向 .com 域的 DNS 服务器询问：xxx.com的域名地址是多少</li>
<li>.com域 DNS 服务器回复 xxx.com 域的ip地址</li>
<li>运营商的服务器询问 xxx.com 这个域的 DNS 服务器询问 xxx.com 这个域名的ip地址，并得到回复</li>
</ol>
</li>
</ol>
</li>
<li>运营商服务器把结果返回操作系统内核同时缓存起来</li>
<li>操作系统内核把结果返回浏览器</li>
</ol>
<h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ol>
<li>接上文DNS解析之后，浏览器拿到了 <a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a> 对应的 ip 地址，发起 http 的“三次握手” ,TCP连接请求，通过层层路由，到达服务器端，进入到网卡，进入到内核的 TCP/IP协议栈，经过防火墙，建立了 TCP 和 IP 的连接<ol>
<li>哥们，能听到我说话吗？唠唠呗</li>
<li>嗨，兄弟，我能听到你说话，咱俩可以唠唠。</li>
<li>好的哥们，咱俩开始唠吧</li>
</ol>
</li>
<li>TCP/IP 链接建立起来后，浏览器就可以向服务器发送HTTP请求了，例如用 HTTP 的 GET 方法请求根域里的一个域名，协议可以采用 HTTP 1.0 的一个协议。</li>
<li>服务器接收请求，根据路径，后端处理，返回结果，把完整的HTML页面代码返回给浏览器</li>
<li>浏览器渲染拿到的 HTML 页面代码，这个过程中，里面的js、css、图片静态资源也是一个个 HTTP 请求，都需要经过上面的的过程。</li>
<li>浏览器根据拿到的资源渲染页面，完整呈现页面</li>
</ol>
<h2 id="GET-和-POST-区别"><a href="#GET-和-POST-区别" class="headerlink" title="GET 和 POST 区别"></a>GET 和 POST 区别</h2><p>GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。 GET和POST还有一个重大区别，简单的说：GET产生一个TCP数据包；POST产生两个TCP数据包。</p>
<p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）； 而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li>慕课网 Scott <a href="http://www.imooc.com/learn/348" target="_blank" rel="noopener">老师的进击的《Node.js基础（一）》</a></li>
<li>维基百科词条：<a href="https://www.wikiwand.com/zh/超文本传输协议" target="_blank" rel="noopener">超文本传输协议</a></li>
<li>维基百科词条<a href="https://www.wikiwand.com/传输控制协议" target="_blank" rel="noopener">传输控制协议</a></li>
<li>阮一峰的博客文章 <a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">HTTP 协议入门</a></li>
</ol>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 angular</title>
    <url>/2020/06/01/fe-frameworkds/%E5%AD%A6%E4%B9%A0%20angular/</url>
    <content><![CDATA[<h2 id="第-1-部分-ChangeDetection"><a href="#第-1-部分-ChangeDetection" class="headerlink" title="第 1 部分 ChangeDetection"></a>第 1 部分 ChangeDetection</h2><p>检测程序内部状态，然后反映到 UI 上</p>
<p>引起状态变化的东西包括：Events、XHR、Timers</p>
<p>ApplicationRef 监听 NgZone 的 onTurnDone，然后执行检测</p>
<p>angular CD 有两种策略，默认策略（把整个树跑一遍），OnPush策略（除非我的属性发生变化，否则不用来检查我了，大的应用可以显著提高应用性能）。</p>
<pre class=" language-javascript"><code class="language-javascript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
  changeDetection<span class="token punctuation">:</span> ChangeDetectionsStrategy<span class="token punctuation">.</span>Default
  changeDetection<span class="token punctuation">:</span> ChangeDetectionsStrategy<span class="token punctuation">.</span>OnPush
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>如何主动告诉 angular 来检查我</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> cd<span class="token punctuation">:</span> ChangeDetectorRef
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>cd<span class="token punctuation">.</span><span class="token function">markForCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">doSomethingNeedChangeDetection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>cd<span class="token punctuation">.</span><span class="token function">markForCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="第-2-部分-angular-依赖注入"><a href="#第-2-部分-angular-依赖注入" class="headerlink" title="第 2 部分 angular 依赖注入"></a>第 2 部分 angular 依赖注入</h2><h3 id="2-1-依赖注入之前的写法"><a href="#2-1-依赖注入之前的写法" class="headerlink" title="2.1 依赖注入之前的写法"></a>2.1 依赖注入之前的写法</h3><p>问题 Person 类，需要清清楚楚知道 Id 和 Address 的细节和构造方式，Id 或者 Address 重构之后，很麻烦<br>而且以后用的多了之后，重构修改起来很麻烦</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Id</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 省略了一些设置</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
  provice<span class="token punctuation">:</span> string<span class="token punctuation">;</span>
  city<span class="token punctuation">:</span> string<span class="token punctuation">;</span>
  district<span class="token punctuation">:</span> string<span class="token punctuation">;</span>
  street<span class="token punctuation">:</span> string<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> district<span class="token punctuation">,</span> street<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>provice <span class="token operator">=</span> province<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>district  <span class="token operator">=</span> district<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>street <span class="token operator">=</span> street<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  id<span class="token punctuation">:</span> Id<span class="token punctuation">;</span>
  address<span class="token punctuation">:</span> Address<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span>  Id<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'idcard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'朝阳区'</span><span class="token punctuation">,</span> <span class="token string">'某某街道'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre>
<h3 id="2-2-依赖注入的写法"><a href="#2-2-依赖注入的写法" class="headerlink" title="2.2 依赖注入的写法"></a>2.2 依赖注入的写法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Id</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 省略了一些设置</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
  provice<span class="token punctuation">:</span> string<span class="token punctuation">;</span>
  city<span class="token punctuation">:</span> string<span class="token punctuation">;</span>
  district<span class="token punctuation">:</span> string<span class="token punctuation">;</span>
  street<span class="token punctuation">:</span> string<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> district<span class="token punctuation">,</span> street<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>provice <span class="token operator">=</span> province<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>district  <span class="token operator">=</span> district<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>street <span class="token operator">=</span> street<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  id<span class="token punctuation">:</span> Id<span class="token punctuation">;</span>
  address<span class="token punctuation">:</span> Address<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> Id<span class="token punctuation">,</span> address<span class="token punctuation">:</span> Address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span>  id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span>  address<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// </span></code></pre>
<p>伪代码，原理就是一级一级向上推，把责任推给入口函数，依赖注入框架可以帮我们处理这个事情</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> Id<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'idcard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'朝阳区'</span><span class="token punctuation">,</span> <span class="token string">'某某街道'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonDI</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="2-3-利用-angular-的依赖注入"><a href="#2-3-利用-angular-的依赖注入" class="headerlink" title="2.3 利用 angular 的依赖注入"></a>2.3 利用 angular 的依赖注入</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PersonAngularDI</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> oc<span class="token punctuation">:</span> OverlayContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> injector <span class="token operator">=</span> ReflectiveInjector<span class="token punctuation">.</span><span class="token function">resolveAndCreate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span>provide<span class="token punctuation">:</span> Person<span class="token punctuation">,</span> useClass<span class="token punctuation">:</span> PersonAngularDIInstance<span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>provide<span class="token punctuation">:</span> Address<span class="token punctuation">,</span> useFactory<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>environment<span class="token punctuation">.</span>production<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'朝阳区'</span><span class="token punctuation">,</span> <span class="token string">'某某街道'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">'上海'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">,</span> <span class="token string">'闵行区'</span><span class="token punctuation">,</span> <span class="token string">'某某街道'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>provide<span class="token punctuation">:</span> Id<span class="token punctuation">,</span> useFactory<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Id<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'idcard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> person <span class="token operator">=</span> injector<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PersonAngularDIInstance</span> <span class="token punctuation">{</span>
  id<span class="token punctuation">;</span>
  address<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    @<span class="token function">Inject</span><span class="token punctuation">(</span>Id<span class="token punctuation">)</span> id<span class="token punctuation">,</span>
    @<span class="token function">Inject</span><span class="token punctuation">(</span>Address<span class="token punctuation">)</span> address
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>在任意组件中注入 <code>providers: [{provide: &#39;BASE_CONFIG&#39;, useValue: &#39;http://localhost:3000&#39;}]</code><br>// 在其他组件中可以在consturctor 中得到他， <code>constructor(@Inject(&#39;BASE_CONFIG&#39;) config)</code><br>// 默认情况下，注入之后变成单件，大家取到的以来都是一样的<br>// 在那个injector 的函数里边，useFactory 返回一个方法，而不是值可以每次创建一个新的实例<br>// 写一个 <code>childInjector = injector.resolveAndCreateChild([Person]); const personFromChild = childInjector.get(Person)</code>;</p>
<h2 id="第-3-部分-animation"><a href="#第-3-部分-animation" class="headerlink" title="第 3 部分 animation"></a>第 3 部分 animation</h2><p>BrowserAnimationModule 放在最后导入，先导入可能会引起异常</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">trigger</span><span class="token punctuation">(</span>
<span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
<span class="token function">state</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token string">'background-color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span>
<span class="token string">'transform'</span><span class="token punctuation">:</span> <span class="token string">'translateX(0)'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">state</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token string">'background-color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>
<span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token string">'50px'</span><span class="token punctuation">,</span>
<span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token string">'50px'</span><span class="token punctuation">,</span>
<span class="token string">'transform'</span><span class="token punctuation">:</span> <span class="token string">'translateX(200%)'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">transition</span><span class="token punctuation">(</span><span class="token string">'green => red'</span><span class="token punctuation">,</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">transition</span><span class="token punctuation">(</span><span class="token string">'red => green'</span><span class="token punctuation">,</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token punctuation">)</span></code></pre>
<p>animate的参数，第一个持续时间，第二个延续时间，第三个参数是缓动函数（动画效果执行时的速度，例如，先加速后减速）。</p>
<h2 id="路由动画"><a href="#路由动画" class="headerlink" title="路由动画"></a>路由动画</h2><p>Void 空状态</p>
<p>路由动画需要在 host 元数据中指定触发器。</p>
<p>动画不要太多，否则适得其反。引导用户去注意一些东西，内容、服务优先。</p>
<h2 id="group"><a href="#group" class="headerlink" title="group"></a>group</h2><p>同时进行一组的动画变换。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<h2 id="Query-amp-Stagger"><a href="#Query-amp-Stagger" class="headerlink" title="Query &amp; Stagger"></a>Query &amp; Stagger</h2><p>Query 用于父节点寻找子节点，然后把动画应用到你选中的这些元素上</p>
<p>Stagger 指定有多个满足 Query 的元素的动画分别播放，每个的动画之间有间隔</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>新增一项</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>projects <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>projects<span class="token punctuation">,</span> <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'新增'</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre>
<p>删除一项</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>projects <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>projects<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>id <span class="token operator">!==</span> project<span class="token punctuation">.</span>id<span class="token punctuation">)</span></code></pre>
<h2 id="第-4-部分-属性型指令"><a href="#第-4-部分-属性型指令" class="headerlink" title="第 4 部分 属性型指令"></a>第 4 部分 属性型指令</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Directive<span class="token punctuation">,</span> ElementRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
@<span class="token function">Directive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>selector<span class="token punctuation">:</span> <span class="token string">'[highlight]'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HighlightDirective</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>el<span class="token punctuation">:</span> ElementRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span>nativeElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'gold'</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`
        * AppRoot highlight called for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>nativeElement<span class="token punctuation">.</span>tagName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 使用</span>
<span class="token operator">&lt;</span>h1 highlight<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

</code></pre>
<p>指令、组件，作为 NgModule 元数据中的 declarations 导入。</p>
<pre class=" language-javascript"><code class="language-javascript">declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>
  AppComponent<span class="token punctuation">,</span>
  HighlightDirective<span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>
<h2 id="第-5-部分-自定义组件"><a href="#第-5-部分-自定义组件" class="headerlink" title="第 5 部分 自定义组件"></a>第 5 部分 自定义组件</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token punctuation">:</span> <span class="token string">'app-title'</span><span class="token punctuation">,</span>
  templateUrl<span class="token punctuation">:</span> <span class="token string">'&lt;h1 highlight>{{title}} {{subtitle}}&lt;/h1>'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TitleComponent</span> <span class="token punctuation">{</span>
  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> subtitle <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  title <span class="token operator">=</span> <span class="token string">'Angular Modules'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>引入自定义组件，作为 NgModule 元数据中的 declarations 导入。</p>
<pre class=" language-javascript"><code class="language-javascript"> @<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token punctuation">:</span>      <span class="token punctuation">[</span> BrowserModule <span class="token punctuation">]</span><span class="token punctuation">,</span>
  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span> AppComponent<span class="token punctuation">,</span> HighlightDirective<span class="token punctuation">,</span>TitleComponent<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  bootstrap<span class="token punctuation">:</span>    <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre>
<p>服务提供商</p>
<p>模块可以往应用的“根依赖注入器”中添加提供商，让那些服务在应用中到处可用。</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
  userName <span class="token operator">=</span> <span class="token string">'Sherlock Holmes'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">highlight</span><span class="token punctuation">></span></span>{{title}} {{subtitle}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>Welcome, {{user}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.service'</span><span class="token punctuation">;</span>

@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token punctuation">:</span> <span class="token string">'app-title'</span><span class="token punctuation">,</span>
  templateUrl<span class="token punctuation">:</span> <span class="token string">'./title.component.html'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TitleComponent</span> <span class="token punctuation">{</span>
  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> subtitle <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  title <span class="token operator">=</span> <span class="token string">'Angular Modules'</span><span class="token punctuation">;</span>
  user <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>

  <span class="token keyword">constructor</span><span class="token punctuation">(</span>userService<span class="token punctuation">:</span> UserService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> userService<span class="token punctuation">.</span>userName<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-typescript"><code class="language-typescript"> @<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token punctuation">:</span>      <span class="token punctuation">[</span> BrowserModule <span class="token punctuation">]</span><span class="token punctuation">,</span>
  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span> AppComponent<span class="token punctuation">,</span> HighlightDirective<span class="token punctuation">,</span>TitleComponent<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  bootstrap<span class="token punctuation">:</span>    <span class="token punctuation">[</span> AppComponent <span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token punctuation">:</span>     <span class="token punctuation">[</span> UserService <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre>
<h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><p>导入<code>BrowserModule</code>会让该模块公开的所有组件、指令和管道在<code>AppModule</code>下的任何组件模板中可用。</p>
<p>更准确的说，<code>NgIf</code>是在来自<code>@angular/common</code>的<code>CommonModule</code>中声明的。</p>
<p><code>CommonModule</code>提供了很多应用程序中常用的指令，包括<code>NgIf</code>和<code>NgFor</code>等。<code>BrowserModule</code>导入了<code>CommonModule</code>并且<a href="https://v2.angular.cn/docs/ts/latest/cookbook/ngmodule-faq.html#q-re-export" target="_blank" rel="noopener"><em>重新导出</em></a>了它。</p>
<p> 最终的效果是：只要导入<code>BrowserModule</code>就自动获得了<code>CommonModule</code>中的指令。</p>
<p>很多熟悉的 Angular 指令并不属于<code>CommonModule</code>。 例如，<code>NgModel</code>和<code>RouterLink</code>分别属于 Angular 的<code>FormsModule</code>模块和<code>RouterModule</code>模块。</p>
<p>模版驱动的表单</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Contact of {{userName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contacts<span class="token punctuation">"</span></span> <span class="token attr-name">(ngSubmit)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit()<span class="token punctuation">"</span></span> <span class="token attr-name">#contactForm</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ngForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">highlight</span><span class="token punctuation">></span></span>{{ contact.name | awesome }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">required</span>
      <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contact.name<span class="token punctuation">"</span></span>
        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>  <span class="token attr-name">#name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ngModel<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[hidden]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name.valid<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert alert-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      Name is required
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span> <span class="token attr-name">[disabled]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!contactForm.form.valid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Save<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next()<span class="token punctuation">"</span></span> <span class="token attr-name">[disabled]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!contactForm.form.valid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next Contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>newContact()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>New Contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>
<h2 id="第-6-部分-angular"><a href="#第-6-部分-angular" class="headerlink" title="第 6 部分 angular"></a>第 6 部分 angular</h2><p>是将 <code>&lt;base&gt;</code> 标签添加到我们的 <code>index.html</code> 文件中，在 html 的 head 中，添加一段 <code>&lt;base href=&quot;/&quot;&gt;</code></p>
<h3 id="定义带参数的路由"><a href="#定义带参数的路由" class="headerlink" title="定义带参数的路由"></a>定义带参数的路由</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> HomeComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./home/home.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ProfileComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./profile/profile.component'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> ROUTES<span class="token punctuation">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> HomeComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/profile/:username'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> ProfileComponent <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<h3 id="获取路由的参数"><a href="#获取路由的参数" class="headerlink" title="获取路由的参数"></a>获取路由的参数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ActivatedRoute <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span>

@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token punctuation">:</span> <span class="token string">'profile-page'</span><span class="token punctuation">,</span>
  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`
    &lt;div class="profile">
      &lt;h3>{{ username }}&lt;/h3>
    &lt;/div>
  `</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SettingsComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>
  username<span class="token punctuation">:</span> string<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> route<span class="token punctuation">:</span> ActivatedRoute<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> params<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="子路由的例子"><a href="#子路由的例子" class="headerlink" title="子路由的例子"></a>子路由的例子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> SettingsComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./settings/settings.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ProfileSettingsComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./settings/profile/profile.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PasswordSettingsComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./settings/password/password.component'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> ROUTES<span class="token punctuation">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> 
    path<span class="token punctuation">:</span> <span class="token string">'settings'</span><span class="token punctuation">,</span> 
    component<span class="token punctuation">:</span> SettingsComponent<span class="token punctuation">,</span>
    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'profile'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> ProfileSettingsComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'password'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> PasswordSettingsComponent <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    BrowserModule<span class="token punctuation">,</span>
    RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>ROUTES<span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>ES5 面向对象</title>
    <url>/2018/03/20/languages/ES5%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="一、面向对象演变历程"><a href="#一、面向对象演变历程" class="headerlink" title="一、面向对象演变历程"></a>一、面向对象演变历程</h1><h2 id="1-1-生成实例对象的原始模式"><a href="#1-1-生成实例对象的原始模式" class="headerlink" title="1.1 生成实例对象的原始模式"></a>1.1 生成实例对象的原始模式</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    color<span class="token punctuation">:</span> <span class="token string">""</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
cat1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"大毛"</span><span class="token punctuation">;</span>
cat1<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"yello"</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> cat2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
cat2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"二毛"</span><span class="token punctuation">;</span>
cat2<span class="token punctuation">.</span>color <span class="token operator">=</span> "black<span class="token punctuation">;</span>l</code></pre>
<p>这种写法的问题是：</p>
<ol>
<li>如果定义很多实例写起来很麻烦</li>
<li>实例与原型之间没有什么联系</li>
</ol>
<h2 id="1-2-原始模式的改进"><a href="#1-2-原始模式的改进" class="headerlink" title="1.2 原始模式的改进"></a>1.2 原始模式的改进</h2><pre class=" language-javascript"><code class="language-javascript">
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>
        color<span class="token punctuation">:</span> color
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"大毛"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cat2 <span class="token operator">=</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"二毛"</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>问题：不能反映 cat1 和 cat2 有没有内在的联系，不能反映出它们是同一个原型对象的实例。</p>
<h2 id="1-3-构造函数模式"><a href="#1-3-构造函数模式" class="headerlink" title="1.3 构造函数模式"></a>1.3 构造函数模式</h2><p>为了解决从原型对象生成实例的问题，Javascript 提供了一个构造函数（Vonstructor）模式。</p>
<p>所谓构造函数，其实就是普通函数，内部使用了 this 变量，对构造函数使用 new 运算符，就能生成实例，并且 this 变量会绑定在实例对象上。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"大毛"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"二毛"</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Cat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span>cat2<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Cat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token function">alert</span><span class="token punctuation">(</span>cat1 <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span>cat2 <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<h3 id="构造函数模式的问题"><a href="#构造函数模式的问题" class="headerlink" title="构造函数模式的问题"></a>构造函数模式的问题</h3><p>浪费内存，请看下面的这段代码</p>
<pre class=" language-javascript"><code class="language-javascript">
unction <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"猫"</span>；
    <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"开饭啦"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"大毛"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"二毛"</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 猫</span>
<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>eat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开饭啦</span>
<span class="token function">alert</span><span class="token punctuation">(</span>cat2<span class="token punctuation">.</span>eat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开饭啦</span>

<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>eat <span class="token operator">==</span> cat2<span class="token punctuation">.</span>eat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
</code></pre>
<p>从上面可以看出，对于每一个实例对象，type 和 eat 的内容是一样的，但是，没生成一个实例，都必须为重复的内容，多占一些内存。</p>
<h2 id="1-4-Prototype-模式"><a href="#1-4-Prototype-模式" class="headerlink" title="1.4 Prototype 模式"></a>1.4 Prototype 模式</h2><p>为了让eat 和 type 这些公共的属性和方法只生成一次，然后所有实例都指向那个内存地址，就有了 Prototype 这个神奇的模式。</p>
<p>Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。<strong>这个对象的所有属性和方法，都会被构造函数的实例继承</strong>。</p>
<p>我们应该把那些不变的属性和方法，直接定义在 prototype 对象上。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>
　　<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
　　<span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"猫"</span><span class="token punctuation">;</span>
Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"吃老鼠"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"大毛"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"二毛"</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 猫</span>
<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>eat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开饭啦</span>
<span class="token function">alert</span><span class="token punctuation">(</span>cat2<span class="token punctuation">.</span>eat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开饭啦</span>

<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>eat <span class="token operator">==</span> cat2<span class="token punctuation">.</span>eat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token function">alert</span><span class="token punctuation">(</span>Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>cat1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span>Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>cat2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"name"</span> <span class="token keyword">in</span> cat1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"type"</span> <span class="token keyword">in</span> cat1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p>每个实例对象都有一个hasOwnProperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。<br>in运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。</p>
<h1 id="二、-ES5-继承"><a href="#二、-ES5-继承" class="headerlink" title="二、 ES5 继承"></a>二、 ES5 继承</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">"动物"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>想要使猫继承动物，下面介绍物种方法</p>
<h2 id="2-1-构造函数绑定"><a href="#2-1-构造函数绑定" class="headerlink" title="2.1 构造函数绑定"></a>2.1 构造函数绑定</h2><p>使用 call 和 apply 方法，将父对象的构造函数绑定在子对象上</p>
<pre class=" language-javascript"><code class="language-javascript">
<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Animal<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"大毛"</span><span class="token punctuation">,</span><span class="token string">"黄色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 动物</span>
</code></pre>
<p>还有下面的例子</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Super</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fun <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Super<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sub2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sub1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub1<span class="token punctuation">.</span>fun <span class="token operator">===</span> sub2<span class="token punctuation">.</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false</span></code></pre>
<p><strong>核心：</strong></p>
<p>借父类的构造函数来增强子类的实例，等于是把父类的实例属性复制了一份给子类实例装上了（完全没有用到原型）</p>
<p><strong>优点：</strong></p>
<ol>
<li>解决了子类实例共享父类引用类型属性的问题</li>
<li>创建实例时，可以向父类构造函数传递参数。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>无法实现函数的复用，同一个函数，每个子类实例都会创建各自与之对应的方法。太多了会影响性能，内存爆炸。</li>
</ol>
<h2 id="2-2-prototype-模式"><a href="#2-2-prototype-模式" class="headerlink" title="2.2 prototype 模式"></a>2.2 prototype 模式</h2><pre class=" language-javascript"><code class="language-javascript">
Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token punctuation">;</span>
<span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"大毛"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 动物</span>
</code></pre>
<p>代码的第一行完全删除了 prototype 原来的值，赋予了一个新的值<br>代码的第二行 <code>Cat.prototype.constructor = Cat</code></p>
<p>任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有”Cat.prototype = new Animal();”这一行，Cat.prototype.constructor是指向Cat的；加了这一行以后，Cat.prototype.constructor指向Animal。</p>
<p>更重要的是，每一个实例也有一个constructor属性，默认调用prototype对象的constructor属性，<code>alert(cat1.constructor == Cat.prototype.constructor); // true</code>。</p>
<p>这是很重要的一点，编程时务必要遵守。下文都遵循这一点，即如果替换了prototype对象，那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。</p>
<h2 id="2-3-直接继承prototype"><a href="#2-3-直接继承prototype" class="headerlink" title="2.3 直接继承prototype"></a>2.3 直接继承prototype</h2><p>由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过 Animal()，直接继承Animal.prototype。</p>
<pre class=" language-javascript"><code class="language-javascript">
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">"动物"</span><span class="token punctuation">;</span>
Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token punctuation">;</span>
<span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"大毛"</span><span class="token punctuation">,</span><span class="token string">"黄色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 动物</span>
</code></pre>
<p>与前一种方法相比，这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。所以上面的代码会把animal.prototype.constructor 的属性也跟着改成 Cat。</p>
<h2 id="2-4-利用空对象作为中介"><a href="#2-4-利用空对象作为中介" class="headerlink" title="2.4 利用空对象作为中介"></a>2.4 利用空对象作为中介</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span>　<span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token punctuation">;</span>
</code></pre>
<p>封装一下继承的函数</p>
<pre class=" language-javascript"><code class="language-javascript">
<span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span>
    Child<span class="token punctuation">.</span>uber <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>最后一行为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。（uber是一个德语词，意思是”向上”、”上一层”。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。</p>
<h2 id="2-5-拷贝继承"><a href="#2-5-拷贝继承" class="headerlink" title="2.5 拷贝继承"></a>2.5 拷贝继承</h2><pre class=" language-javascript"><code class="language-javascript">
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">"动物"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">extend2</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> p <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> Child<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    c<span class="token punctuation">.</span>uber <span class="token operator">=</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="2-6-组合继承（最常用）"><a href="#2-6-组合继承（最常用）" class="headerlink" title="2.6 组合继承（最常用）"></a>2.6 组合继承（最常用）</h2><p>为了解决借用构造函数方式的问题（无法实现函数复用），有了下面的办法。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Super</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Super<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fun1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 继承父函数的基本属性和引用属性</span>
<span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Super<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 继承父函数，实现函数的复用，这句是不是有没有都行啊</span>
Sub<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sub2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sub1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub1<span class="token punctuation">.</span>fun <span class="token operator">===</span> sub2<span class="token punctuation">.</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span></code></pre>
<p><strong>核心：</strong></p>
<p>把实例函数都放在原型对象上，以实现函数复用。同时还要保留借用构造函数方式的优点。</p>
<p><strong>优点：</strong></p>
<ol>
<li>不存在引用属性共享问题</li>
<li>可传参</li>
<li>函数可复用</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>子函数的原型上有一套多余的父函数的属性</li>
</ol>
<h2 id="2-7-寄生组合继承（最佳方式）"><a href="#2-7-寄生组合继承（最佳方式）" class="headerlink" title="2.7 寄生组合继承（最佳方式）"></a>2.7 寄生组合继承（最佳方式）</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">beget</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 生孩子函数 beget：龙beget龙，凤beget凤。</span>
    <span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 只在此处声明基本属性和引用属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//  在此处声明函数</span>
Super<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fun1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Super<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fun2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//Super.prototype.fun3...</span>
<span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Super<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 核心</span>
    <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token function">beget</span><span class="token punctuation">(</span>Super<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 核心</span>
proto<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 核心</span>
Sub<span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 核心</span>

<span class="token keyword">var</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h1 id="三、ES5-实现模块化"><a href="#三、ES5-实现模块化" class="headerlink" title="三、ES5 实现模块化"></a>三、ES5 实现模块化</h1><h2 id="3-1-原始写法"><a href="#3-1-原始写法" class="headerlink" title="3.1 原始写法"></a>3.1 原始写法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ....</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ....</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>污染了全局变量</li>
<li>容易导致明明冲突</li>
<li>模块成员之间看不出直接关系</li>
</ol>
<h2 id="3-2-对象写法"><a href="#3-2-对象写法" class="headerlink" title="3.2 对象写法"></a>3.2 对象写法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    _count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    m1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    m2<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>暴露所有模块的成员</li>
<li>内部状态可以被外部改写，比如 <code>module1._count = 5;</code> 就会直接改变内部计数器的值。</li>
</ol>
<h2 id="3-3-立即执行函数的写法"><a href="#3-3-立即执行函数的写法" class="headerlink" title="3.3 立即执行函数的写法"></a>3.3 立即执行函数的写法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> m1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> m2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        m1<span class="token punctuation">:</span> m1<span class="token punctuation">,</span>
        m2<span class="token punctuation">:</span> m2
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>不暴露私有成员</li>
</ul>
<h2 id="3-4-放大模式"><a href="#3-4-放大模式" class="headerlink" title="3.4 放大模式"></a>3.4 放大模式</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mod<span class="token punctuation">.</span>m3 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> mod
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>module1<span class="token punctuation">)</span></code></pre>
<p>上面的代码魏 module1 添加了一个新方法 m3()，然后返回新的 module1 模块。</p>
<p>由于模块可能是从网上获取的，不能确定哪个部分先加载完成，要采用宽放大模式。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mod<span class="token punctuation">.</span>m3 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> mod
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>module1 <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="3-5-输入全局变量"><a href="#3-5-输入全局变量" class="headerlink" title="3.5 输入全局变量"></a>3.5 输入全局变量</h2><p>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。为了在模块内部调用全局变量，必须显式地将其他变量输入模块。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> module1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">,</span> YAHOO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">,</span> YAHOO0<span class="token punctuation">;</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>imooc-Node.js+KOA2 从0到1打造超好用Web框架笔记</title>
    <url>/2020/06/02/node/imooc-Node.js+KOA2%20%E4%BB%8E0%E5%88%B01%E6%89%93%E9%80%A0%E8%B6%85%E5%A5%BD%E7%94%A8Web%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="第-1-章"><a href="#第-1-章" class="headerlink" title="第 1 章"></a>第 1 章</h1><h2 id="1-1-导学"><a href="#1-1-导学" class="headerlink" title="1-1 导学"></a>1-1 导学</h2><h3 id="Node-js-能力"><a href="#Node-js-能力" class="headerlink" title="Node.js 能力"></a>Node.js 能力</h3><ul>
<li>脱离浏览器运行 JS</li>
<li>Node.js Stream （前端工程化基础）</li>
<li>服务端 API</li>
<li>作为中间层</li>
</ul>
<h3 id="CTO-往往是服务端工程师"><a href="#CTO-往往是服务端工程师" class="headerlink" title="CTO 往往是服务端工程师"></a>CTO 往往是服务端工程师</h3><ul>
<li>需要设计整个公司技术架构</li>
<li>需要从全局考虑问题</li>
<li>需要掌控公司最重要的资产：数据（谁掌握数据，谁才有话语权）</li>
</ul>
<h2 id="1-2-异步、javascript-特性与-Node-js"><a href="#1-2-异步、javascript-特性与-Node-js" class="headerlink" title="1-2 异步、javascript 特性与 Node.js"></a>1-2 异步、javascript 特性与 Node.js</h2><blockquote>
<p>编程，实践性非常强，注意，不要把关注点仅仅放在业务上，业务只是为了承载知识。</p>
</blockquote>
<h1 id="第-2-章-深入理解-KOA"><a href="#第-2-章-深入理解-KOA" class="headerlink" title="第 2 章 深入理解 KOA"></a>第 2 章 深入理解 KOA</h1><h2 id="2-3-KOA-的精简特性与二次开发必要性分析"><a href="#2-3-KOA-的精简特性与二次开发必要性分析" class="headerlink" title="2-3 KOA 的精简特性与二次开发必要性分析"></a>2-3 KOA 的精简特性与二次开发必要性分析</h2><ul>
<li><p>后端不同于前端：读写数据库、API</p>
</li>
<li><p>框架：</p>
<ul>
<li>写出好的代码</li>
<li>提高开发效率</li>
</ul>
</li>
<li><p>数据库</p>
<ul>
<li>悲观锁</li>
<li>乐观锁</li>
<li>事物</li>
<li>脏读</li>
<li>幻读</li>
</ul>
</li>
<li><p>Node.js API 低级，基础</p>
</li>
<li><p>KOA 特点</p>
<ul>
<li>洋葱圈模型</li>
<li>精简 =&gt; 定制化能力强，适合二次开发</li>
</ul>
</li>
</ul>
<h2 id="2-4-模块加载、ES、TS、Babel-浅析"><a href="#2-4-模块加载、ES、TS、Babel-浅析" class="headerlink" title="2-4 模块加载、ES、TS、Babel 浅析"></a>2-4 模块加载、ES、TS、Babel 浅析</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h4 id="commonJS"><a href="#commonJS" class="headerlink" title="commonJS"></a>commonJS</h4><pre><code>const Koa = require(&#39;koa&#39;)</code></pre><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><pre><code>import Koa from &#39;koa&#39;</code></pre><h3 id="Node-里边不能用的-ES-新特性"><a href="#Node-里边不能用的-ES-新特性" class="headerlink" title="Node 里边不能用的 ES 新特性"></a>Node 里边不能用的 ES 新特性</h3><ul>
<li>import 不能使用</li>
<li>decorator不能使用</li>
<li>class 的时候必须要写 this.x</li>
</ul>
<h2 id="2-5-KOA-中间件"><a href="#2-5-KOA-中间件" class="headerlink" title="2-5 KOA 中间件"></a>2-5 KOA 中间件</h2><p>中间件，就是函数</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span></code></pre>
<h3 id="2-6-洋葱圈模型"><a href="#2-6-洋葱圈模型" class="headerlink" title="2-6 洋葱圈模型"></a>2-6 洋葱圈模型</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 应用程序对象，挂载很多中间件</span>
<span class="token comment" spellcheck="true">// 注册</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 打印顺序 1，3， 4， 2</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span></code></pre>
<p>注意：</p>
<ul>
<li><strong>use 的回调函数前边一定要写 async</strong></li>
<li><strong>next 前边一定要写await</strong></li>
</ul>
<h3 id="2-7-强制-Promise"><a href="#2-7-强制-Promise" class="headerlink" title="2-7 强制 Promise"></a>2-7 强制 Promise</h3><pre><code>const koa = require(&#39;koa&#39;)
const app = new koa()

app.use((ctx, next) =&gt; {
  console.log(1)
  const a = next()
  console.log(a) // Promise { &#39;abc&#39; }
  console.log(2)
})
app.use((ctx, next) =&gt; {
  console.log(3)
  console.log(4)
  return &#39;abc&#39;
})

app.listen(3000)</code></pre><h3 id="深入理解-async-和-await"><a href="#深入理解-async-和-await" class="headerlink" title="深入理解 async 和 await"></a>深入理解 async 和 await</h3><ul>
<li>await 可以理解为求值关键字，将 Promise 转化为成功时的返回值，await 可以对任何表达式求值</li>
<li>await 会阻塞线程</li>
<li>async 的意义就是加上 async 的函数，任何返回值都会被包装成 Promise</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// abc</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token string">'abc'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span></code></pre>
<h3 id="2-9-为什么一定要保证洋葱圈模型"><a href="#2-9-为什么一定要保证洋葱圈模型" class="headerlink" title="2-9 为什么一定要保证洋葱圈模型"></a>2-9 为什么一定要保证洋葱圈模型</h3><p>如果不在 next 前加 await，不在中间件函数里边加 async，就不能保证洋葱圈模型了</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 1, 3, 4, 2, 'abc'</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span></code></pre>
<p>axios 请求的时候阻塞了线程，遇到阻塞线程的操作的时候，js 就回去执行下面的代码</p>
<p>中间件函数被next 分为两部分，next 函数之前的部分，所有之后的中间件都还没有执行，next 之后的部分，所有中间件都已经执行完毕了。</p>
<h2 id="第3章"><a href="#第3章" class="headerlink" title="第3章"></a>第3章</h2><h3 id="3-1-路由系统"><a href="#3-1-路由系统" class="headerlink" title="3-1 路由系统"></a>3-1 路由系统</h3><p>啥啥没有的情况</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span>path<span class="token punctuation">,</span>method<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">===</span> <span class="token string">'/classic/latest'</span> <span class="token operator">&amp;&amp;</span> method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
      key<span class="token punctuation">:</span> <span class="token string">'classic'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span></code></pre>
<p>简单使用 koa-router</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/classic/latest'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
    key<span class="token punctuation">:</span> <span class="token string">'classic123123'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span></code></pre>
<h3 id="3-2-服务端编程必备思维：主题与模型划分"><a href="#3-2-服务端编程必备思维：主题与模型划分" class="headerlink" title="3-2 服务端编程必备思维：主题与模型划分"></a>3-2 服务端编程必备思维：主题与模型划分</h3><ul>
<li>好的代码利于阅读</li>
<li>好的代码利于维护</li>
<li>好的代码利于提高编程效率</li>
</ul>
<p>主题：抽象的概念，抽象的概念有助于思考，概念类似于 Model</p>
<p>主题的划分：</p>
<ul>
<li>期刊</li>
<li>书籍</li>
<li>点赞</li>
<li>用户</li>
</ul>
<h3 id="3-3-多-router-拆分路由"><a href="#3-3-多-router-拆分路由" class="headerlink" title="3-3 多 router 拆分路由"></a>3-3 多 router 拆分路由</h3><h4 id="API-携带版本号："><a href="#API-携带版本号：" class="headerlink" title="API 携带版本号："></a>API 携带版本号：</h4><ol>
<li>放在路径之中</li>
<li>放在查询参数</li>
<li>放在 http header 之中</li>
</ol>
<h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><ul>
<li>对修改关闭，对拓展开放</li>
<li>对每个版本的 API 都写一个路由函数</li>
</ul>
<h1 id="第4章"><a href="#第4章" class="headerlink" title="第4章"></a>第4章</h1><h2 id="4-1-参数获取"><a href="#4-1-参数获取" class="headerlink" title="4-1 参数获取"></a>4-1 参数获取</h2><ul>
<li>path 路由参数：<code>ctx.params</code></li>
<li>query 参数: <code>ctx.request.query</code></li>
<li>headers 参数: <code>ctx.request.headers</code></li>
<li>body 参数: <code>ctx.request.body</code>（需要使用body-parser： <code>app.use(parser())</code>）</li>
</ul>
<h2 id="4-2-异常理论与异常链"><a href="#4-2-异常理论与异常链" class="headerlink" title="4-2 异常理论与异常链"></a>4-2 异常理论与异常链</h2><h3 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h3><pre><code>function func1() {
  try {
    func2()
  } catch (error) {
    throw error
  }
}

function func2() {
  try {
    func3()
  } catch (error) {
    throw error
  }
}

function func3() {
  try {
    console.log(0/a)
  } catch (error) {
    throw error
  }
}

func1()</code></pre><h2 id="4-3-异步异常处理"><a href="#4-3-异步异常处理" class="headerlink" title="4-3 异步异常处理"></a>4-3 异步异常处理</h2><p>try-catch 只对同步的方法有效，不能捕获异步的异常</p>
<blockquote>
<p>返回 Promise 的函数就可以使用 async 和 await 来改写</p>
</blockquote>
<p>await 对异步操作求值</p>
<p>await 把异步的异常给释放了出来</p>
<p>很多后如果不加 await ，异常就会变成一个 unhandled promise rejections</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> error
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// throw error</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h2 id="4-4-全局异常处理中间件编写"><a href="#4-4-全局异常处理中间件编写" class="headerlink" title="4-4 全局异常处理中间件编写"></a>4-4 全局异常处理中间件编写</h2><p>面向切面编程 AOP，不考虑细节</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> catchError <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'服务器有点问题，你等一下'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> catchError</code></pre>
<h3 id="4-5-已知错误与未知错误"><a href="#4-5-已知错误与未知错误" class="headerlink" title="4-5 已知错误与未知错误"></a>4-5 已知错误与未知错误</h3><p>应该返回给前端：</p>
<ul>
<li>HTTP status code： 2xx， 4xx， 5xx</li>
<li>message 具体的，文字化的信息</li>
<li>error_code <ul>
<li>开发者自己定义</li>
<li>可以是五位 10001， 20003</li>
</ul>
</li>
<li>request_url</li>
</ul>
<p>错误的分类</p>
<ul>
<li>已知型错误，参数类型不符合这些</li>
<li>未知型错误，程序潜在的错误，开发者无意识的</li>
</ul>
<h2 id="4-6-定义异常返回格式"><a href="#4-6-定义异常返回格式" class="headerlink" title="4-6 定义异常返回格式"></a>4-6 定义异常返回格式</h2><p>抛出异常</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'我是错误信息'</span><span class="token punctuation">)</span>
error<span class="token punctuation">.</span>errorCode <span class="token operator">=</span> <span class="token number">10001</span>
error<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">400</span> <span class="token comment" spellcheck="true">// 参数错误</span>
error<span class="token punctuation">.</span>requestUrl <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>
<span class="token keyword">throw</span> error</code></pre>
<p>处理错误中间件：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> catchError <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 已知异常</span>
      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
        msg<span class="token punctuation">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span>
        errorCode<span class="token punctuation">:</span> error<span class="token punctuation">.</span>errorCode<span class="token punctuation">,</span>
        request<span class="token punctuation">:</span> error<span class="token punctuation">.</span>requestUrl<span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
      ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> error<span class="token punctuation">.</span>status
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> catchError</code></pre>
<h3 id="4-7-定义-HttpExeption-异常基类"><a href="#4-7-定义-HttpExeption-异常基类" class="headerlink" title="4-7 定义 HttpExeption 异常基类"></a>4-7 定义 HttpExeption 异常基类</h3><pre><code>class HttpException extends Error {
  constructor(msg=&#39;服务器异常&#39;, errorCode=10000, code=400) {
    super()
    this.errorCode = errorCode
    this.code = code // httpStatus
    this.msg = msg
  }
}

module.exports = HttpException</code></pre><h3 id="4-8-特定异常类与-global-全局变量"><a href="#4-8-特定异常类与-global-全局变量" class="headerlink" title="4-8 特定异常类与 global 全局变量"></a>4-8 特定异常类与 global 全局变量</h3><h1 id="第-5-章"><a href="#第-5-章" class="headerlink" title="第 5 章"></a>第 5 章</h1><h2 id="5-2"><a href="#5-2" class="headerlink" title="5-2"></a>5-2</h2><p>lodash 一个库</p>
<p>深拷贝</p>
<p>validator.js 一个库</p>
<h2 id="5-4"><a href="#5-4" class="headerlink" title="5-4"></a>5-4</h2><p>通用型用户系统</p>
<ul>
<li>账号、密码、附属信息</li>
<li>注册、登录</li>
</ul>
<p>数据库：</p>
<ul>
<li>非关系型：<ul>
<li>（文档型）：MongoDB（持久化数据）</li>
<li>key-value 型：Redis（缓存、提高查询数据的速度）</li>
</ul>
</li>
<li>关系型：<ul>
<li>My SQL</li>
</ul>
</li>
</ul>
<h3 id="5-6-Sequelize-初始化配置与注意事项"><a href="#5-6-Sequelize-初始化配置与注意事项" class="headerlink" title="5-6 Sequelize 初始化配置与注意事项"></a>5-6 Sequelize 初始化配置与注意事项</h3><p>Wequelize 链接数据库，配置数据库参数</p>
<p>主键，不能重复，不能为空，可以自动增长</p>
<p>数字的主键查询性能好</p>
<p>1，2，3 这种自增长的字符串，遇到 1000 个并发很有可能就会计算重复</p>
<p>自增长 会 暴露用户编号，但是其实没什么，要做到，即使知道用户编号，也做不了什么</p>
<p>接口保护 鉴定权限 访问接口 Token</p>
<p>上线之后，数据迁移或者手动维护来更改表，推荐手动维护</p>
<p>数据迁移，SQL 更新，表设计的不好的时候可以用一下</p>
<p>设计接口的思维路径：（注册为例）</p>
<ul>
<li>先考虑接受的参数<ul>
<li>email</li>
<li>password1</li>
<li>password2</li>
<li>nickname</li>
</ul>
</li>
<li>在引入 Validator</li>
</ul>
<p>中间件是一个静态的方式，每一个请求进来都会实例化 RegisterValidator，10个请求10个实例，下面这样写</p>
<pre><code>router.post(&#39;register&#39;, new RegisterValidator(), async (ctx, next) =&gt; {
    // ...
})</code></pre><p>只在 KOA 项目启动的时候，new 一次 RegisterValidator，问题时 挂载在 RegisterValidator 实例上的属性就会被许多请求更改</p>
<p>函数通常不会保存变量的状态，类实例化的对象可以保存变量的状态</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>待续</tag>
        <tag>imooc 实战</tag>
      </tags>
  </entry>
  <entry>
    <title>ionic 开发总结</title>
    <url>/2020/06/02/temp/ionic%20%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="各种命令"><a href="#各种命令" class="headerlink" title="各种命令"></a>各种命令</h4><p>ionic serve -lc，ionic提供的浏览器调试</p>
<p>ionic g page xxx，添加模版页面</p>
<p>引入<code>import {NavParams} from &#39;ionic-angular&#39;</code><br> 跳转时传入参数： <code>this.navCtrl.push(demoPage, {item: &#39;value&#39;})</code><br> 跳转后的页面通过get方法获取值: <code>let temp = this.navParams.get(&#39;item&#39;)</code></p>
<h4 id="gradle-配置"><a href="#gradle-配置" class="headerlink" title="gradle 配置"></a>gradle 配置</h4><ul>
<li><code>ionic build android</code>是通过gradle编译，而且会在线下载gradle，墙内基本是下不了的，这就需要手动下载项目需要的gradle版本。 查看android platform下的build.gradle文件，看当前版本需要的gradle version。 下载成功后，放在<code>myApp\platforms\android\gradle</code>文件夹下， 命令行输入<code>set CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL=../gradle-2.14.1-all.zip</code> </li>
<li>maven下载失败问题。替换为阿里云镜像：<br> 打开项目\platforms\android\build.gradle修改：</li>
</ul>
<h4 id="Ionic2引入第三方js库（未验证）"><a href="#Ionic2引入第三方js库（未验证）" class="headerlink" title="Ionic2引入第三方js库（未验证）"></a>Ionic2引入第三方js库（未验证）</h4><p>应用中想实现一个页面，进入时显示根据设备uuid生成的二维码，虽然barcodescanner可以实现生成二维码，但会打开一个Activity，这样体验不符合需求。于是想到引用第三方的js库，如qrcode.js等。<br> 然而Ionic2使用typescript，ts中是无法直接调用js的。这里网上给出了两种方案。</p>
<ol>
<li>引入js文件，通过declarations.d.ts文件声明引用变量。</li>
<li>通过types库下载qrcode。</li>
</ol>
<p>方案2并没有成功，方案1的具体过程以qrcode为例，如下：</p>
<ol>
<li>从github下在需要的js文件，<code>jquery.min.js</code>和<code>qrcode.js</code> </li>
<li>文件复制到项目’/src/assets/js’目录下，js目录是自己新建的</li>
<li>在index.html中引入：<br> <code>&lt;script src=&quot;assets/js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;assets/js/qrcode.min.js&quot;&gt;&lt;/script&gt;</code> </li>
<li>在src目录下的<code>declarations.d.ts</code>中申明qrcode的方法变量：<br> <code>declare var QRCode;</code> </li>
<li>完成以上步骤后，就可以在ts中调用qrcode的方法，例如在页面上显示一个文本转换的二维码：<br> <code>&lt;div id=&quot;qrImage&quot; class=&quot;qrcode-image&quot;&gt;&lt;/div&gt;</code><br> <code>let qrImage = document.getElementById(&#39;qrImage&#39;); new QRCode(qrImage, &#39;test&#39;);</code></li>
</ol>
<h4 id="修改应用名称"><a href="#修改应用名称" class="headerlink" title="修改应用名称"></a>修改应用名称</h4><p>修改根目录下config.xml文件： <code>&lt;widget id=&quot;com.ionframework.demo&quot;&gt;</code>，id对应应用的包名</p>
<p> <code>&lt;name&gt;&lt;/name&gt;</code>对应应用名称，直接修改Android的values文件没有效果</p>
<h4 id="解决Splash后出现短暂白屏问题"><a href="#解决Splash后出现短暂白屏问题" class="headerlink" title="解决Splash后出现短暂白屏问题"></a>解决Splash后出现短暂白屏问题</h4><p>修改config.xml：<br>添加 <code>&lt;preference name=&quot;AutoHideSplashScreen&quot; value=&quot;false&quot;/&gt;</code><br>注释掉 <code>&lt;preference name=&quot;SplashScreenDelay&quot; value=&quot;3000&quot;/&gt;</code></p>
<h4 id="签名和打包"><a href="#签名和打包" class="headerlink" title="签名和打包"></a>签名和打包</h4><h6 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h6><p>ionic （cordova） build android —prod  -release 打包</p>
<h6 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h6><p>首先打开终端，cd该路径，输入命令 <code>keytool -genkey -alias demo.keystore -keyalg RSA -validity 40000 -keystore demo.keystore</code> </p>
<p>参数解释：<code>-genkey</code> 产生密钥，<code>-alias demo.keystore</code> 别名 demo.keystore，<code>-keyalg RSA</code> 使用RSA算法对签名加密，<code>-validity 40000</code> 有效期限4000天，-keystore demo.keystore</p>
<h6 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h6><p>这里有两种方案，一个是通过jarsigner工具，另一个是通过Ionic自动签名。这里笔者使用第二种。</p>
<p> 在项目的/platforms/android/目录下新建<code>release-signing.properties</code>文件，添加内容：</p>
<pre><code>storeFile=path to keystore
keyAlias=your key alias
storePassword=your store password
keyPassword=you key password</code></pre><p>####获取设备分辨率</p>
<p><code>window.screen.width * window.devicePixelRatio; window.screen.height * window.devicePixelRatio;</code></p>
<h4 id="页面间的参数传递"><a href="#页面间的参数传递" class="headerlink" title="页面间的参数传递"></a>页面间的参数传递</h4><p>引入<code>import {NavParams} from &#39;ionic-angular&#39;</code><br> 跳转时传入参数： <code>this.navCtrl.push(demoPage, {item: &#39;value&#39;})</code><br> 跳转后的页面通过get方法获取值: <code>let temp = this.navParams.get(&#39;item&#39;)</code></p>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><table>
<thead>
<tr>
<th>事件名称</th>
<th>事件说明</th>
</tr>
</thead>
<tbody><tr>
<td>ionViewDidLoad</td>
<td>页面加载完毕出发。页面被创建DOM的时候触发，如果页面被缓存，就不会再次出发了。可以放置一些初始化页面的事件。</td>
</tr>
<tr>
<td>ionViewWillEnter</td>
<td>即将进入一个页面变成当前激活页面的时候执行</td>
</tr>
<tr>
<td>ionViewDidEnter</td>
<td>进入了一个页面，并且页面变成了当前激活的页面，不管第一次进入页面还是缓存后进入都会执行</td>
</tr>
<tr>
<td>ionViewWillLeave</td>
<td>将要离开页面的时候执行</td>
</tr>
<tr>
<td>ionViewDidLeave</td>
<td>完成离开页面之后执行</td>
</tr>
<tr>
<td>ionViewWillUnload</td>
<td>页面销毁和页面中所有元素移除之前执行</td>
</tr>
<tr>
<td>ionViewDidUnload</td>
<td>页面销毁和页面中有元素移除之后执行的事件</td>
</tr>
</tbody></table>
<h3 id="热更新的方法"><a href="#热更新的方法" class="headerlink" title="热更新的方法"></a>热更新的方法</h3><ol>
<li><p>安装 cordova-hot-code-push-cli,执行命令 <code>npm install -g cordova-hot-code-push-cli</code>，作用是使用该命令行生成检测配置文件，通常是在 <code>www</code> 目录下动态生成 <code>chcp.json</code>和 <code>chcp.manifest</code> 生成两个文件</p>
</li>
<li><p>进入项目目录</p>
</li>
<li><p>安装热更新插件，执行命令(cordova或ionic都可以)：<code>cordova/ionic plugin add cordova-hot-code-push-plugin</code></p>
</li>
<li><p><strong>创建cordova-hcp.json模板</strong></p>
<p>在cordova项目根目录下创建一个 cordova-hcp.json模板文件。 cordova-hcp.json内容如下：</p>
<pre><code>{
  &quot;autogenerated&quot;: true,
  &quot;name&quot;: &quot;bankapp&quot;,
  &quot;min_native_interface&quot;: 1, //最小支持的外壳app版本
  &quot;content_url&quot;: &quot;http://192.168.1.101:9999/www&quot;,
  &quot;ios_identifier&quot;:&quot;https://itues.apple.com/cn/***&quot;, //打版提交App Store下载的地址
  &quot;update&quot;: &quot;now&quot;
}</code></pre><p><strong>&amp;注意</strong> ：content_url：是你服务器上要更新的文件地址，执行： <code>$ cordova-hcp build</code>，就会利用这个模板自动在<code>www</code>文件夹下生成新的 chcp.json和chcp.manifest文件，而不用手动更改 www/chcp.json了。</p>
<p>解析下：</p>
<ul>
<li>min_native_interface: 记录当前App的外壳版本值</li>
<li>chcp.manifest文件记录版本的hash值</li>
<li>ios_identifier:记录App在苹果商店上的位置，就是外壳地址</li>
<li>release：内壳时间戳版本，根据时间戳来更新的。</li>
<li>content_url: 是你服务器内更新的文件地址。此处建议设为www文件夹，因为我们改动代码后要把www文件进行更新，可以直接将改动后的www文件夹把服务器上旧的的www替换掉。</li>
</ul>
</li>
<li><p>配置config.xml文件</p>
<p>在config.xml文件中添加以下代码: </p>
<pre><code>&lt;chcp&gt; &lt;native-interface version=&quot;1&quot; /&gt; &lt;config-file url=&quot;http://192.168.1.101:9999/www/chcp.json&quot; /&gt; &lt;/chcp&gt;</code></pre><p><strong>&amp;注意：</strong>url为你服务器中更新文件的地址/ chcp.json</p>
<p><strong>&amp;注意：</strong>内壳更新 要把cordova-hcp.json和config.xml中的 版本号设置为一样的</p>
</li>
<li><p><strong>完成以上准备，开始测试 热更新(html、css或js等资源的动态更新，即内壳更新）</strong></p>
</li>
<li><p>更改文件以后运行 <code>$ cordova-hcp build</code>，再次将更改后的www的文件拷贝到服务器中，把原来旧的www文件替换即可</p>
</li>
</ol>
<p>参考资料： <a href="https://www.jianshu.com/p/2f356e3276b8" target="_blank" rel="noopener">https://www.jianshu.com/p/2f356e3276b8</a></p>
<h4 id="外壳更新-（从网上抄的）"><a href="#外壳更新-（从网上抄的）" class="headerlink" title="外壳更新 （从网上抄的）"></a>外壳更新 （从网上抄的）</h4><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>这个外壳更新有点强制化，比如你在使用应用时，突然弹出个pop,提示你有新的版本更新了，人性化点的还有个取消按钮；强制性的就确定后直接跳转到AppStore了。这在你自己怎么设置了。<br> 像原生的版本更新就没有强制；如你打版提交审核上架了，客户端也就仅在appStore商店有个更新提醒，更不更在客户了。</p>
<h4 id="外壳更新配置"><a href="#外壳更新配置" class="headerlink" title="外壳更新配置"></a>外壳更新配置</h4><p>上面的内壳更新整好后，这就比较简单了，因该配的已配置好，只在这改改某些属性就可以</p>
<h5 id="通过min-native-interface监控app是否提示更新"><a href="#通过min-native-interface监控app是否提示更新" class="headerlink" title="通过min_native_interface监控app是否提示更新"></a>通过min_native_interface监控app是否提示更新</h5><p>所需最小的外壳app版本. 这是app的build版本号，是个整型数字, 不是应用商店中看到的形如”1.0.0”字符串。</p>
<p>在 config.xml中，这样指定build版本号，例如：app外壳里的config.xml是这样的：</p>
<pre><code>    &lt;chcp&gt;
        &lt;native-interface version=&quot;1&quot; /&gt;
        &lt;config-file url=&quot;http://192.168.191.2:9999/www/chcp.json&quot; /&gt;
    &lt;/chcp&gt;</code></pre><p>与www目录下的cordova-hcp.json/chcp.json里面的min_native_interface数值相对应，</p>
<blockquote>
<p>若服务器里的min_native_interface也对应是1，就不会出现提示用户升级版本的状态（即外壳更新），正常修改www目录的内容通过更新release值，和客户端进行对比，可实现热更新（即内壳更新）。</p>
</blockquote>
<pre><code>{
  &quot;autogenerated&quot;: true,
  &quot;name&quot;: &quot;bankapp&quot;,
  &quot;min_native_interface&quot;: 1, //最小内核版本号
  &quot;content_url&quot;: &quot;http://192.168.191.2:9999/www&quot;,
  &quot;ios_identifier&quot;: &quot;https://itues.apple.com/cn/***&quot;, //打版提交App Store下载的地址
  &quot;update&quot;: &quot;now&quot;,
  &quot;release&quot;: &quot;2017.02.23-12.53.32&quot;
}</code></pre><p>假设你的外壳app加了个新的插件或文件，应该会更新外壳app。为了防止用户通过热更新下载了不适合他现有外壳app的web内容，应该设置下 min_native_interface 的值<br> 下面我们将 min_native_interface 的值改为 2</p>
<pre><code>{
  &quot;autogenerated&quot;: true,
  &quot;name&quot;: &quot;bankapp&quot;,
  &quot;min_native_interface&quot;: 2, //最小支持的外壳app版本
  &quot;content_url&quot;: &quot;http://192.168.191.2:9999/www&quot;,
  &quot;ios_identifier&quot;: &quot;https://itues.apple.com/cn/***&quot;, //打版提交App Store下载的地址
  &quot;update&quot;: &quot;now&quot;,
  &quot;release&quot;: &quot;2017.02.23-12.53.32&quot;
}</code></pre><p>热更新插件加载到这段json的时候, 发现 min_native_interface 比当前外壳app的build号要大，便不会下载web内容。而是触发一个chcp_updateLoadFailed 错误通知, 告诉用户需要升级外壳app版本了。</p>
<p>此属性将与config.xml中的native-interface进行对比，如果发现两者不同时，将会触发相应的事件，比如，手机端app中config.xml的<code>native-interface</code>值比服务器上的chcp.json文件中的<code>min_native_interface</code>值小时，将会触发<code>’chcp_updateLoadFailed’</code>事件，同时，错误代码为：<br> <code>chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW</code> 通过这个错误码调用js端监听相应事件通过弹窗提示用户去升级，跳转到AppStore或下载新安装包。</p>
<blockquote>
<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>1、导入插件。外壳（版本号）的更新需要导入另外3个插件<br> <a href="https://link.jianshu.com?t=https://github.com/apache/cordova-plugin-file" target="_blank" rel="noopener">cordova-plugin-file</a>、<a href="https://link.jianshu.com?t=https://github.com/apache/cordova-plugin-file-transfer" target="_blank" rel="noopener">cordova-plugin-file-transfer</a>、<a href="https://link.jianshu.com?t=https://github.com/pwlin/cordova-plugin-file-opener2" target="_blank" rel="noopener">cordova-plugin-file-opener2</a></p>
</blockquote>
<blockquote>
<p>导入命令：```<br> $ cordova plugin add cordova-plugin-file<br> $ cordova plugin add cordova-plugin-file-transfer<br> $ cordova plugin add cordova-plugin-file-opener2</p>
</blockquote>
<pre><code>&gt; 2、添加代码-弹框-跳转至商店更新 **&amp; ios_identifier为要跳转的地址**
&gt; 将下面的代码放到 .run function中启动时就调用（看自己怎么封装的，我封到router中了）如图:
&gt; ![](http://upload-images.jianshu.io/upload_images/4665802-c8d20aa8c0413f8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

 `min_native-interface`将与config.xml中的`native-interface`进行对比、如果两者不同、将会触发`&#39;chcp_updateLoadFailed&#39;`事件。同时、错误代码为：
`chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW`，返回值为-2，那么就会执行下面的代码，弹框提示更新了。

&gt;  ```
var appUpdate = {
        // Application Constructor
        initialize: function() {
            this.bindEvents();
        },
        // Bind any events that are required.
        // Usually you should subscribe on &#39;deviceready&#39; event to know, when you can start calling cordova modules
        bindEvents: function() {
            document.addEventListener(&#39;deviceready&#39;, this.onDeviceReady, false);
            document.addEventListener(&#39;chcp_updateLoadFailed&#39;, this.onUpdateLoadError, false);
        },
        // deviceready Event Handler
        onDeviceReady: function() {
        },
        onUpdateLoadError: function(eventData) {
            var error = eventData.detail.error;

            // 当检测出外核版本有更新，// 针对不同平台进行相应更新操作
            if (error &amp;&amp; error.code == chcp.error.APPLICATION_BUILD_VERSION_TOO_LOW) {
                var dialogMessage = &#39;有新的版本,请下载更新&#39;;

                // iOS端 直接弹窗提示升级，点击ok后自动跳转
                if(ionic.Platform.isIOS()){
                    chcp.requestApplicationUpdate(dialogMessage, this.userWentToStoreCallback, this.userDeclinedRedirectCallback);
                //Android端 提示升级下载最新APK文件 
                } else if(ionic.Platform.isAndroid()){
                    //这儿放Android端更新代码...，在下面👇
                }
            }
        },
        userWentToStoreCallback: function() {
            // user went to the store from the dialog
        },
        userDeclinedRedirectCallback: function() {
            // User didn&#39;t want to leave the app.
            // Maybe he will update later.
        }
    };
    appUpdate.initialize();</code></pre><p><strong>Android端添加代码👆 提示升级下载最新APK文件</strong></p>
<blockquote>
</blockquote>
<pre><code>var confirmPopup = $ionicPopup.confirm({
  template: &#39;有新的版本,请下载更新&#39;,
  cssClass: &#39;popup&#39;,
  cancelText:&#39;取消&#39;,
  okText:&#39;升级&#39;
});
confirmPopup.then(function (res) {
  if (res) {
    $ionicLoading.show({
      template: &quot;已经下载：0%&quot;
    });
    window.resolveLocalFileSystemURL(cordova.file.externalRootDirectory, function(fileEntry) {
      fileEntry.getDirectory(&quot;***(app名称)&quot;, { create: true, exclusive: false }, function (fileEntry) {
        //下载代码
        var fileTransfer = new FileTransfer();
        fileTransfer.download(&quot;app下载地址&quot;, fileEntry.toInternalURL()+&quot;***(app名称).apk&quot;, function(entry) {
          // 打开下载下来的APP
          cordova.plugins.fileOpener2.open(
            entry.toInternalURL(),//下载文件保存地址
            &#39;application/vnd.android.package-archive&#39;, {//以APK文件方式打开
              error: function(err) {
              },
              success: function() {}
            });
        }, function(err) {
        },true);
        fileTransfer.onprogress = function(progressEvent) {
          $timeout(function () {
            var downloadProgress = (progressEvent.loaded / progressEvent.total) * 100;
            $ionicLoading.show({
              template: &quot;已经下载：&quot; + Math.floor(downloadProgress) + &quot;%&quot;
            });
            if (downloadProgress &gt; 99) {
              $ionicLoading.hide();
            }
          });
        };
      },function(err){alert(&quot;创建失败&quot;)});
    });
  }
});</code></pre><h5 id="chcp-json中update字段含义"><a href="#chcp-json中update字段含义" class="headerlink" title="chcp.json中update字段含义"></a>chcp.json中update字段含义</h5><p>指定了什么时候安装web内容更新，支持的值有：</p>
<blockquote>
<p>start  - app启动时安装更新，默认值<br> resume - app从后台切换过来的时候安装更新<br> now    - web内容下载完毕即安装更新</p>
</blockquote>
<p>好了，先总结这么多，可能会有些细节落下，望大家参考时，给我提下，我在继续补充。</p>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>别人总结的各种各样的正则表达式</title>
    <url>/2020/06/01/temp/%E5%88%AB%E4%BA%BA%E6%80%BB%E7%BB%93%E7%9A%84%E5%BE%88%E5%A4%9A%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<p>** 别人总结的，之后补全出处 **</p>
<h3 id="1、是否合法IP地址"><a href="#1、是否合法IP地址" class="headerlink" title="1、是否合法IP地址"></a>1、是否合法IP地址</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateIP</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">==</span><span class="token string">''</span><span class="token operator">||</span>value<span class="token operator">==</span>undefined<span class="token operator">||</span>value<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span>\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token number">1</span>\d\d<span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token number">1</span>\d\d<span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\
<span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>user<span class="token operator">-</span>gold<span class="token operator">-</span>cdn<span class="token punctuation">.</span>xitu<span class="token punctuation">.</span>io<span class="token operator">/</span><span class="token number">2019</span><span class="token operator">/</span><span class="token number">11</span><span class="token operator">/</span><span class="token number">22</span><span class="token regex">/16e9182103044230?w=900&amp;h=500&amp;f=gif&amp;s=662884).(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正确的IP地址'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2、是否手机号码或者固话"><a href="#2、是否手机号码或者固话" class="headerlink" title="2、是否手机号码或者固话"></a>2、是否手机号码或者固话</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validatePhoneTwo</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/^((0\d{2,3}-\d{7,8})|(1[34578]\d{9}))$/</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token string">''</span> <span class="token operator">||</span> value <span class="token operator">==</span> undefined <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正确的电话号码或者固话号码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3、是否固话"><a href="#3、是否固话" class="headerlink" title="3、是否固话"></a>3、是否固话</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateTelphone</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span><span class="token regex">/0\d{2,3}-\d{7,8}/</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">==</span><span class="token string">''</span><span class="token operator">||</span>value<span class="token operator">==</span>undefined<span class="token operator">||</span>value<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正确的固定电话）'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="4、是否手机号码"><a href="#4、是否手机号码" class="headerlink" title="4、是否手机号码"></a>4、是否手机号码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validatePhone</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span><span class="token regex">/^[1][3-9][0-9]{9}$/</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">==</span><span class="token string">''</span><span class="token operator">||</span>value<span class="token operator">==</span>undefined<span class="token operator">||</span>value<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正确的电话号码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="5、是否身份证号码"><a href="#5、是否身份证号码" class="headerlink" title="5、是否身份证号码"></a>5、是否身份证号码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateIdNo</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">==</span><span class="token string">''</span><span class="token operator">||</span>value<span class="token operator">==</span>undefined<span class="token operator">||</span>value<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正确的身份证号码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="6、是否邮箱"><a href="#6、是否邮箱" class="headerlink" title="6、是否邮箱"></a>6、是否邮箱</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateEMail</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span><span class="token regex">/^([a-zA-Z0-9]+[-_\.]?)+@[a-zA-Z0-9]+\.[a-z]+$/</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">==</span><span class="token string">''</span><span class="token operator">||</span>value<span class="token operator">==</span>undefined<span class="token operator">||</span>value<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正确的邮箱'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="7、合法url"><a href="#7、合法url" class="headerlink" title="7、合法url"></a>7、合法url</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> urlregex <span class="token operator">=</span> <span class="token regex">/^(https?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?'\\+&amp;%$#=~_-]+))*$/</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> urlregex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="8、验证内容是否包含英文数字以及下划线"><a href="#8、验证内容是否包含英文数字以及下划线" class="headerlink" title="8、验证内容是否包含英文数字以及下划线"></a>8、验证内容是否包含英文数字以及下划线</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isPassword</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span><span class="token regex">/^[_a-zA-Z0-9]+$/</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">==</span><span class="token string">''</span><span class="token operator">||</span>value<span class="token operator">==</span>undefined<span class="token operator">||</span>value<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'仅由英文字母，数字以及下划线组成'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="9、自动检验数值的范围"><a href="#9、自动检验数值的范围" class="headerlink" title="9、自动检验数值的范围"></a>9、自动检验数值的范围</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">checkMax20000</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token string">''</span> <span class="token operator">||</span> value <span class="token operator">==</span> undefined <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入[1,20000]之间的数字'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> value <span class="token operator">></span> <span class="token number">20000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入[1,20000]之间的数字'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="10、验证数字输入框最大数值"><a href="#10、验证数字输入框最大数值" class="headerlink" title="10、验证数字输入框最大数值"></a>10、验证数字输入框最大数值</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">checkMaxVal</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> value <span class="token operator">></span> 最大值<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入[0,最大值]之间的数字'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="11、验证是否1-99之间"><a href="#11、验证是否1-99之间" class="headerlink" title="11、验证是否1-99之间"></a>11、验证是否1-99之间</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isOneToNinetyNine</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'输入不可以为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正整数'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex">/^[1-9][0-9]{0,1}$/</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> rsCheck <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rsCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正整数，值为【1,99】'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="12、验证是否整数"><a href="#12、验证是否整数" class="headerlink" title="12、验证是否整数"></a>12、验证是否整数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'输入不可以为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正整数'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex">/^[0-9]*[1-9][0-9]*$/</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> rsCheck <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rsCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正整数'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="13、验证是否整数-非必填"><a href="#13、验证是否整数-非必填" class="headerlink" title="13、验证是否整数,非必填"></a>13、验证是否整数,非必填</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isIntegerNotMust</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正整数'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex">/^[0-9]*[1-9][0-9]*$/</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> rsCheck <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rsCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正整数'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="14、-验证是否是-0-1-的小数"><a href="#14、-验证是否是-0-1-的小数" class="headerlink" title="14、 验证是否是[0-1]的小数"></a>14、 验证是否是[0-1]的小数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isDecimal</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'输入不可以为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入[0,1]之间的数字'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> value <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入[0,1]之间的数字'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="15、-验证是否是-1-10-的小数-即不可以等于0"><a href="#15、-验证是否是-1-10-的小数-即不可以等于0" class="headerlink" title="15、 验证是否是[1-10]的小数,即不可以等于0"></a>15、 验证是否是[1-10]的小数,即不可以等于0</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isBtnOneToTen</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'输入不可以为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正整数，值为[1,10]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">'3'</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">'4'</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">'5'</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">'6'</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">'7'</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">'8'</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">'9'</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正整数，值为[1,10]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="16、验证是否是-1-100-的小数-即不可以等于0"><a href="#16、验证是否是-1-100-的小数-即不可以等于0" class="headerlink" title="16、验证是否是[1-100]的小数,即不可以等于0"></a>16、验证是否是[1-100]的小数,即不可以等于0</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isBtnOneToHundred</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'输入不可以为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入整数，值为[1,100]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> value <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入整数，值为[1,100]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="17、验证是否是-0-100-的小数"><a href="#17、验证是否是-0-100-的小数" class="headerlink" title="17、验证是否是[0-100]的小数"></a>17、验证是否是[0-100]的小数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isBtnZeroToHundred</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'输入不可以为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入[1,100]之间的数字'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> value <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入[1,100]之间的数字'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="18、验证端口是否在-0-65535-之间"><a href="#18、验证端口是否在-0-65535-之间" class="headerlink" title="18、验证端口是否在[0,65535]之间"></a>18、验证端口是否在[0,65535]之间</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isPort</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'输入不可以为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token string">''</span> <span class="token operator">||</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入端口值'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex">/^([0-9]|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$/</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> rsCheck <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rsCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入在[0-65535]之间的端口值'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="19、验证端口是否在-0-65535-之间，非必填-isMust表示是否必填"><a href="#19、验证端口是否在-0-65535-之间，非必填-isMust表示是否必填" class="headerlink" title="19、验证端口是否在[0,65535]之间，非必填,isMust表示是否必填"></a>19、验证端口是否在[0,65535]之间，非必填,isMust表示是否必填</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isCheckPort</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token string">''</span> <span class="token operator">||</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">//callback(new Error('请输入端口值'));</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex">/^([0-9]|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$/</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> rsCheck <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rsCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入在[0-65535]之间的端口值'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="20、小写字母"><a href="#20、小写字母" class="headerlink" title="20、小写字母"></a>20、小写字母</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateLowerCase</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/^[a-z]+$/</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="22、两位小数验证"><a href="#22、两位小数验证" class="headerlink" title="22、两位小数验证"></a>22、两位小数验证</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> validateValidity <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/(^[1-9]([0-9]+)?(\.[0-9]{1,2})?$)|(^(0){1}$)|(^[0-9]\.[0-9]([0-9])?$)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'最多两位小数！！！'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="23、是否大写字母"><a href="#23、是否大写字母" class="headerlink" title="23、是否大写字母"></a>23、是否大写字母</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateUpperCase</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/^[A-Z]+$/</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="24、是否大小写字母"><a href="#24、是否大小写字母" class="headerlink" title="24、是否大小写字母"></a>24、是否大小写字母</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validatAlphabets</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/^[A-Za-z]+$/</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="25、密码校验"><a href="#25、密码校验" class="headerlink" title="25、密码校验"></a>25、密码校验</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> validatePsdReg <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入密码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^(?![\d]+$)(?![a-zA-Z]+$)(?![^\da-zA-Z]+$)([^\u4e00-\u9fa5\s]){6,20}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="26、中文校验"><a href="#26、中文校验" class="headerlink" title="26、中文校验"></a>26、中文校验</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> validateContacts <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入中文'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^[\u0391-\uFFE5A-Za-z]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'不可输入特殊字符'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="27、-账号校验"><a href="#27、-账号校验" class="headerlink" title="27、 账号校验"></a>27、 账号校验</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> validateCode <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入账号'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]{6,20}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'账号必须为6-20位字母和数字组合'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="28-、纯数字校验"><a href="#28-、纯数字校验" class="headerlink" title="28 、纯数字校验"></a>28 、纯数字校验</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> validateNumber <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> numberReg <span class="token operator">=</span> <span class="token regex">/^\d+$|^\d+[.]?\d+$/</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>numberReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入数字'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入值'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="29、最多一位小数"><a href="#29、最多一位小数" class="headerlink" title="29、最多一位小数"></a>29、最多一位小数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> onePoint <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^[0-9]+([.]{1}[0-9]{1})?$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'最多一位小数！！！'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 Rxjs</title>
    <url>/2020/06/01/temp/%E5%AD%A6%E4%B9%A0%20Rxjs/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><code>Rx.Observable.fromEvent(element, event)</code> 可以将一个事件转化为一个流</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> height$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>heightInput<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 每一次抬起键盘打印出一个事件的对象，一大堆</span>
height$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 每次输入之后，log 出input 的值</span>
height$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val。target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h2 id="常见的创建类操作符"><a href="#常见的创建类操作符" class="headerlink" title="常见的创建类操作符"></a>常见的创建类操作符</h2><p>from：可以吧数组、Promise、以及Iterable 转化为Observable</p>
<p>fromEvent： 可以吧事件转化为Observable</p>
<p>of：接受一系列的数据，并把他们 emit 出去，和数组的区别是，可以单独的四个数，可以不在一个数组里边存着。</p>
<h2 id="常见转换累操作符：map、mapTo、pluck"><a href="#常见转换累操作符：map、mapTo、pluck" class="headerlink" title="常见转换累操作符：map、mapTo、pluck"></a>常见转换累操作符：map、mapTo、pluck</h2><p>map 是对原始流中的元素进行处理，映射成另一个元素。</p>
<p><code>.map(x =&gt; 10 * x)</code></p>
<p>pluck 是 map 对于对象的一种特殊应用</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>widthInput<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 下面的代码一样的作用</span>
<span class="token keyword">var</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>widthInput<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ev <span class="token operator">=</span><span class="token operator">></span> ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span></code></pre>
<p>mapTo 后面可以输入一个常量，我只关心你发生了，不管你到底是什么事件</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>widthInput<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">mapTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 下面的代码效果一样</span>
<span class="token keyword">var</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>widthInput<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre>
<h2 id="Observable-的性质"><a href="#Observable-的性质" class="headerlink" title="Observable 的性质"></a>Observable 的性质</h2><p>三种状态： next, error, complete</p>
<p>subscribe 有三个函数作为参数</p>
<p>特殊的：永不结束, Never, Empty(结束但不发书，直接进入complete 状态)，Throw（直接进入 error状态）</p>
<ol>
<li>永不结束的，例如，计时器，每隔一秒发送一个信息给你；</li>
<li>Never：完全不发射元素，流也不结束，测试的时候用到；</li>
<li>Empty：不发射，流里面没有元素，但是直接进入结束状态，测试的时候用到；</li>
<li>Throw：不发射热和元素，流里面没有东西，直接进入error状态。</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token string">'出错了'</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

interval$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
    next <span class="token operator">=</span> <span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error: '</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am complete'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 直接进入error</span>
<span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 直接进入结束</span>
<span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>通常要避免认为制造never 和 empty，要考虑无穷序列和条件的匹配</p>
<h2 id="过滤类操作符：-filter-take-first-last-skip；两个常见的创建类操作符：-Interval，-Timer"><a href="#过滤类操作符：-filter-take-first-last-skip；两个常见的创建类操作符：-Interval，-Timer" class="headerlink" title="过滤类操作符： filter, take, first/last, skip；两个常见的创建类操作符： Interval， Timer"></a>过滤类操作符： filter, take, first/last, skip；两个常见的创建类操作符： Interval， Timer</h2><ol>
<li>filter 过滤器，满足一定条件的过滤掉</li>
<li>take 第几个，first 和 last 是 take 的特殊表达形式</li>
<li>skip省略掉前面的几个东西</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 永远不结束</span>
interval$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
    next <span class="token operator">=</span> <span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am complete'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 取前三个</span>
<span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
interval$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
    next <span class="token operator">=</span> <span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am complete'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> timer$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
timer$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一个参数表示第一次运行的延迟，第二个表示之后间隔运行的时间，timer 相当于包含了 interval 的功能</span>
<span class="token keyword">const</span> timer$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
timer$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="常见工具操作符（do、scan、reduce"><a href="#常见工具操作符（do、scan、reduce" class="headerlink" title="常见工具操作符（do、scan、reduce)"></a>常见工具操作符（do、scan、reduce)</h2><ol>
<li>do 一般做调试</li>
<li>do 还可以进行一些外部条件的设置，对流之外的东西进行一些改变</li>
<li>scan，变换类操作符，频繁</li>
<li>reduce 数学类操作符，特别频繁</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> logLabel <span class="token operator">=</span> <span class="token string">'当前值是'</span>
<span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">do</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>logLabel' <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logLabel <span class="token operator">=</span> <span class="token string">"当前"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// do 的作用是 map 之后， take 之前，看看流里面的内容</span>
interval$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
    next <span class="token operator">=</span> <span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am complete'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 只有当这个条件为真的时候才会把它放行出来</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">do</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'val is '</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// do 的作用是 map 之后， take 之前，看看流里面的内容</span>
interval$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
    next <span class="token operator">=</span> <span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am complete'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">do</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'val is '</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// .take(1) 和 .first() 效果一样，</span>
    <span class="token comment" spellcheck="true">// 对一个无穷的序列取.last()，拿最后一个，会变成 never 状态，永远不会实现，人为制造出来一个empty，要注意，不要编写一个无法发射值的流</span>
    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// do 的作用是 map 之后， take 之前，看看流里面的内容</span>
interval$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
    next <span class="token operator">=</span> <span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am complete'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>skip 跳过两个，4，6。。。。。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">do</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'val is '</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
interval$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
    next <span class="token operator">=</span> <span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am complete'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>scan 接受一个函数作为参数，第一个参数增加器，将这一次累加的结果，作为下一次的第一个参数传进去，默认的初始值，第二个参数是序列中当前的发射值，返回的是0，2，6，12，有点像数组的 scan， 记住之前的运算结果</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> x <span class="token operator">+</span> y
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
interval$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
    next <span class="token operator">=</span> <span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am complete'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>reduce 和 scan 的计算是一样的，它要计算一个最终值，而且也只发射最后的一个值，注意写的时候无限序列不能用reduce</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> x <span class="token operator">+</span> y
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

interval$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
    next <span class="token operator">=</span> <span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am complete'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>也可以给 reduce 和 scan 设置初始值，在第一个函数参数的后面写，可以给初始值设置为数组或者字典对象，例如</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> interval$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> val <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

interval$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
    next <span class="token operator">=</span> <span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am complete'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>写一个 debug.util.ts</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>Observable<span class="token punctuation">}</span> <span class="token keyword">from</span> 'rxjs<span class="token operator">/</span>Observable<span class="token punctuation">;</span>

declare module <span class="token string">'rxjs/Observable'</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">Observable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
    debug<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Observable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">do</span><span class="token punctuation">(</span>
      next <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>environment<span class="token punctuation">.</span>production<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>environment<span class="token punctuation">.</span>production<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> error<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>environment<span class="token punctuation">.</span>production<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Completed'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="过滤类操作符，debounce，-debounceTime"><a href="#过滤类操作符，debounce，-debounceTime" class="headerlink" title="过滤类操作符，debounce， debounceTime"></a>过滤类操作符，debounce， debounceTime</h2><p>想象成滤波器或整流器，希望得到的元素是又一定时间间隔的，有一定规矩的</p>
<p>和 filter 有点像，但是这个是时间相关的</p>
<pre class=" language-Html"><code class="language-Html"><input type="number" id="length" />
<input type="number" id="width" /></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> length <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> width <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 不操作</span>
<span class="token keyword">const</span> length$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
length$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>debounce 可以接时间，单位是毫秒，也可以接Observable</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> length$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 300ms 之内的动作不理会的</span>
    <span class="token punctuation">.</span><span class="token function">debounceTime</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
length$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> length$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 300ms 之内的动作不理会的</span>
    <span class="token punctuation">.</span><span class="token function">debounceTime</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
length$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h2 id="过滤类操作符：-distinct，-distinctUntilChanged"><a href="#过滤类操作符：-distinct，-distinctUntilChanged" class="headerlink" title="过滤类操作符： distinct， distinctUntilChanged"></a>过滤类操作符： distinct， distinctUntilChanged</h2><p>distinct 把流里边不一样的保留下来，重复的过滤掉，队列中所有元素不能重复。</p>
<p>distinctUtilChanged 跟前一个元素对比，一样的话，过滤掉，对劣质中不连续出现两个一样的元素。</p>
<p>Distinct 要小心使用，无尽序列一直监控会极大地消耗内存</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> length$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
length$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h2 id="合并类操作符：-merge，concat，startWith"><a href="#合并类操作符：-merge，concat，startWith" class="headerlink" title="合并类操作符： merge，concat，startWith"></a>合并类操作符： merge，concat，startWith</h2><p>对多个流，进行合并。</p>
<p>merge 两个流按照发射元素的时间顺序，合并成一个流。每个元素的时间点是不会变的。</p>
<p>concat 对接，第一个流排放到新的流里边之后，再把第二个流放排在第一个流的后面，放到新生成的流里面，要等待第一个流结束。</p>
<p>startWith 默认值，一开始就发射出来</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> length$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> merge$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>width$<span class="token punctuation">,</span> length$<span class="token punctuation">)</span>
merge$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>startWith 赋初始值，避免流一开始没有值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> length$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> merge$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>width$<span class="token punctuation">,</span> length$<span class="token punctuation">)</span>
merge$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> first$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> merge$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>first$<span class="token punctuation">,</span> width$<span class="token punctuation">)</span>
merge$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h2 id="合并类操作符：-combineLatest，-withLatestFrom，-zip"><a href="#合并类操作符：-combineLatest，-withLatestFrom，-zip" class="headerlink" title="合并类操作符： combineLatest， withLatestFrom， zip"></a>合并类操作符： combineLatest， withLatestFrom， zip</h2><p>combineLatest 组成新流的两个或多个原始流中每个有新元素出现，会按照一定的规则，将其他流中最后的那个元素生成一个新元素放到新的流中。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> length$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> merge$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">combineLatest</span><span class="token punctuation">(</span>width$<span class="token punctuation">,</span> length$<span class="token punctuation">,</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> l <span class="token operator">*</span> w<span class="token punctuation">)</span>
merge$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>withLatestFrom，是一个流为主体，当这个流中产生新的元素的时候，去另外一个流中取元素。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> length$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> merge$ <span class="token operator">=</span> length$<span class="token punctuation">.</span><span class="token function">withLatestFrom</span><span class="token punctuation">(</span>width$<span class="token punctuation">)</span><span class="token punctuation">;</span>
merge$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>zip 是严格要求成对的，各自都要产生一个元素，才能在新的流中生成一个元素。我的第一个和你的第一个对齐，我的第二个和你的第二个对齐，最慢的流决定最终的速度</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> width$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> length$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">'keyup'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> merge$ <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>width$<span class="token punctuation">,</span> length$<span class="token punctuation">,</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> l <span class="token operator">*</span> w<span class="token punctuation">)</span>
merge$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h2 id="流的好处"><a href="#流的好处" class="headerlink" title="流的好处"></a>流的好处</h2><h4 id="同步和异步统一的代码"><a href="#同步和异步统一的代码" class="headerlink" title="同步和异步统一的代码"></a>同步和异步统一的代码</h4><pre><code>function getDataP() {
  if (a) {
    return Promise.resolve(a)
  } else {
    return AJAX.get(&#39;a&#39;)
  }
}

getDataP().then(data =&gt; {
  // Promise 只有一个返回值，响应一次
  console.log(data)
})

service.on(&#39;task&#39;, data =&gt; {
  // render
})

service.getData()   // 加了这么一句来主动触发请求</code></pre><pre><code>function getDataO() {
  if (a) {
    return Observable.of(a)
  } else {
    return Observable.fromPromise(AJAX.get(&#39;a&#39;))
  }
}

getDataO().subscribe(data =&gt; {
  // Observable 可以有多个返回值，响应多次
  // do render
  console.log(data)
})


const A$ = Observable.interval(1000)
const B$ = Observable.of(3)
const C$ = Observable.from([5, 6, 7])

const D$ = C$.toArray()
  .map(arr =&gt; arr.reduce((a, b) =&gt; a + b), 0)
const E$ = Observable.combineLatest(A$, B$, D$)
   .map(arr =&gt; arr.reduce((a, b) =&gt; a + b), 0)</code></pre><p>在业务开发中，我们时常遇到这么一种场景：</p>
<p>已过滤排序的列表中加入一条新数据，要重新按照这条规则走一遍。</p>
<p>我用一个简单的类比来描述这件事：</p>
<blockquote>
<p>每个进教室的同学都可以得到一颗糖</p>
</blockquote>
<p>这句话表达了两个含义：</p>
<ul>
<li>在这句断言产生之前，对于已经在教室里的每个人，都应当去给他们发一颗糖</li>
<li>在这句断言形成以后，再进入这个教室的每个人，都应当得到一颗糖</li>
</ul>
<pre><code>const final$ = source$.map(filterA).map(sorterA)
const source$ = start$.merge(patch$)</code></pre><p>来源等于初始数据与新增数据的合并。</p>
<p>然后，实现出filterA和sorterA，就完成了整个这段业务逻辑的抽象定义。给start和patch分别进行定义，比如说，start是一个查询，而patch是一个推送，它就是可运行的了。最后，我们在final上添加一个订阅，整个过程就完美地映射到了界面上。</p>
]]></content>
      <categories>
        <category>临时</category>
      </categories>
      <tags>
        <tag>临时</tag>
      </tags>
  </entry>
  <entry>
    <title>taskmgr 项目笔记</title>
    <url>/2020/07/09/fe-frameworkds/taskmgr%20%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="taskmgr-项目笔记"><a href="#taskmgr-项目笔记" class="headerlink" title="taskmgr 项目笔记"></a>taskmgr 项目笔记</h1><p>用 angular 做一个任务管理工具，笔记留念</p>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p><code>ng new taskmgr --skip-install --style=scss</code></p>
<p><code>ng new taskmgr -si --style=scss</code></p>
<p><code>ng g m core</code></p>
<p><code>ng g m shared</code></p>
<h2 id="核心模块只加载一次"><a href="#核心模块只加载一次" class="headerlink" title="核心模块只加载一次"></a>核心模块只加载一次</h2><p>危险的写法</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModue<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/common'</span><span class="token punctuation">;</span>

@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>CommonModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CoreModule</span> <span class="token punctuation">{</span>
  <span class="token keyword">constructor</span> <span class="token punctuation">(</span>parent<span class="token punctuation">:</span> CoreModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'模块已经存在，不能再次加载！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>更好的写法，引入  SkipSelf 和Optional</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModue<span class="token punctuation">,</span> SkipSelf<span class="token punctuation">,</span> Optional<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/common'</span><span class="token punctuation">;</span>

@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>CommonModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CoreModule</span> <span class="token punctuation">{</span>
  <span class="token keyword">constructor</span> <span class="token punctuation">(</span>@<span class="token function">Optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token function">SkipSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> parent<span class="token punctuation">:</span> CoreModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'模块已经存在，不能再次加载！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="共享模块"><a href="#共享模块" class="headerlink" title="共享模块"></a>共享模块</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModue<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/common'</span><span class="token punctuation">;</span>

@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>CommonModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  exports<span class="token punctuation">:</span> <span class="token punctuation">[</span>CommonModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SharedModule</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><p><code>ng g c core/header --spec=false</code></p>
<p><code>g g c core/footer --spec=false</code></p>
<p><code>ng g c core/sidebar --spec=false</code></p>
<p><code>div.site&gt;header+footer+main</code></p>
<p>** 注意，要将 header、footer、sidebar组件从core 模块中导出，否则出了core 模块，他们就变成不可用的了。</p>
<h2 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h2><pre class=" language-css"><code class="language-css"><span class="token selector">html, body, app-root, <span class="token class">.site</span> </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.site</span> </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">main </span><span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">header </span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">footer </span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>flex 是对容器内元素的一种排列方式，<strong>只对它的直接的字元素有影响</strong>，</p>
<pre><code>main&gt; (div.small*3+div.big*3)</code></pre><p>书接前文</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">main </span><span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 换行 */</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 主轴方向,对齐方式，flex-start, center, flex-end, space-around, space-between*/</span>
  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 次轴方向,对齐方式，flex-start, center, flex-end, space-around, space-between*/</span>
  <span class="token property">aligin-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* */</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.small</span> </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  background<span class="token punctuation">;</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.big</span> </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>继续学习其他的属性</strong></p>
<h2 id="angular-material"><a href="#angular-material" class="headerlink" title="angular material"></a>angular material</h2><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><p><code>cnpm install --save @angular/material@2.0.0-beta</code></p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> MdSidenvModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/material'</span>
@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
  MdSidenavModule
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>正确引入 md-sidebar</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-sidenav-container</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-sidenav</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-sidebar</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-sidebar</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-sidenav</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-header</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>
            &lt;button (click)="sidenav.open()"
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-footer</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-sidenav-container</span><span class="token punctuation">></span></span></code></pre>
<p>引入 angular material 的主题</p>
<p>侧边栏有over， side， push 三个mode</p>
<h3 id="toolbar"><a href="#toolbar" class="headerlink" title="toolbar"></a>toolbar</h3><p>在core module 中导入</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>MdToolbarModule <span class="token punctuation">}</span> fomr <span class="token string">'@angular/material'</span></code></pre>
<p>底部</p>
<pre class=" language-Html"><code class="language-Html"><md-toobar color="primary">
    <!-- 顶部 -->
    <button (click)="openSidebar()">打开菜单</button>
    <span>企业协作平台</span>
      <!-- 底部 -->
      <span class="fill-remaining-space"></span>
      <span>@copy; 我的作品</span>
      <span class="fill-remaining-space"></span>
      <md-toolbar-row>
      <span class="fill-remaining-space"></span>
      <span>这里是第二行</span>
      <span class="fill-remaining-space"></span>
      </md-toolbar-row>
</md-toolbar></code></pre>
<p>添加一个占位的元素，scss 如下，注意哦，md-toolbar 这些都是flex 容器</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.fill-remaining-space</span> </span><span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token number">1</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>实现一下 openSidebar，在header组件中引入 Output 和 EventEmitter</p>
<pre class=" language-typescript"><code class="language-typescript">@<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> toggle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeaderComponent</span> <span class="token punctuation">{</span>
    <span class="token function">openSidebar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>toggle<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>在 app-component 里面监听 这个 toggle 事件， <code>(toggle)=&quot;sidenav.toggle()&quot;</code></p>
<h3 id="MdIconModule"><a href="#MdIconModule" class="headerlink" title="MdIconModule"></a>MdIconModule</h3><p>导入 MdIconModule 到 core 模块</p>
<p>引入图标字体，谷歌的图标字体，<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;//lib.baomitu.com/material-design-icons/3.0.1/iconfont/material-icons.min.css&gt;&quot;</code>，可以用360的镜像</p>
<p><code>&lt;md-icon&gt;menu&lt;/md-icon&gt;</code></p>
<p>导入自己的图标（某一个组件需要某个图标，不太好的实现）</p>
<ul>
<li>首先去 iconfont 下载一个图标的 svg     ，例如 test.svg</li>
<li>然后webstorm 命令行中运行 <code>mv ~/Downloads/test.svg ./src/assets</code></li>
<li>在 header 组件中添加 <code>import { MdIconRegistry } from &#39;@angular/material&#39;</code></li>
<li>在 header 组件中添加 <code>import { DomSanitizer } from &#39;@angular/platform-browser&#39;</code></li>
<li>在 header 的 constructor 中注入她们 <code>iconRegistryr: MdIconRegistry, sanitizer: DomSanitizer</code></li>
<li>构造函数里边写 <code>iconRegistry.addSvgIcon(&#39;test&#39;, sanitizer.bypassSecurityTrustResourceUrl(&#39;assets/test.svg&#39;))</code></li>
<li>用法 <code>&lt;md-icon svgIcon=&quot;gifts&quot;&gt;&lt;/md-icon&gt;</code></li>
<li>报错的话在 core 中倒入 HttpModule</li>
</ul>
<p>推荐的做法，在 app 文件夹 下面创建一个 utils 的文件夹，添加文件 svg.util.ts，内容如下</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> MdIconRegistry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/material'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DomSanitizer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> loadSvgResources <span class="token operator">=</span> <span class="token punctuation">(</span>ir<span class="token punctuation">:</span> MdIconRegistry<span class="token punctuation">,</span> ds<span class="token punctuation">:</span> DomSanitizer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  ir<span class="token punctuation">.</span><span class="token function">addSvgIcon</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span>ds<span class="token punctuation">.</span><span class="token function">bypassSecurityTrustResourceUrl</span><span class="token punctuation">(</span>'assets<span class="token operator">/</span>test<span class="token punctuation">.</span>svg<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>在 coreModule 中导入这个玩意</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// ...</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MdIconRegistry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/material'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DomSanitizer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> loadSvgResources <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../utils/svg.util'</span>
<span class="token comment" spellcheck="true">// ...</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CoreModule</span> <span class="token punctuation">{</span>
  <span class="token keyword">constructor</span> <span class="token punctuation">(</span>
      ir<span class="token punctuation">:</span> MdIconRegistry<span class="token punctuation">,</span>
      ds<span class="token punctuation">:</span>DomSanitizer<span class="token punctuation">,</span>
      @<span class="token function">Optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token function">SkipSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> parent<span class="token punctuation">:</span> CoreModule
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'模块已经存在，不能再次加载！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">loadSvgResources</span><span class="token punctuation">(</span>ir<span class="token punctuation">,</span> ds<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="input-组件"><a href="#input-组件" class="headerlink" title="input 组件"></a>input 组件</h3><p><md-input> 在 <md-input-container> 内部使用</p>
<p><md-error> 只有在验证不通过的时候才会出现</p>
<p><md-hint> 当 error 显示的时候，hint 会被隐藏</p>
<p>在app 下面新建一个 domain 的文件夹，新建一个user.model.ts</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  id<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>
  email<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>
  password<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>
  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>
  avatar<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><code>ng g m login</code></p>
<p><code>ng g c login/login --spec=false</code></p>
<p>把material 的模块 都导入到 sharedmodules 里边，引入input 和 card module</p>
<p>sharedmodule 的作用就是到如何导出</p>
<p>然后将sharedModule 引入到CoreModule 中</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-header</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-title</span><span class="token punctuation">></span></span>登陆：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-header</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-content</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-input-container</span> <span class="token attr-name">hint-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>必填项<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">mdPrefix</span><span class="token punctuation">></span></span>wang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">mdInput</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>您的email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">mdSuffix</span><span class="token punctuation">></span></span>@gmail.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-hint</span><span class="token punctuation">></span></span>必填项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-hint</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-error</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-errod</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-input-container</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-content</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-action</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>还没有账户？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>忘记密码？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>找回<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-action</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card</span><span class="token punctuation">></span></span></code></pre>
<p>在login 文件夹下面建一个字路由。login-routing.module.ts</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RouterModule<span class="token punctuation">,</span> Routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LoginComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./login/login.component'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> routes<span class="token punctuation">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> LoginComponent<span class="token punctuation">}</span>
<span class="token punctuation">]</span>

@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forChild</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  exports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoginRoutingModule</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<p>在app 的根目录下 建立 app-routing.module.ts</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RouterModule<span class="token punctuation">,</span> Routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./app.component"</span><span class="token punctuation">;</span> 

<span class="token keyword">const</span> routes<span class="token punctuation">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> redirectTo<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span> pathMatch<span class="token punctuation">:</span><span class="token string">'full'</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>

@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  exports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppRoutingModule</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<p>在跟模块，引入路由模块，在login module 中引入shared module 和loginRoutingModule</p>
<p>在根组件中的main 里边写上一个 router-outlet</p>
<p><code>npm install —save @angular/animations</code></p>
<p>在core module 下面</p>
<p><code>import { BrowserAnimationsModule } from &#39;@angular/platform-browser/animations&#39;</code></p>
<h3 id="button-和-card-组件"><a href="#button-和-card-组件" class="headerlink" title="button 和 card 组件"></a>button 和 card 组件</h3><p>导入 MdButtonModule 到 core 模块，之后挪到 shared 里边去了</p>
<p>md-icon-button 只有图标的按钮</p>
<pre class=" language-Html"><code class="language-Html"><form>
  <md-card>
    <md-card-header>
      <md-card-title>登陆</md-card-title>
    </md-card-header>
    <md-card-content>
      <md-input-container class="full-width">        
        <input mdInput type="text" placeholder="您的email">
      </md-input-container>
      <md-input-container class="full-width">        
          <input mdInput type="password" placeholder="您的密码">
        </md-input-container>
      <button md-raised-button type="button" color="primary">登陆</button>
    </md-card-content>
    <md-card-actions>
      <p class="text-right">还没有账号？<a href="">注册</a></p>
      <p class="text-right">忘记密码？<a href="">找回</a></p>      
    </md-card-actions>
  </md-card>

  <md-card>
      <md-card-header>
        <md-card-title>
          每日佳句
        </md-card-title>
        <md-card-subtitle>
          满足感在于不断的努力，而不是现在有成就。全心努力定会胜利满满。
        </md-card-subtitle>
      </md-card-header>
      <img md-card-image src="/assets/geek.png" alt="">
      <md-card-content>
        满足感在于不断的努力，而不是现在有成就。全心努力定会胜利满满。
      </md-card-content>
    </md-card>
</form></code></pre>
<pre class=" language-Css"><code class="language-Css">form {
  display: flex;
  flex-direction: column;
  jsstify-content: center;
  align-items: center;
  width:100%:
  height:100%;
}
md-card {
  margin: 5px;
  width: 20em;
  flex: 0 0 20em;
}

.text-right {
  margin: 10px;
  text-align: right;
}</code></pre>
<p>在 style.css 中添加一个类</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.full-width</span> </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="MdList-组件"><a href="#MdList-组件" class="headerlink" title="MdList 组件"></a>MdList 组件</h3><p>用于列表</p>
<p><md-list> 和 <md-nav-list></p>
<p>多行列表、带图表列表、带头像列表、密集列表、多段列表</p>
<p>更改项目： </p>
<p>在 SharedModule 里面添加 MdListModule</p>
<p>把 sidenav 的 mode 改成 over，在 app component 里边修改宽度300px;</p>
<p>修改 sidebar 组件;</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-nav-list</span> <span class="token attr-name">dense</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">mdSubheader</span><span class="token punctuation">></span></span>项目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-list-item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-icon</span> <span class="token attr-name">md-list-icon</span> <span class="token attr-name">svgIcon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>projects<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-icon</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">md-line</span><span class="token punctuation">></span></span>项目首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">md-line</span> <span class="token attr-name">mdSubheader</span><span class="token punctuation">></span></span>查看您的所有项目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-list-item</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">md-subheader</span><span class="token punctuation">></span></span>日历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-list-item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>日历首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-list-item</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-list-item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-icon</span> <span class="token attr-name">md-list-icon</span> <span class="token attr-name">svgIcon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-icon</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">md-line</span><span class="token punctuation">></span></span>月视图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">md-line</span> <span class="token attr-name">md-subheader</span><span class="token punctuation">></span></span>按月查看您的任务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-list-item</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-list-item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-icon</span> <span class="token attr-name">md-list-icon</span> <span class="token attr-name">svgIcon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>week<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-icon</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">md-line</span><span class="token punctuation">></span></span>周视图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">md-line</span> <span class="token attr-name">md-subheader</span><span class="token punctuation">></span></span>按周查看您的任务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-list-item</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-list-item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-icon</span> <span class="token attr-name">md-list-icon</span> <span class="token attr-name">svgIcon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>day<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-icon</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">md-line</span><span class="token punctuation">></span></span>日视图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">md-line</span> <span class="token attr-name">md-subheader</span><span class="token punctuation">></span></span>按天查看您的任务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-list-item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-list</span><span class="token punctuation">></span></span></code></pre>
<p>修改 svg.util.ts</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token operator">...</span>
<span class="token keyword">const</span> imgDir <span class="token operator">=</span> <span class="token string">'assets/img'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sidebarDir <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>imgDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/sidebar`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> dayDir <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>imgDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/days`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> days <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>

days<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>d <span class="token operator">=</span><span class="token operator">></span> ir<span class="token punctuation">.</span><span class="token function">addSvgIcon</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`day</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> ds<span class="token punctuation">.</span><span class="token function">bypassSecurityTrustResourcdUrl</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dayDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/day</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.svg`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">...</span></code></pre>
<p>在sidebar 的css 中</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">md-icon </span><span class="token punctuation">{</span>
  <span class="token property">align-self</span><span class="token punctuation">:</span> flex-start
<span class="token punctuation">}</span></code></pre>
<p><code>cnpm install --save date-fns</code></p>
<p><code>cnpm i --save-dev @types/date-fns</code></p>
<p>修改 sidebar 的 ts</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>getDate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'date-fns'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Sidebar</span> Component <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>
  today <span class="token operator">=</span> <span class="token string">'day'</span><span class="token punctuation">;</span>

  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>today <span class="token operator">=</span> <span class="token template-string"><span class="token string">`day</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>前台的svgIcon 修改 <code>[svgIcon]=&quot;today&quot;</code></p>
<h3 id="angular-material-主题"><a href="#angular-material-主题" class="headerlink" title="angular material 主题"></a>angular material 主题</h3><p>主题： 调色板 + 明暗 + 叠加</p>
<p>自定义一个主题，修改 style.scss 文件</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token string">'theme.scss'</span><span class="token punctuation">;</span></code></pre>
<p>新建一个 theme.scss 主题：</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token string">'~@angular/material/theming'</span><span class="token punctuation">;</span>
@include mat<span class="token operator">-</span><span class="token function">core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

$my<span class="token operator">-</span>app<span class="token operator">-</span>primary<span class="token punctuation">:</span> mat<span class="token operator">-</span><span class="token function">palette</span><span class="token punctuation">(</span>$mat<span class="token operator">-</span>indigo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/* 第一个参数是默认的颜色的深浅，在亮的主题下，颜色深浅，和暗的主题下颜色的深浅*/</span>
$my<span class="token operator">-</span>app<span class="token operator">-</span>accent<span class="token punctuation">:</span>mat<span class="token operator">-</span><span class="token function">palette</span><span class="token punctuation">(</span>$mat<span class="token operator">-</span>pink<span class="token punctuation">,</span>A200，A400<span class="token punctuation">)</span><span class="token punctuation">;</span>
$my<span class="token operator">-</span>app<span class="token operator">-</span>warn<span class="token punctuation">:</span> mat<span class="token operator">-</span><span class="token function">palette</span><span class="token punctuation">(</span>$mat<span class="token operator">-</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>

$my<span class="token operator">-</span>app<span class="token operator">-</span>theme<span class="token punctuation">:</span> mat<span class="token operator">-</span>light<span class="token operator">-</span><span class="token function">theme</span><span class="token punctuation">(</span>$my<span class="token operator">-</span>app<span class="token operator">-</span>primary<span class="token punctuation">,</span> $my<span class="token operator">-</span>app<span class="token operator">-</span>accent<span class="token punctuation">,</span> $my<span class="token operator">-</span>app<span class="token operator">-</span>warn<span class="token punctuation">)</span><span class="token punctuation">;</span>
@include angular<span class="token operator">-</span>material<span class="token operator">-</span><span class="token function">theme</span><span class="token punctuation">(</span>$my<span class="token operator">-</span>app<span class="token operator">-</span>theme<span class="token punctuation">)</span><span class="token punctuation">;</span>


$my<span class="token operator">-</span>dark<span class="token operator">-</span>primary<span class="token punctuation">:</span> mat<span class="token operator">-</span><span class="token function">palette</span><span class="token punctuation">(</span>$mat<span class="token operator">-</span>blue<span class="token operator">-</span>grey<span class="token punctuation">)</span><span class="token punctuation">;</span>
$my<span class="token operator">-</span>dark<span class="token operator">-</span>accent<span class="token punctuation">:</span>mat<span class="token operator">-</span><span class="token function">palette</span><span class="token punctuation">(</span>$mat<span class="token operator">-</span>amber<span class="token punctuation">,</span>A200，A400<span class="token punctuation">)</span><span class="token punctuation">;</span>
$my<span class="token operator">-</span>dark<span class="token operator">-</span>warn<span class="token punctuation">:</span> mat<span class="token operator">-</span><span class="token function">palette</span><span class="token punctuation">(</span>$mat<span class="token operator">-</span>deep<span class="token operator">-</span>orange<span class="token punctuation">)</span><span class="token punctuation">;</span>

$my<span class="token operator">-</span>dark<span class="token operator">-</span>theme<span class="token punctuation">:</span> mat<span class="token operator">-</span>light<span class="token operator">-</span><span class="token function">theme</span><span class="token punctuation">(</span>$my<span class="token operator">-</span>dark<span class="token operator">-</span>primary<span class="token punctuation">,</span> $my<span class="token operator">-</span>dark<span class="token operator">-</span>accent<span class="token punctuation">,</span> $my<span class="token operator">-</span>dark<span class="token operator">-</span>warn<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span>myapp<span class="token operator">-</span>dark<span class="token operator">-</span>theme <span class="token punctuation">{</span>
  @include angular<span class="token operator">-</span>material<span class="token operator">-</span><span class="token function">theme</span><span class="token punctuation">(</span>$my<span class="token operator">-</span>dark<span class="token operator">-</span>theme<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>在header 中加入开关</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-toolbar</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">md-button</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accent<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggleSidenav()<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-icon</span><span class="token punctuation">></span></span>menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-icon</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>任务管理系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill-remaining-space<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-slide-toggle</span> <span class="token attr-name">(change)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onChange($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>黑夜模式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-slide-toggle</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-toolbar</span><span class="token punctuation">></span></span></code></pre>
<p>在 SharedModule 中引入 MdSlideToggle</p>
<pre class=" language-typescript"><code class="language-typescript">@<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> togleDarkTheme <span class="token operator">=</span> newEventEmitter<span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">onChange</span><span class="token punctuation">(</span>checked<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>toggleDarkTheme<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>在 appComponent 中监听这个事件</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-sidenav-container</span> <span class="token attr-name">[class.lmyapp-dark-theme]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>darkTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-header</span> <span class="token attr-name">(toggle)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidenav.toggle<span class="token punctuation">"</span></span> <span class="token attr-name">(toggleDarkTheme)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchTheme($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-header</span><span class="token punctuation">></span></span>

...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-sidenav-container</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> AppComponent <span class="token punctuation">{</span>
  darkTheme<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
  switchTheme <span class="token punctuation">(</span>dark<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>darkTheme <span class="token operator">=</span> dark<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector">md-sidenav-container </span><span class="token punctuation">{</span>
  <span class="token selector">&amp;<span class="token class">.myapp-dark-theme</span> </span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="Grid-List"><a href="#Grid-List" class="headerlink" title="Grid List"></a>Grid List</h3><p>用于相似的数据展示，尤其是图片，类似相册等</p>
<p>行为很像表格，有colspan 和 rowspan 属性</p>
<p><code>ng g c login/register --spec=false</code></p>
<p>修改 register.html ，在sharedModule里面导入导出</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-header</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-title</span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-header</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-content</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-input-container</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">mdInput</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>您的email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-input-container</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-input-container</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">mdInput</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>您的姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-input-container</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-input-container</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">mdInput</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>您的密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-input-container</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-input-container</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">mdInput</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重复密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-input-container</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-grid-list</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">rowHeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1:1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-grid-tile</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let item of items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-icon</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">[svgIcon]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-icon</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-grid-tile</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-grid-list</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">md-raised-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-content</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-actions</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>已经有账号？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>忘记密码？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>找回<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-actions</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token class">.avatar</span> </span><span class="token punctuation">{</span>
      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span>
      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
      <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p><code>[routerLink]=&quot;/register&quot;</code></p>
<p>修改 svg.util.ts</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> avatarDir <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>imgDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/avatar`</span></span>
<span class="token operator">...</span>
ir<span class="token punctuation">.</span><span class="token function">addSvgIconSetInNamespace</span><span class="token punctuation">(</span><span class="token string">'avatars'</span><span class="token punctuation">,</span> ds<span class="token punctuation">.</span><span class="token function">bypassSecurityTrustResourceUrl</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>avatarDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/avatars.svg`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>修改 register.component 里面修改</p>
<pre class=" language-typescript"><code class="language-typescript">items<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> d <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token template-string"><span class="token string">`avatars:svg-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="Dialog-对话框"><a href="#Dialog-对话框" class="headerlink" title="Dialog 对话框"></a>Dialog 对话框</h3><p>对话框需要在模块的entryComponents 中声明， menu 也需要这样（因为她们事先要隐藏）</p>
<p>传递数据 <code>const dialogRef = dialog.open(YourDialog, {data: &#39;your data&#39;})</code></p>
<p>接受数据 <code>constructor(@Inject(MD_DIALOG_DATA) public data: any)</code></p>
<p><code>ng g m project</code></p>
<p><code>ng g c project/project-list --spec=false</code> </p>
<p><code>ng g c project/project-item --spec=false</code></p>
<p><code>ng g c project/new-project --spec=false</code></p>
<p><code>ng g c project/invite --spec=false</code></p>
<p>修改 project module</p>
<pre class=" language-typescript"><code class="language-typescript">@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>
    entryComponent<span class="token punctuation">:</span><span class="token punctuation">[</span>
      NewProjectComponent<span class="token punctuation">,</span>
      InviteComponent
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>修改 project list component 的 html</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-project-item</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let project of projects<span class="token punctuation">"</span></span> <span class="token attr-name">[item]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>project<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-project-item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">md-fab</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>openNewProjectDialog()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-icon</span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-icon</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<p>改 project item component 的 html</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-header</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-title</span><span class="token punctuation">></span></span>
            {{item.name}}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-header</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">md-card-images</span> <span class="token attr-name">[src]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.coverImg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>项目封面<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-content</span><span class="token punctuation">></span></span>
        {{item.desc}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-content</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-card-actions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">md-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-icon</span><span class="token punctuation">></span></span>note<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-icon</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">md-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-icon</span><span class="token punctuation">></span></span>group_add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-icon</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>邀请<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">md-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-icon</span><span class="token punctuation">></span></span>delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-icon</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card-actions</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-card</span><span class="token punctuation">></span></span></code></pre>
<p>新建一个project/project-routing.module.ts</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RouterModule<span class="token punctuation">,</span> Routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ProjectListComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./project-list/project-list.component'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> routes<span class="token punctuation">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  path<span class="token punctuation">:</span> <span class="token string">'project'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> ProjectListComponent
<span class="token punctuation">]</span>

@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forChild</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  exports<span class="token punctuation">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ProjectRoutingModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<p>修改project module ts 文件，中导入刚才建立的路由，用shared Module 代替common Module，在AppModule中倒入 project module</p>
<p>在路由中，添加一个路由项 <code>{path: &#39;project&#39;, redirectTo: &#39;/project&#39;, pathMatch: &#39;full&#39;}</code></p>
<p>给 project list 中的 project list item 组件 绑定一个item， <code>[item] = project</code><br>在子组件 project list item 中引入一个 input 属性 item <code>@Input () item;</code></p>
<p>在project list 里面 添加一个 projects 数组</p>
<pre class=" language-typescript"><code class="language-typescript">projects <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"企业协作平台"</span><span class="token punctuation">,</span>
    <span class="token string">"desc"</span><span class="token punctuation">:</span> <span class="token string">"这是一个企业内部项目"</span><span class="token punctuation">,</span>
    <span class="token string">"coverImg"</span><span class="token punctuation">:</span> <span class="token string">"assets/img/cover/0.jpg"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"自动化测试项目"</span><span class="token punctuation">,</span>
    <span class="token string">"desc"</span><span class="token punctuation">:</span> <span class="token string">"这是一个企业内部项目"</span><span class="token punctuation">,</span>
    <span class="token string">"coverImg"</span><span class="token punctuation">:</span> <span class="token string">"assets/img/cover/1.jpg"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span></code></pre>
<p>给 app-project-item 添加一个类card ， 修改project list component 的 scss</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.card</span> </span><span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">360</span>px<span class="token punctuation">;</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">360</span>px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token pseudo-class">:host</span> </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.fab-button</span> </span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">32</span>px<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">96</span>px<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">998</span>
<span class="token punctuation">}</span></code></pre>
<p>完成 new-project 组件的模版</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">md-dialog-title</span><span class="token punctuation">></span></span>新建项目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">md-dialog-content</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-input-container</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">mdInput</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>项目名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-input-container</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-input-container</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">mdInput</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>项目描述<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-input-container</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">md-raised-button</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onClick()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            保存
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">md-dialog-closes</span> <span class="token attr-name">md-button</span><span class="token punctuation">></span></span>关闭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>
<p>修改 project list 的 ts</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>MdDialog<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/material'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>NewProjectComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../new-project/new'</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token operator">...</span> <span class="token keyword">private</span> dialog<span class="token punctuation">:</span> MdDialog <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">...</span>

<span class="token function">openNewProjectDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dialogRef <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dialog<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>NewProjectComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  width<span class="token punctuation">:</span> <span class="token string">'100px'</span><span class="token punctuation">,</span> 
  height<span class="token punctuation">:</span> <span class="token string">'100px'</span><span class="token punctuation">,</span>
  position<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    top<span class="token punctuation">:</span> <span class="token number">0</span>
   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
   <span class="token punctuation">{</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
       <span class="token string">'dark'</span><span class="token punctuation">:</span><span class="token keyword">true</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dialogRef<span class="token punctuation">.</span><span class="token function">afterClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> 
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>修改new project</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>MD_DIALOG_DATA<span class="token punctuation">,</span> MdDialogRef<span class="token punctuation">,</span> OverlayContainer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/material'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Component<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> Inject<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">NewProjectComponent</span> <span class="token punctuation">{</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>
      @<span class="token function">Inject</span><span class="token punctuation">(</span>MD_DIALOG_DATA<span class="token punctuation">)</span><span class="token keyword">private</span> data<span class="token punctuation">,</span>
      <span class="token keyword">private</span> dialogRef<span class="token punctuation">:</span> MdDialogRef<span class="token operator">&lt;</span>NewProjectComponent<span class="token operator">></span><span class="token punctuation">,</span>
      <span class="token keyword">private</span> oc<span class="token punctuation">:</span>OverlayContainer
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>

  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>oc<span class="token punctuation">.</span>themeClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>dark<span class="token operator">?</span>'myapp<span class="token operator">-</span>dark<span class="token operator">-</span>theme<span class="token punctuation">:</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

  <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dialogRef<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>'I received your message"<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="autoComplete"><a href="#autoComplete" class="headerlink" title="autoComplete"></a>autoComplete</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-input-container</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">mdInput</span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>更改执行者<span class="token punctuation">"</span></span>
        <span class="token attr-name">formControlName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ownerSearch<span class="token punctuation">"</span></span>
        <span class="token attr-name">[mdAutocomplete]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assignee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-input-container</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-autocomplete</span> <span class="token attr-name">#assignee</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mdAutocomplete<span class="token punctuation">"</span></span>
    <span class="token attr-name">[displayWith]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>displayUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-option</span> 
        <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let item of ownerResults<span class="token punctuation">"</span></span>
        <span class="token attr-name">[value]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        {{item.name}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-option</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-autocomplete</span><span class="token punctuation">></span></span></code></pre>
<p>修改 invite component 的 html</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">md-dialog-title</span><span class="token punctuation">></span></span>邀请组员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">md-dialog-content</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-input-container</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">mdInput</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>组员姓名<span class="token punctuation">"</span></span> <span class="token attr-name">[mdAutocomplete]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoMembers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-input-container</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">md-dialog-actions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>buton<span class="token punctuation">"</span></span> <span class="token attr-name">md-raised-button</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onClick()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>保存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>buton<span class="token punctuation">"</span></span> <span class="token attr-name">md-dialog-close</span> <span class="token attr-name">md-button</span><span class="token punctuation">></span></span>关闭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>

&lt;md-auto-complete #autoMembers="mdAutocomplete [displayWidth]="displayUser">
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>md-option</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let item of items<span class="token punctuation">"</span></span> <span class="token attr-name">[value]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        {{item.name}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-option</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>md-auto-complete</span><span class="token punctuation">></span></span></code></pre>
<p>修改 invite component 的 ts</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">InviteComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>
  items <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'wangwu'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'zhaoliu'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'sunqi'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'huba'</span><span class="token punctuation">}</span>
  <span class="token punctuation">]</span>

  <span class="token function">displayUser</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> user<span class="token operator">?</span> user<span class="token punctuation">.</span>name <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token keyword">string</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>project item 当中有邀请这个按钮，自然的想法，在邀请按钮上，直接写click事件，调取dialog，不算太好，子组件最好只负责显示，有一些输入输出，不涉及逻辑，后期改起来很麻烦。</p>
<p>好的做法，在 project item 组件中，不做逻辑处理，把事件发射给父组件。</p>
<p>具体，在 project item 的 ts 中，引入Input 、 Output 和 EventEmitter，点击邀请后，<code>@Output() onInvite = new EventEmitter&lt;void&gt;()</code> 和 <code>onInviteClick() { this.onInvite.emit();}</code>， 让project list 组件处理这个事件，写个 launchInviteDialog</p>
<p>在 shared module 中导入导出 mdautocomplete 组件</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>慕课网 Node.js 从零开发 web server博客项笔记</title>
    <url>/2020/06/01/node/%E6%85%95%E8%AF%BE%E7%BD%91%20Node.js%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%20web%20server%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="慕课网-Node-js-从零开发-web-server博客项笔记"><a href="#慕课网-Node-js-从零开发-web-server博客项笔记" class="headerlink" title="慕课网 Node.js 从零开发 web server博客项笔记"></a>慕课网 Node.js 从零开发 web server博客项笔记</h1><h2 id="第-1-章-课程介绍"><a href="#第-1-章-课程介绍" class="headerlink" title="第 1 章 课程介绍"></a>第 1 章 课程介绍</h2><h2 id="第-2-章-Node-js-介绍"><a href="#第-2-章-Node-js-介绍" class="headerlink" title="第 2 章 Node.js 介绍"></a>第 2 章 Node.js 介绍</h2><h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><h3 id="Node-js-和-JS-的区别"><a href="#Node-js-和-JS-的区别" class="headerlink" title="Node.js 和 JS 的区别"></a>Node.js 和 JS 的区别</h3><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h4><ul>
<li>定义了语法，写 javascript 和 Node.js 都必须遵守</li>
<li>变量定义，循环，判断，函数</li>
<li>原型和原型链，作用域和闭包，异步</li>
<li>不能操作 DOM，不能监听 click 事件，不能发送 ajax 请求</li>
<li>不能处理 http 请求，不能操作文件</li>
<li>只有 ECMAScript，几乎做不了任何实际的项目</li>
</ul>
<h4 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h4><ul>
<li>使用了 ECMAScript 语法规范，外加 Web API，缺一不可</li>
<li>DOM 操作，BOM 操作，事件绑定，Ajax 等</li>
<li>两者结合，才能完成浏览器端的任何操作</li>
</ul>
<h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><ul>
<li>使用了 ECMAScript 语法规范，外加 Node.js API，缺一不可</li>
<li>处理 http， 处理文件等，具体参考 <a href="http://nodejs.cn/api" target="_blank" rel="noopener">http://nodejs.cn/api</a></li>
<li>两者结合，才能完成 server 端的任何操作</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>ECMAScript 是语法规范</li>
<li>Node.js = ECMAScript + Node.js API</li>
<li>前端 JS = ECMAScript + Web API</li>
</ul>
<h3 id="commonjs-模块化"><a href="#commonjs-模块化" class="headerlink" title="commonjs 模块化"></a>commonjs 模块化</h3><p>a.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>expors <span class="token operator">=</span> add</code></pre>
<p>b.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span>
cosnt sum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre>
<p>c.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> b
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>expors <span class="token operator">=</span> <span class="token punctuation">{</span>
    add<span class="token punctuation">,</span>
    mul
<span class="token punctuation">}</span></code></pre>
<p>d.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> mul <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./c.js'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> add <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> result<span class="token punctuation">)</span></code></pre>
<h4 id="引用第三方标准"><a href="#引用第三方标准" class="headerlink" title="引用第三方标准"></a>引用第三方标准</h4><p><code>npm init -y</code></p>
<p><code>npm install loadash --save</code></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>'lodash<span class="token punctuation">)</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr...'</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span></code></pre>
<h3 id="Node-js-debugger"><a href="#Node-js-debugger" class="headerlink" title="Node.js debugger"></a>Node.js debugger</h3><p>方式：vs code debugger</p>
<p><code>mkdir debugger-test</code></p>
<p><code>cd debugger-test</code></p>
<p><code>npm init -y</code></p>
<p><code>touch index.js</code></p>
<p>vs code debug 的时候，会找到 package.json 里边 main 指向的主文件开始调试</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">crateServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">writehead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;h1>Hello world!&lt;/h1>'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'listening on 3000 port'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="server-端和前端的区别"><a href="#server-端和前端的区别" class="headerlink" title="server 端和前端的区别"></a>server 端和前端的区别</h3><ul>
<li>服务稳定性</li>
<li>考虑内存和 CPU （优化和拓展）</li>
<li>日志记录</li>
<li>安全</li>
<li>集群和服务拆分</li>
</ul>
<h4 id="服务稳定性"><a href="#服务稳定性" class="headerlink" title="服务稳定性"></a>服务稳定性</h4><ul>
<li>server 端可能会遭受各种恶意攻击和误操作</li>
<li>单个客户端可以意外挂掉，但是服务端不能</li>
<li>PM2 进程守候（程序挂掉，自动重启）</li>
</ul>
<h4 id="考虑-CPU-和内存（优化、拓展）"><a href="#考虑-CPU-和内存（优化、拓展）" class="headerlink" title="考虑 CPU 和内存（优化、拓展）"></a>考虑 CPU 和内存（优化、拓展）</h4><ul>
<li>客户端独占一个浏览器，内存和 CPU 都不是问题</li>
<li>server 端要承载很多请求，CPU 和 内存都是稀缺资源</li>
<li>课程后面会讲解使用 stream 写日志，使用 redis 存 session</li>
</ul>
<h4 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h4><ul>
<li>前端也会参与写日志，但知识日志的发起方，不关心后续</li>
<li>server 端要记录日志、存储日志、分析日志，前端不关心</li>
<li>可以使用多种日志记录方式</li>
</ul>
<h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><ul>
<li>server 端要随时准备接收各种恶意攻击，前端则少很多</li>
<li>如：越权操作，数据库攻击等</li>
<li>理解登录验证，预防 xss 攻击 和 sql 注入</li>
</ul>
<h4 id="集群和服务拆分"><a href="#集群和服务拆分" class="headerlink" title="集群和服务拆分"></a>集群和服务拆分</h4><ul>
<li>产品发展速度快，流量可能会迅速增加</li>
<li>如何通过拓展机器和服务拆分来承载大流量</li>
</ul>
<h2 id="第-3-章-项目介绍"><a href="#第-3-章-项目介绍" class="headerlink" title="第 3 章 项目介绍"></a>第 3 章 项目介绍</h2><h3 id="项目需求分析"><a href="#项目需求分析" class="headerlink" title="项目需求分析"></a>项目需求分析</h3><h4 id="项目步骤"><a href="#项目步骤" class="headerlink" title="项目步骤"></a>项目步骤</h4><p>定目标，定需求，定UI设计，定技术方案，开发，联调、测试、上线、分析统计结果评估</p>
<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ul>
<li>开发一个博客系统，具有博客的基本功能</li>
</ul>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul>
<li>首页，作者主页，博客详情页</li>
<li>登陆页</li>
<li>管理中心，新建页，编辑页</li>
</ul>
<h3 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h3><ul>
<li>数据如何存储<ul>
<li>博客</li>
<li>用户</li>
</ul>
</li>
<li>如何与前端对接，即接口设计<ul>
<li>/api/blog/list，get，author 和 keyword</li>
<li>/api/blog/detail，get，id</li>
<li>/api/blog/new，post，新增内容</li>
<li>/api/blog/update， post，id，更新内容</li>
<li>/api/blog/del，post，id</li>
<li>/api/user/login，post，用户名和密码</li>
</ul>
</li>
<li>登录<ul>
<li>业界有统一的解决方案，一般不用重新设计</li>
</ul>
</li>
</ul>
<h2 id="第-4-章-开发博客项目之接口"><a href="#第-4-章-开发博客项目之接口" class="headerlink" title="第 4 章 开发博客项目之接口"></a>第 4 章 开发博客项目之接口</h2><h3 id="4-1-http-概述"><a href="#4-1-http-概述" class="headerlink" title="4-1 http-概述"></a>4-1 http-概述</h3><h4 id="本章内容"><a href="#本章内容" class="headerlink" title="本章内容"></a>本章内容</h4><ul>
<li>Node.js 如何处理 http 请求</li>
<li>搭建开发环境</li>
<li>开发接口（暂时不连数据库，暂时不考虑登录）</li>
</ul>
<h4 id="从输入-URL-到现显示页面发生了什么"><a href="#从输入-URL-到现显示页面发生了什么" class="headerlink" title="从输入 URL 到现显示页面发生了什么"></a>从输入 URL 到现显示页面发生了什么</h4><ol>
<li>DNS 解析，建立 TCP 连接，发送 http 请求<ol>
<li>先看缓存</li>
<li>没有缓存再去查找</li>
<li>三次握手<ol>
<li>客户端询问服务器，你是否可用</li>
<li>服务器回复客户端，我可用</li>
<li>客户端告诉服务器，我知道了，我即将访问</li>
</ol>
</li>
</ol>
</li>
<li>server 接收到 http 请求，处理，并返回</li>
<li>客户端接收到返回数据，处理数据（如渲染页面，执行 js） </li>
</ol>
<h3 id="4-2-处理get请求"><a href="#4-2-处理get请求" class="headerlink" title="4-2 处理get请求"></a>4-2 处理get请求</h3><p>解析 query string</p>
<ul>
<li>get 请求，即客户端向 server 端获取数据，如查询博客列表</li>
<li>通过 querystring 来传递数据，如a.html?a=100&amp;b=200</li>
<li>浏览器直接访问地址，发送 get 请求</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url
    req<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span></code></pre>
<h3 id="4-3-处理post请求"><a href="#4-3-处理post请求" class="headerlink" title="4-3 处理post请求"></a>4-3 处理post请求</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不是 post 请求'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>
    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'listening port 8000'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="4-4-处理http请求的综合示例"><a href="#4-4-处理http请求的综合示例" class="headerlink" title="4-4 处理http请求的综合示例"></a>4-4 处理http请求的综合示例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method
     <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url
     <span class="token keyword">const</span> path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
     <span class="token keyword">const</span> query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

     <span class="token comment" spellcheck="true">// 设置返回格式为 JSON，返回的字符串到底是什么格式的，可以是 JSON， text/html 或者二进制字符串</span>
     res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>

  <span class="token comment" spellcheck="true">// 返回的数据</span>
  <span class="token keyword">const</span> resData <span class="token operator">=</span> <span class="token punctuation">{</span>
    method<span class="token punctuation">,</span>
    url<span class="token punctuation">,</span>
    path<span class="token punctuation">,</span>
    query
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// 返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>
        JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>
    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      resData<span class="token punctuation">.</span>postData <span class="token operator">=</span> postData
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>
        JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'listening port 8000'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="4-5-搭建开发环境"><a href="#4-5-搭建开发环境" class="headerlink" title="4-5 搭建开发环境"></a>4-5 搭建开发环境</h3><p>使用 nodemon 监测文件变化，自动重启 node</p>
<p>使用 cross-env 设置环境变量，兼容 mac，linux 和 windows</p>
<h3 id="4-6-初始化路由"><a href="#4-6-初始化路由" class="headerlink" title="4-6 初始化路由"></a>4-6 初始化路由</h3><p>开发接口的第一步</p>
<p>根据之前技术方案的设计，作出路由</p>
<p>目前阶段：返回假数据，将路由和数据处理分离，以符合设计原则</p>
<h3 id="4-7-开发路由（博客列表路由）-1"><a href="#4-7-开发路由（博客列表路由）-1" class="headerlink" title="4-7 开发路由（博客列表路由）_1"></a>4-7 开发路由（博客列表路由）_1</h3><h3 id="4-8-开发路由（博客详情路由）"><a href="#4-8-开发路由（博客详情路由）" class="headerlink" title="4-8 开发路由（博客详情路由）"></a>4-8 开发路由（博客详情路由）</h3><h3 id="4-9-开发路由（处理-POSTData）"><a href="#4-9-开发路由（处理-POSTData）" class="headerlink" title="4-9 开发路由（处理 POSTData）"></a>4-9 开发路由（处理 POSTData）</h3><h3 id="4-10-开发路由（新建和更新博客路由）"><a href="#4-10-开发路由（新建和更新博客路由）" class="headerlink" title="4-10 开发路由（新建和更新博客路由）"></a>4-10 开发路由（新建和更新博客路由）</h3><h3 id="4-11-开发路由（删除博客路由和登录路由）"><a href="#4-11-开发路由（删除博客路由和登录路由）" class="headerlink" title="4-11 开发路由（删除博客路由和登录路由）"></a>4-11 开发路由（删除博客路由和登录路由）</h3><h2 id="第五章-开发博客项目的数据存储"><a href="#第五章-开发博客项目的数据存储" class="headerlink" title="第五章 开发博客项目的数据存储"></a>第五章 开发博客项目的数据存储</h2><h3 id="5-1-MySQL-简介"><a href="#5-1-MySQL-简介" class="headerlink" title="5-1 MySQL 简介"></a>5-1 MySQL 简介</h3><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p>
<p><a href="https://dev.mysql.com/downloads/workbench/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/workbench/</a></p>
<h3 id="5-2-数据库操作（创建和增、删、查、更新）"><a href="#5-2-数据库操作（创建和增、删、查、更新）" class="headerlink" title="5-2 数据库操作（创建和增、删、查、更新）"></a>5-2 数据库操作（创建和增、删、查、更新）</h3><h4 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h4><ul>
<li>创建 myblog 数据库，<code>CREATE SCHEMA &#39;myblog&#39;;</code></li>
<li>执行 <code>show databases;</code>查询</li>
</ul>
<h4 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h4><p><img src="/images/image-20190521131659928.png" alt="image-20190521131659928"></p>
<p><img src="/images/image-20190521131747841.png" alt="image-20190521131747841"></p>
<pre class=" language-SQL"><code class="language-SQL">CREATE TABLE `myblog`.`users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(20) NOT NULL,
  `password` VARCHAR(20) NOT NULL,
  `realname` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`id`));</code></pre>
<pre class=" language-SQL"><code class="language-SQL">CREATE TABLE `myblog`.`blogs` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(50) NOT NULL,
  `content` LONGTEXT NOT NULL,
  `create` BIGINT(20) NOT NULL DEFAULT 0,
  `author` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`id`));
</code></pre>
<h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p><code>use myblog;</code></p>
<p><code>-- show tables;</code></p>
<h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><pre class=" language-SQL"><code class="language-SQL">insert into users (username, `password`, realname) values ('zhangsan', '123', '张三');</code></pre>
<h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p>查所有的列</p>
<p><code>-- select * from users;</code></p>
<p>查看指定的列</p>
<p><code>-- select id, username from users;</code></p>
<p>按照单个条件查询</p>
<p><code>-- select id, username from users where username=&#39;zhangsan&#39;;</code></p>
<p>按照多个条件查询</p>
<p><code>-- select id, username from users where username=&#39;zhangsan&#39; and password=&#39;123&#39;;</code></p>
<p><code>-- select id, username from users where username=&#39;zhangsan&#39; or password=&#39;123&#39;;</code></p>
<p>like 语句，模糊查询</p>
<p><code>-- select id, username from users where username like &#39;%zhang%&#39;;</code></p>
<p>排序</p>
<p><code>-- select id, username from users where username=&#39;zhangsan&#39; or password=&#39;123&#39; order by id desc;</code></p>
<h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p><code>update users set realname=&#39;李四2&#39; where realname&#39;李四&#39;;</code></p>
<p>解决一下问题</p>
<p><code>SET SQL_SAFE_UPDATES = 0</code></p>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p><code>delete from users where username=&#39;lisi&#39;;</code></p>
<p>开发中删除操作，一般是加一个状态的</p>
<pre class=" language-SQL"><code class="language-SQL">ALTER TABLE `myblog`.`users` 
ADD COLUMN `state` INT NOT NULL DEFAULT 1 AFTER `realname`;</code></pre>
<p><code>select * from users where state=&#39;1&#39;;</code></p>
<p><code>update users set state=&#39;0&#39; where username=&#39;lisi&#39;</code> </p>
<p>不等于 <code>state &lt;&gt; &#39;0&#39;</code></p>
<h3 id="5-4-Node-js-操作-MySQL"><a href="#5-4-Node-js-操作-MySQL" class="headerlink" title="5-4 Node.js 操作 MySQL"></a>5-4 Node.js 操作 MySQL</h3><ul>
<li>封装：将其封装为系统可用的工具，配置数据库，线上限制某些操作</li>
<li>使用：让 API 直接操作数据库，不再使用假数据</li>
<li>select 语句返回的都是数组</li>
<li>update, delete, insert返回的如下</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
    fieldCount<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    affectedRows<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    insertId<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    serverStatus<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    warningCount<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    message<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    protocol41<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    changedRows<span class="token punctuation">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="第六章-登录"><a href="#第六章-登录" class="headerlink" title="第六章 登录"></a>第六章 登录</h2><h3 id="6-1-介绍"><a href="#6-1-介绍" class="headerlink" title="6-1 介绍"></a>6-1 介绍</h3><ul>
<li><p>核心：</p>
<ul>
<li>登陆校验：进入管理中心，删除博客，更新博客，新增博客必须登陆之后操作</li>
<li>登录信息的存储：用户名等信息</li>
</ul>
</li>
<li><p>cookie 和 session</p>
</li>
<li><p>session 写入 redis（内存数据库）</p>
</li>
<li><p>开发登陆功能，和前端联调（用到 nginx 反向代理）</p>
</li>
</ul>
<h3 id="6-2-cookie-介绍"><a href="#6-2-cookie-介绍" class="headerlink" title="6-2 cookie 介绍"></a>6-2 cookie 介绍</h3><h4 id="什么是-cookie"><a href="#什么是-cookie" class="headerlink" title="什么是 cookie"></a>什么是 cookie</h4><ul>
<li>存储在浏览器的一段字符串（最大 5kb）</li>
<li>跨域不共享</li>
<li>格式入k1=v1;k2=v2;k3=v3;因此可以存储结构化数据</li>
<li>每次发送 http 请求，会将请求域的 cookie 一起发送给 server</li>
<li>server 端可以修改 cookie 的值并返回给浏览器</li>
<li>浏览器中也可以通过 javascript 修改 cookie（有限制，server 端锁死）</li>
</ul>
<h4 id="javascript-操作-cookie，浏览器中查看-cookie"><a href="#javascript-操作-cookie，浏览器中查看-cookie" class="headerlink" title="javascript 操作 cookie，浏览器中查看 cookie"></a>javascript 操作 cookie，浏览器中查看 cookie</h4><h5 id="javascript-查看-cookie-的三种方式"><a href="#javascript-查看-cookie-的三种方式" class="headerlink" title="javascript 查看 cookie 的三种方式"></a>javascript 查看 cookie 的三种方式</h5><ul>
<li><p>浏览器中的 Network</p>
</li>
<li><p>浏览器中的 Application</p>
</li>
<li><p><code>document.cookie</code></p>
</li>
</ul>
<h5 id="javascript-查看、修改-cookie-（有限制）"><a href="#javascript-查看、修改-cookie-（有限制）" class="headerlink" title="javascript 查看、修改 cookie （有限制）"></a>javascript 查看、修改 cookie （有限制）</h5><p>追加</p>
<pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'k1=100'</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'k2=200'</span><span class="token punctuation">;</span></code></pre>
<h4 id="server-端操作cookie，实现登录验证"><a href="#server-端操作cookie，实现登录验证" class="headerlink" title="server 端操作cookie，实现登录验证"></a>server 端操作cookie，实现登录验证</h4><ul>
<li>查看 cookie</li>
<li>修改 cookie</li>
<li>实现登录验证</li>
</ul>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><ul>
<li><p>用 cookie 实现登录，会暴露 username， 很危险</p>
</li>
<li><p>解决：cookie 中存储 userid，server 端 对应 username</p>
</li>
<li><p>如何实现 session</p>
</li>
</ul>
<h3 id="6-8-从-session-到-redis"><a href="#6-8-从-session-到-redis" class="headerlink" title="6-8 从 session 到 redis"></a>6-8 从 session 到 redis</h3><p>当前设置 session 还是有问题，初级的解决方法是放在 sessionData 这样一个变量里边，放在 nodejs 进程内存中</p>
<p> 进程内存有限，访问量过大，session 就会过大，内存就会暴增</p>
<p>正式线上运行是多线程，进程之间内存无法共享</p>
<p><img src="/images/image-20190603171307235.png" alt="image-20190603171307235"></p>
<p>stack 栈，基础类型变量，数字，布尔类型变量</p>
<p>heap 堆，引用类型，数组、对象、函数存在这儿，session 存在这儿，session 越多 heap 就会越高，越来越高，进程就崩了。</p>
<p>操作系统会限制一个进程的最大可用内存，Node.js 在 32 位系统中有1.6 Ghz 的内存 限制，在 64 位的系统中有 3 G 的内存限制。</p>
<p><img src="/images/image-20190603171621574.png" alt="image-20190603171621574"></p>
<p><img src="/images/image-20190603171709827.png" alt="image-20190603171709827"></p>
<p>服务器环境下 Node.js 都是分多个进程来跑的</p>
<h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><ul>
<li><p>内存数据库</p>
</li>
<li><p>web server 最常用的缓存数据库，数据存放在内存中</p>
</li>
<li><p>相比于 mysql，访问速度快</p>
</li>
<li><p>但是成本更高，可存储的数量个小</p>
</li>
<li><p>断电丢失数据</p>
</li>
</ul>
<h4 id="redis-解决方案"><a href="#redis-解决方案" class="headerlink" title="redis 解决方案"></a>redis 解决方案</h4><ul>
<li>将 web server 和 redis 拆分成两个单独的服务</li>
<li>双方都是独立的，都是可拓展的</li>
<li>包括 mysql，也是一个单独的服务</li>
</ul>
<h4 id="为何-session-使合用-redis"><a href="#为何-session-使合用-redis" class="headerlink" title="为何 session 使合用 redis"></a>为何 session 使合用 redis</h4><ul>
<li>session 访问频率，对性能要求极高，前置操作，所有请求都要请求 session</li>
<li>session 可以不考虑断电丢失数据的问题</li>
<li>session 数据量不会太大</li>
</ul>
<h4 id="为何网站数据不适合用-redis"><a href="#为何网站数据不适合用-redis" class="headerlink" title="为何网站数据不适合用 redis"></a>为何网站数据不适合用 redis</h4><ul>
<li>操作频率不太高（相比于 session 操作）</li>
<li>断电不能丢失数据，必须保留</li>
<li>数据量太大，内存成本太高</li>
</ul>
<h3 id="6-9-redis-介绍"><a href="#6-9-redis-介绍" class="headerlink" title="6-9 redis 介绍"></a>6-9 redis 介绍</h3><h4 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h4><p><code>brew install redis</code></p>
<p><code>redis-server</code></p>
<p><code>redis-cli</code></p>
<h4 id="使用-redis"><a href="#使用-redis" class="headerlink" title="使用 redis"></a>使用 redis</h4><p><code>set myname lvjiawen</code></p>
<p><code>get myname</code></p>
<p><code>keys *</code></p>
<p><code>del myname</code></p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul>
<li>为何要用 redis，不用redis 会出现什么问题？</li>
<li>redis 适合什么场景？mysql 适合什么场景？</li>
</ul>
<h3 id="6-10-Node-js-链接-redis"><a href="#6-10-Node-js-链接-redis" class="headerlink" title="6-10 Node.js 链接 redis"></a>6-10 Node.js 链接 redis</h3><p>index.js</p>
<p><code>npm i redis --save</code></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'redis'</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true">// 创建客户端</span>
<span class="token keyword">const</span> redisClient <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">creareClient</span><span class="token punctuation">(</span><span class="token number">6379</span><span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span>
redisClient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 测试</span>
redisClient<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'myname'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan2'</span><span class="token punctuation">,</span> redis<span class="token punctuation">.</span>print<span class="token punctuation">)</span>
redisClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'myname'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'val '</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span> 
  redisClient<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="6-14-前端联调"><a href="#6-14-前端联调" class="headerlink" title="6-14 前端联调"></a>6-14 前端联调</h3><ul>
<li>登录功能以来 cookie，必须浏览器来联调</li>
<li>cookie 跨域不共享，前端和 server 必须同域</li>
<li>需要用到 nignx 做代理，让前端后端同域</li>
</ul>
<h3 id="6-15-nginx-介绍"><a href="#6-15-nginx-介绍" class="headerlink" title="6-15 nginx 介绍"></a>6-15 nginx 介绍</h3><ul>
<li>高性能的 web 服务器，开源免费</li>
<li>一般用于做静态服务、负载均衡（本课程用不到）</li>
<li>反向代理（本科用到）</li>
</ul>
<p>客户端能够控制的代理，叫正向代理</p>
<p>客户端不能控制的代理，叫反向代理</p>
<p>配置文件位置：</p>
<p>windows： C:\nginx\conf\nginx.conf</p>
<p>Mac: /usr/local/etc/nginx/nginx.conf</p>
<h4 id="nginx-命令"><a href="#nginx-命令" class="headerlink" title="nginx 命令"></a>nginx 命令</h4><ul>
<li><p>测试配置文件格式是否正确 <code>nginx -t</code></p>
</li>
<li><p>启动 <code>nginx</code></p>
</li>
<li><p>重启 <code>nginx -s reload</code></p>
</li>
<li><p>停止 <code>nginx -s stop</code></p>
</li>
<li><p>打开配置文件 <code>sudo vi /usr/local/etc/nginx/nginx.conf</code></p>
</li>
<li><p>修改第三行 <code>worker_processes 2;</code> 多核可以启动多个进程</p>
</li>
<li><p>修改 server </p>
</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript">server <span class="token punctuation">{</span>
    listen      <span class="token number">8080</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>
    # location <span class="token operator">/</span> <span class="token punctuation">{</span>
    # <span class="token operator">...</span>    
    # <span class="token punctuation">}</span>
    location <span class="token operator">/</span> <span class="token punctuation">{</span>
        proxy_pass http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8001</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    location <span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">{</span>
        proxy_pass http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8000</span><span class="token punctuation">;</span>
        proxy_set_header Host $host<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><code>:wq</code> 保存</p>
<h3 id="6-16-登录-总结"><a href="#6-16-登录-总结" class="headerlink" title="6-16 登录-总结"></a>6-16 登录-总结</h3><ul>
<li>cookie 是什么？ session 是什么？如何实现登录？</li>
<li>redis 在这里扮演的角色？有什么核心价值</li>
<li>nginx 的反向代理配置？联调中的作用</li>
</ul>
<h2 id="第-7-章-博客项目值日志"><a href="#第-7-章-博客项目值日志" class="headerlink" title="第 7 章 博客项目值日志"></a>第 7 章 博客项目值日志</h2><h3 id="7-1-日志基础"><a href="#7-1-日志基础" class="headerlink" title="7-1 日志基础"></a>7-1 日志基础</h3><p><strong>QPS</strong> 每秒访问量 query per seconds</p>
<p>日志包括：</p>
<ul>
<li>访问日志，access log，server 最重要的日志</li>
<li>自定义日志，包括自定义事件、错误记录等</li>
</ul>
<p>技能：</p>
<ul>
<li>Node.js 文件操作，Node.js stream（server 端要节省使用 CPU 和内存）</li>
<li>日志功能的开发和使用</li>
<li>日志文件拆分（例如每天一个文件  ）</li>
<li>日志内容分析</li>
</ul>
<p>日志为什么放在文件中？</p>
<ul>
<li><p>要有表结构，多表联动查询才用 mysql</p>
</li>
<li><p>文件大，性能要求不高，redis 不能放</p>
</li>
</ul>
<h3 id="7-2-Node-js-文件操作"><a href="#7-2-Node-js-文件操作" class="headerlink" title="7-2 Node.js 文件操作"></a>7-2 Node.js 文件操作</h3><h3 id="7-3-stream-介绍"><a href="#7-3-stream-介绍" class="headerlink" title="7-3 stream 介绍"></a>7-3 stream 介绍</h3><h4 id="IO-操作的性能瓶颈"><a href="#IO-操作的性能瓶颈" class="headerlink" title="IO 操作的性能瓶颈"></a>IO 操作的性能瓶颈</h4><ul>
<li>IO（in-out 输入输出） 包括”网络IO” 和”文件IO”</li>
<li>相比于 CPU 计算和内存读写，IO 的突出特点就是”慢”</li>
<li>如何在有限的硬件资源下提高 IO 的操作效率？stream</li>
</ul>
<p>代码示例</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token operator">===</span><span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">''</span>
        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            result <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span></code></pre>
<h3 id="7-7-拆分日志"><a href="#7-7-拆分日志" class="headerlink" title="7-7 拆分日志"></a>7-7 拆分日志</h3><ul>
<li><p>日志内容慢慢积累，放在一个文件夹不好处理</p>
</li>
<li><p>按时间划分日志文件，入 2019-02-10.access.log</p>
</li>
<li><p>实现方式：linux、macOS 的 crontab 命令，即定时任务</p>
</li>
</ul>
<h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><ul>
<li>设置定时任务，格式：***** command，第一个 * 是分钟，第二个 * 是小时（1-24），第三个是日期，第四个十月份，第五个是星期几</li>
<li>将 access.log 拷贝并重命名为 2019-02-10.access.log</li>
<li>清空 access.log 文件，继续积累日志</li>
</ul>
<p><code>crontab -e</code> 新建</p>
<p><code>* 0 * * *  sh /Users/lvjiawen/Desktop/my-blog/code/blog-1/src/utils/copy.sh</code></p>
<p><code>crontab -l</code>查看</p>
<h4 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h4><ul>
<li>针对 access.log 日志，分析chrome 的占比</li>
<li>日志是按行存储的，一行就是一条日志</li>
<li>使用 Node.js 的 readline，基于 stream，效率很高</li>
</ul>
<h2 id="安全-1"><a href="#安全-1" class="headerlink" title="安全"></a>安全</h2><ul>
<li>sql 注入：窃取数据库内容</li>
<li>XSS 攻击：窃取前端 cookie 内容</li>
<li>密码加密：保障用户信息安全（重要！）</li>
<li>server 端攻击方式非常多，预防手段也非常多，这里记录常见的、能通过 web server （Node.js）层面预防的，有些攻击需要硬件和服务来支持（需要OP 支持），如 DDOS </li>
</ul>
<h3 id="8-1-开始和-sql-注入"><a href="#8-1-开始和-sql-注入" class="headerlink" title="8-1 开始和 sql 注入"></a>8-1 开始和 sql 注入</h3><ul>
<li>最原始、最简单的攻击，从有了 web2.0（允许用户提交信息）就有了 SQL 注入攻击</li>
<li>攻击方式：输入一个 SQL 片段，最终拼接成一段攻击代码</li>
<li>预防措施：使用 MySQL 的 escape 函数处理输入内容即可</li>
<li>输入<code>&#39; —</code>，利用 SQL 的 ``–` 注释语句</li>
<li>输入<code>&#39;;delete from users; --</code> 删除用户表</li>
</ul>
<h3 id="8-2-xss-攻击"><a href="#8-2-xss-攻击" class="headerlink" title="8-2 xss 攻击"></a>8-2 xss 攻击</h3><ul>
<li>前端同学最熟悉的攻击方式，但 server 端更应该掌握</li>
<li>攻击方式：在页面展示内容中参杂 js 代码，以获取网页信息</li>
<li>预防措施： 转换生成 js 的特殊符号</li>
</ul>
<p>转换特殊符号</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&amp;</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>
<span class="token operator">&lt;</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>
<span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
" <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
' <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#x27<span class="token punctuation">;</span>
<span class="token operator">/</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#x2F<span class="token punctuation">;</span></code></pre>
<p><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p>
<p><code>npm install xss --save</code></p>
<h3 id="8-3-密码加密和总结"><a href="#8-3-密码加密和总结" class="headerlink" title="8-3 密码加密和总结"></a>8-3 密码加密和总结</h3><ul>
<li>用户名和密码是最不应该泄漏的用户信息</li>
<li>危害：获取用户名和密码，再去尝试登录其他系统</li>
<li>预防措施，将密码加密</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 密钥</span>
<span class="token keyword">const</span> SECRET_KEY <span class="token operator">=</span> <span class="token string">'WJiol_8776#'</span>

<span class="token comment" spellcheck="true">// md5 加密</span>
<span class="token keyword">function</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> md5 <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> md5<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 加密函数</span>
<span class="token keyword">function</span> <span class="token function">genPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`password=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>SECRET_KEY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>
  <span class="token keyword">return</span> <span class="token function">md5</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  genPassword
<span class="token punctuation">}</span></code></pre>
<h2 id="第-9-章-不使用框架开发-server-统一总结"><a href="#第-9-章-不使用框架开发-server-统一总结" class="headerlink" title="第 9 章 不使用框架开发 server 统一总结"></a>第 9 章 不使用框架开发 server 统一总结</h2><h3 id="开发了那些模块，完整的流程"><a href="#开发了那些模块，完整的流程" class="headerlink" title="开发了那些模块，完整的流程"></a>开发了那些模块，完整的流程</h3><ul>
<li>处理 http 接口（路由、method、path、query、req.body）</li>
<li>连接数据库</li>
<li>实现登录</li>
<li>安全（mysql 注入、xss、密码加密）</li>
<li>日志</li>
<li>上线</li>
</ul>
<p><img src="/images/image-20190616125743411.png" alt="image-20190616125743411"></p>
<h3 id="用到了哪些核心的知识点"><a href="#用到了哪些核心的知识点" class="headerlink" title="用到了哪些核心的知识点"></a>用到了哪些核心的知识点</h3><ul>
<li>http、Node.js 处理http、处理路由、MySQL</li>
<li>cookie、session、redis、nginx 反向代理</li>
<li>SQL 注入、XSS 攻击、加密</li>
<li>日志、stream、contrab、readline</li>
<li>线上环境的知识点</li>
</ul>
<h3 id="回顾-server-和前端的区别"><a href="#回顾-server-和前端的区别" class="headerlink" title="回顾 server 和前端的区别"></a>回顾 server 和前端的区别</h3><ul>
<li>服务稳定性</li>
<li>内存 CPU性能永远不够（优化、拓展）</li>
<li>日志记录</li>
<li>安全（包括登录验证）</li>
<li>集群和服务拆分（设计已支持）</li>
</ul>
<h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><ul>
<li><p>不实用框架开发，从 0 开始，关注底层 API</p>
</li>
<li><p>很琐碎、很复杂，没有标准可依，很容易将代码写乱</p>
</li>
<li><p>适合学习，但是不适合应用，接下来开始 express 和 koa2</p>
</li>
</ul>
<h2 id="第-10-章-使用-express-重构博客项目"><a href="#第-10-章-使用-express-重构博客项目" class="headerlink" title="第 10 章 使用 express 重构博客项目"></a>第 10 章 使用 express 重构博客项目</h2><h3 id="express-介绍"><a href="#express-介绍" class="headerlink" title="express 介绍"></a>express 介绍</h3><p>express 是 Node.js 最常用的 web server 框架</p>
<h4 id="什么框架"><a href="#什么框架" class="headerlink" title="什么框架"></a>什么框架</h4><ul>
<li>封装基本的 API 和工具，让开发者去关心业务</li>
<li>框架有一定的流程和标准，能形成解决方案</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>npm install express-generator -g</code></p>
<h4 id="express-总结"><a href="#express-总结" class="headerlink" title="express 总结"></a>express 总结</h4><ul>
<li><p>初始化代码中，各个插件的作用</p>
</li>
<li><p>思考各个插件的实现原理</p>
</li>
<li><p>处理 get 和 post 请求</p>
</li>
<li><p>express 如何处理路由</p>
</li>
<li><p>app.use 到底是怎么回事？</p>
</li>
<li><p>中间件使用过程中，代码中 next 参数是什么？</p>
</li>
</ul>
<h3 id="10-8-express-处理-session"><a href="#10-8-express-处理-session" class="headerlink" title="10-8 express 处理 session"></a>10-8 express 处理 session</h3><ul>
<li>使用 express-session 和 connect-redis</li>
<li>req.sexsion 保存登录信息，登录校验做成 express 中间件</li>
</ul>
<h3 id="10-12-介绍-morgan"><a href="#10-12-介绍-morgan" class="headerlink" title="10-12 介绍 morgan"></a>10-12 介绍 morgan</h3><ul>
<li>access log 记录，直接使用脚手架推荐的 morgan</li>
<li>自定义日志使用 console.log 和 console.error 即可</li>
<li>日志文件拆分、日志内容分析</li>
</ul>
<h3 id="10-14-express-中间件原理"><a href="#10-14-express-中间件原理" class="headerlink" title="10-14 express 中间件原理"></a>10-14 express 中间件原理</h3><ul>
<li>app.use 用来注册中间件，先收集起来</li>
<li>遇到 http 请求，根据 path 和 method 判断触发那些</li>
<li>实现 next 机制，即上一个通过 next 触发下一个</li>
</ul>
<h3 id="10-15-中间件代码实现"><a href="#10-15-中间件代码实现" class="headerlink" title="10-15 中间件代码实现"></a>10-15 中间件代码实现</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> slice <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice

<span class="token keyword">class</span> <span class="token class-name">LikeExpress</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 存放中间件的列表</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> <span class="token punctuation">{</span>
            all<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// app.use(...)</span>
            <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// app.get(...)</span>
            post<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// app.post(...)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

  <span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      info<span class="token punctuation">.</span>path <span class="token operator">=</span> path
      <span class="token comment" spellcheck="true">// 从第二个参数开始，转换为数组，存入 stack</span>
      info<span class="token punctuation">.</span>stack <span class="token operator">=</span> slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      info<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token string">'/'</span>
      <span class="token comment" spellcheck="true">// 从第二个参数开始，转换为数组，存入 stack</span>
      info<span class="token punctuation">.</span>stack <span class="token operator">=</span> slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> info
  <span class="token punctuation">}</span>

    <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// TODO 为什么不能直接写</span>
        <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>register<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// TODO 为什么不能直接写</span>
        <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>register<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// TODO 为什么不能直接写</span>
        <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>register<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>post<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

  <span class="token function">match</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">'/favicon.icon'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> stack
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 获取 routes</span>
    <span class="token keyword">let</span> currentRoutes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    currentRoutes <span class="token operator">=</span> currentRoutes<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>all<span class="token punctuation">)</span>
    currentRoutes <span class="token operator">=</span> currentRoutes<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">)</span>
    currentsRoutes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>routeInfo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>routeInfo<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>routeInfo<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> stack
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 核心的 next 机制</span>
  <span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 拿到第一个匹配的中间件</span>
      <span class="token keyword">const</span> middleware <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 执行中间件函数  </span>
        <span class="token function">middleware</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span>json <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>
            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
      <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url
      <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

      <span class="token keyword">const</span> resultList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> resultList<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

    <span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 工厂函数</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LikeExpress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="第-11-章-使用-Koa2-重构博客项目"><a href="#第-11-章-使用-Koa2-重构博客项目" class="headerlink" title="第 11 章 使用 Koa2 重构博客项目"></a>第 11 章 使用 Koa2 重构博客项目</h2><h3 id="async-await-语法介绍"><a href="#async-await-语法介绍" class="headerlink" title="async / await 语法介绍"></a>async / await 语法介绍</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 用 promise 获取文件内容</span>
<span class="token keyword">function</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> fullFileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'files'</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
      fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fullFileName<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
              <span class="token keyword">return</span>
          <span class="token punctuation">}</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>
              JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> promise
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readFileData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 同步写法</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> aData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span><span class="token string">'a.json'</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a data'</span><span class="token punctuation">,</span> aData<span class="token punctuation">)</span>
      <span class="token keyword">const</span> bData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>aData<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b data'</span><span class="token punctuation">,</span> bData<span class="token punctuation">)</span>
      <span class="token keyword">const</span> cData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>bData<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c data'</span><span class="token punctuation">,</span> cData<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">readFileData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<ul>
<li><p>await 后面可以追加 promise 对象，获取 resolve 的值</p>
</li>
<li><p>await 必须包裹在 async 函数里面</p>
</li>
<li><p>async 函数执行返回的也是一个 promise 对象</p>
</li>
<li><p>try-catch 截获 promise 中 reject 的值</p>
</li>
</ul>
<h3 id="Koa-2-简介"><a href="#Koa-2-简介" class="headerlink" title="Koa 2 简介"></a>Koa 2 简介</h3><ul>
<li>express 中间件是异步回调， Koa2 原生支持 async / await</li>
<li>新开发框架和系统，都开始觊觎 koa2，例如 egg.js</li>
<li>express 虽然未过时，但是 koa2 肯定是未来的趋势</li>
</ul>
<h4 id="Koa-2-安装"><a href="#Koa-2-安装" class="headerlink" title="Koa 2 安装"></a>Koa 2 安装</h4><p><code>npm install koa-generator -g</code></p>
<h4 id="Koa-2-路由介绍"><a href="#Koa-2-路由介绍" class="headerlink" title="Koa 2 路由介绍"></a>Koa 2 路由介绍</h4><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    title<span class="token punctuation">:</span> <span class="token string">'Hello Koa 2!'</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/string'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'koa2 string'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/json'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
    title<span class="token punctuation">:</span> <span class="token string">'koa2 json'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="中间件机制"><a href="#中间件机制" class="headerlink" title="中间件机制"></a>中间件机制</h4><p>切入点：</p>
<ul>
<li>app.use 是什么</li>
<li>next 是什么</li>
</ul>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul>
<li>app.use 用来注册中间件，先收集起来</li>
<li>实现 next 机制，即上一个通过 next 出发下一个</li>
<li>（不涉及 method 和 path 的判断）</li>
</ul>
<h3 id="Koa-2-中间件原理"><a href="#Koa-2-中间件原理" class="headerlink" title="Koa 2 中间件原理"></a>Koa 2 中间件原理</h3><p>洋葱圈模型</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 组合中间件</span>
<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span>middlewareList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 关于各种中间件调用的逻辑</span>
    <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> fn <span class="token operator">=</span> middlewareList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// 防止传入的不是 Promise 函数</span>
          <span class="token function">fn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dispatch<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 本身就是 Promise 函数</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LikeKoa2</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>middlewareList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">use</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>middlewareList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span>

  <span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token punctuation">{</span>
      req<span class="token punctuation">,</span>
      res
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ctx
  <span class="token punctuation">}</span>

  <span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>middlewareList<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> LikeKoa2</code></pre>
<h3 id="koa2-总结"><a href="#koa2-总结" class="headerlink" title="koa2 总结"></a>koa2 总结</h3><ul>
<li>使用 async 和 await 的好处</li>
<li>koa2 的使用，以及如何操作 session redis 日志</li>
<li>koa2 中间件的使用和原理</li>
</ul>
<h3 id="预习"><a href="#预习" class="headerlink" title="预习"></a>预习</h3><ul>
<li>上线</li>
<li>如何实现线上服务稳定性？PM2 是什么</li>
<li>nginx 在线上环境还扮演了什么重要的角色</li>
</ul>
<h2 id="上线与配置"><a href="#上线与配置" class="headerlink" title="上线与配置"></a>上线与配置</h2><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="线上环境"><a href="#线上环境" class="headerlink" title="线上环境"></a>线上环境</h3><ul>
<li>服务器稳定性</li>
<li>充分利用服务器硬件资源，以便提高性能</li>
<li>线上日志记录（访问日志，自定义日志，错误日志）</li>
</ul>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="/images/image-20190628103112542.png" alt="image-20190628103112542"></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>imooc 实战</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript(1) - 作用域和闭包</title>
    <url>/2020/07/09/languages/javascript(1)%20-%20%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<blockquote>
<p>记录《你不知道的 Javascript》上册，第一部分，作用域与闭包部分的读书笔记，主要是摘录，还未做整理。<br>读《你不知道的 JS 》</p>
</blockquote>
<h2 id="两个例子"><a href="#两个例子" class="headerlink" title="两个例子"></a>两个例子</h2><h3 id="闭包的例子"><a href="#闭包的例子" class="headerlink" title="闭包的例子"></a>闭包的例子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token operator">++</span>a
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">return</span> <span class="token operator">++</span>a
<span class="token punctuation">}</span>

<span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 13</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------------------'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------------------'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span></code></pre>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>下面两种函数 foo 和 bar 实际上是等价的。原理是 var 的声明提前，提前到当前作用域开始的地方</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>isTrue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>isTrue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> j<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> j<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="1-作用域是什么"><a href="#1-作用域是什么" class="headerlink" title="1 作用域是什么"></a>1 作用域是什么</h2><p>为了解决程序需要时如何找到各种变量，工程师需要一套设计良好的规则来存储变量，并且之后可以方便地找到这些变量。 这套规则被称为作用域。</p>
<p>尽管通常将 JavaScript 归类为“动态”或“解释执行”语言，但事实上它是一门编译语言。 </p>
<p>###编译</p>
<p>在传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为“编 译”。 </p>
<p>对于 JavaScript 来说，大部分情况下编译发生在代码执行前的几微秒(甚至更短!)的时 间内。 JavaScript 引擎不会有大量的(像其他语言编译器那么多的)时间用来进行优化，因 为与其他语言不同，JavaScript 的编译过程不是发生在构建之前的。 </p>
<p>任何 JavaScript 代码片段在执行前都要进行编译(通常就在执行前)。因此， JavaScript 编译器首先会对 var a = 2; 这段程序进行编译，然后做好执行它的准备，并且通常马上就会执行它。 </p>
<h4 id="分词-词法分析-Tokenizing-Lexing-阶段"><a href="#分词-词法分析-Tokenizing-Lexing-阶段" class="headerlink" title="分词/词法分析(Tokenizing/Lexing) 阶段"></a>分词/词法分析(Tokenizing/Lexing) 阶段</h4><p>将<code>var a = 2;</code>变成 var、a、=、2和 ; 这样的词法单元，（python 中空格可能也是此法单元）</p>
<p>#####解析/语法分析(Parsing) 阶段</p>
<p>这个过程是将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“抽象语法树”(Abstract Syntax Tree，AST)。</p>
<p>把</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<p>转化成</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"FuctionDeclaration"</span><span class="token punctuation">,</span> // 函数声明
    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span> // 标识符
        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"fun"</span> // 函数名称
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"params"</span><span class="token operator">:</span> <span class="token punctuation">[</span> // 函数参数
        <span class="token punctuation">{</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>
            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span> // 参数名称
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>
            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"b"</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"BlockStatement"</span><span class="token punctuation">,</span>
        body<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="代码生成阶段"><a href="#代码生成阶段" class="headerlink" title="代码生成阶段"></a>代码生成阶段</h4><p>将 AST 转换为可执行代码的过程被称为代码生成。这个过程与语言、目标平台等息息相关。</p>
<p><code>var a = 2;</code>会转化为一组机器指令，用来创建一个叫做 a 的变量（包括分配内存等)，并将一个值储存在 a 中。</p>
<h3 id="理解作用域"><a href="#理解作用域" class="headerlink" title="理解作用域"></a>理解作用域</h3><h4 id="过程参与者"><a href="#过程参与者" class="headerlink" title="过程参与者"></a>过程参与者</h4><ul>
<li><p><strong>引擎</strong>：从头到尾负责整个 Javascript 程序的编译以及执行过程。</p>
</li>
<li><p><strong>编译器</strong>：负责语法分析及代码生成。</p>
</li>
<li><p><strong>作用域</strong>：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</p>
</li>
</ul>
<h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>当你看见 <code>var a = 2;</code> 这段程序时，很可能认为这是一句声明。但我们的新朋友引擎却不这 么看。事实上，引擎认为这里有两个完全不同的声明，一个由编译器在编译时处理，另一个则由引擎在运行时处理。</p>
<p>下面我们将 var a = 2; 分解，看看引擎和它的朋友们是如何协同工作的。 </p>
<p>编译器首先会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。但是当编译器开始进行代码生成时，它对这段程序的处理方式会和预期的有所不同。 </p>
<p>可以合理地假设编译器所产生的代码能够用下面的伪代码进行概括:“为一个变量分配内 存，将其命名为 a，然后将值 2 保存进这个变量。”然而，这并不完全正确。 </p>
<p>事实上编译器会进行如下处理。 </p>
<ol>
<li>遇到 var a，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的 集合中。如果是，编译器会忽略该声明，继续进行编译;否则它会要求作用域在当前作 用域的集合中声明一个新的变量，并命名为 a。 </li>
<li>接下来编译器会为引擎生成运行时所需的代码，这些代码被用来处理 a = 2 这个赋值 操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作 a 的 变量。如果是，引擎就会使用这个变量;如果否，引擎会继续查找该变量(查看 1.3 节)。 </li>
</ol>
<p>如果引擎最终找到了 a 变量，就会将 2 赋值给它。否则引擎就会举手示意并抛出一个异常! </p>
<p><strong>总结</strong>：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量(如 果之前没有声明过)，然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对 它赋值。 </p>
<h4 id="编译器有话说"><a href="#编译器有话说" class="headerlink" title="编译器有话说"></a>编译器有话说</h4><p>LHS 去找到变量指针或者内存地址</p>
<p>RHS 去找到变量的值</p>
<p>编译器在编译过程的第二步中生成了代码，引擎执行它时，会通过查找变量 a 来判断它是 否已声明过。查找的过程由作用域进行协助，但是引擎执行怎样的查找，会影响最终的查 找结果。 </p>
<p>在我们的例子中，引擎会为变量 a 进行 LHS 查询。 </p>
<h4 id="引擎和作用域的对话"><a href="#引擎和作用域的对话" class="headerlink" title="引擎和作用域的对话"></a>引擎和作用域的对话</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>引擎:我说作用域，我需要为 foo 进行 RHS 引用。你见过它吗? </p>
<p>作用域:别说，我还真见过，编译器那小子刚刚声明了它。它是一个函数，给你。 </p>
<p>引擎:哥们太够意思了!好吧，我来执行一下 foo。 </p>
<p>引擎:作用域，还有个事儿。我需要为 a 进行 LHS 引用，这个你见过吗? </p>
<p>作用域:这个也见过，编译器最近把它声名为 foo 的一个形式参数了，拿去吧。 </p>
<p>引擎:大恩不言谢，你总是这么棒。</p>
<p>现在我要把 2 赋值给 a。</p>
<p>引擎:哥们，不好意思又来打扰你。我要为 console 进行 RHS 引用，你见过它吗? 作用域:咱俩谁跟谁啊，再说我就是干这个。</p>
<p>这个我也有，console 是个内置对象。 给你。 </p>
<p>引擎:么么哒。我得看看这里面是不是有 log(..)。太好了，找到了，是一个函数。</p>
<p>引擎:哥们，能帮我再找一下对 a 的 RHS 引用吗?虽然我记得它，但想再确认一次。</p>
<p>作用域:放心吧，这个变量没有变动过，拿走，不谢。</p>
<p>引擎：foo 的作用域兄弟，你对它进行 RHS见过 b 吗？我需要对它进行 RHS 引用。</p>
<p>作用域：听都没听过，走开。</p>
<p>引擎：foo 的上级作用域兄弟啊，咦？有眼不识泰山，原来你是全局作用域大哥，太好了。你见过 b吗？我需要对它进行 RHS 引用。</p>
<p>作用域：当然了，给你吧</p>
<p>引擎:真棒。我来把 a 的值，也就是 2，b 的值2，传递进 log(..)。 </p>
</blockquote>
<h4 id="作用域嵌套"><a href="#作用域嵌套" class="headerlink" title="作用域嵌套"></a>作用域嵌套</h4><p>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。 </p>
<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>为什么区分 LHS 和 RHS 是一件重要的事情? </p>
<p>因为在变量还没有声明(在任何作用域中都无法找到该变量)的情况下，这两种查询的行 为是不一样的。 </p>
<p>如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError 异常。 </p>
<p>相较之下，当引擎执行 LHS 查询时，如果在顶层(全局作用域)中也无法找到目标变量， </p>
<p>全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎，前提是程序运行在非 “严格模式”下。 </p>
<p>在 严格模式中 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询 失败时类似的 ReferenceError 异常。 </p>
<p>接下来，如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作， 比如试图对一个非函数类型的值进行函数调用，或着引用 null 或 undefined 类型的值中的 属性，那么引擎会抛出另外一种类型的异常，叫作 TypeError。 </p>
<p>ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对 结果的操作是非法或不合理的。 </p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>作用域是一套规则，用于确定在何处以及如何查找变量(标识符)。如果查找的目的是对变量进行赋值，那么就会使用 LHS 查询;如果目的是获取变量的值，就会使用 RHS 查询。 赋值操作符会导致 LHS 查询。=操作符或调用函数时传入参数的操作都会导致关联作用域 的赋值操作。 </p>
<p>JavaScript引擎首先会在代码执行前对其进行编译，在这个过程中，像var a = 2这样的声 明会被分解成两个独立的步骤: </p>
<ol>
<li>首先，var a 在其作用域中声明新变量。这会在最开始的阶段，也就是代码执行前进行。 </li>
<li>接下来，a = 2 会查询(LHS 查询)变量 a 并对其进行赋值。 </li>
</ol>
<p>不成功的 RHS 引用会导致抛出 ReferenceError 异常。不成功的 LHS 引用会导致自动隐式 地创建一个全局变量(非严格模式下)，该变量使用 LHS 引用的目标作为标识符，或者抛 出 ReferenceError 异常(严格模式下)。 </p>
<h2 id="2-词法作用域"><a href="#2-词法作用域" class="headerlink" title="2 词法作用域"></a>2 词法作用域</h2><p>在第 1 章中，我们将“作用域”定义为一套规则，这套规则用来管理引擎如何在当前作用 域以及嵌套的子作用域中根据标识符名称进行变量查找。 </p>
<p>作用域共有两种主要的工作模型。第一种是最为普遍的，被大多数编程语言所采用的词法 作用域。另外一种叫作动态作用域，仍有一些编程语 言在使用(比如 Bash 脚本、Perl 中的一些模式等)。 </p>
<h3 id="2-1-词法阶段"><a href="#2-1-词法阶段" class="headerlink" title="2.1 词法阶段"></a>2.1 词法阶段</h3><p>大部分标准语言编译器工作的第一个阶段叫词法化，也叫单词化。词法化的过程对源代码中的字符进行检查。</p>
<p>词法作用域就是定义在此法阶段的作用域。就是在写代码时将变量和块作用域写在哪里决定的，词法分析器处理代码时会保持作用域不变（大部分情况是这样的）。</p>
<p>代码：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> foo <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> bar <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">boo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre>
<p>![image-20191116095305236](/Users/lvjiawen/Library/Application Support/typora-user-images/image-20191116095305236.png)</p>
<p>1 包含着整个全局作用域，其中只有一个标识符:foo。 </p>
<p>2 包含着 foo 所创建的作用域，其中有三个标识符:a、bar 和 b。 </p>
<p>3 包含着 bar 所创建的作用域，其中只有一个标识符:c。 </p>
<h3 id="2-2-查找"><a href="#2-2-查找" class="headerlink" title="2.2 查找"></a>2.2 查找</h3><p>作用域气泡的结构和互相之间的位置关系给引擎提供了足够的位置信息，引擎用这些信息 来查找标识符的位置。 </p>
<p>作用域查找会在找到第一个匹配的标识符时停止。在多层的嵌套作用域中可以定义同名的 标识符，这叫作“遮蔽效应”(内部的标识符“遮蔽”了外部的标识符)。 </p>
<p>作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见 第一个匹配的标识符为止。 </p>
<p>*<em>无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处 的位置决定。 *</em></p>
<p>词法作用域查找只会查找一级标识符，比如 a、b 和 c。如果代码中引用了 <code>foo.bar.baz</code>， 词法作用域查找只会试图查找 foo 标识符，找到这个变量后，对象属性访问规则会分别接 管对 bar 和 baz 属性的访问。 </p>
<h3 id="2-3-欺骗词法"><a href="#2-3-欺骗词法" class="headerlink" title="2.3 欺骗词法"></a>2.3 欺骗词法</h3><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">eval</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 欺骗! </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token string">"var b = 3;"</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1, 3</span></code></pre>
<p>严格模式无法欺骗</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token string">"use strict"</span><span class="token punctuation">;</span>
    <span class="token function">eval</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: a is not defined</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token string">"var a = 2"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span> o1 <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o1<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
<span class="token function">foo</span><span class="token punctuation">(</span> o2 <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o2<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2——不好，a 被泄漏到全局作用域上了!</span>
</code></pre>
<p>with 本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作 用域中的标识符来处理，从而创建了一个新的词法作用域(同样是在运行时)。 </p>
<h3 id="2-4-性能"><a href="#2-4-性能" class="headerlink" title="2.4 性能"></a>2.4 性能</h3><p>JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的 词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行过程中快速找到 标识符。 </p>
<p>但如果引擎在代码中发现了 eval(..) 或 with，它只能简单地假设关于标识符位置的判断 都是无效的，因为无法在词法分析阶段明确知道 eval(..) 会接收到什么代码，这些代码会 如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底 是什么。 </p>
<h3 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5 小结"></a>2.5 小结</h3><p>词法作用域意味着作用域是由书写代码时函数声明的位置来决定的。 编译的词法分析阶段 基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它 们进行查找。 </p>
<h2 id="第三章-函数作用域和块作用域"><a href="#第三章-函数作用域和块作用域" class="headerlink" title="第三章 函数作用域和块作用域"></a>第三章 函数作用域和块作用域</h2><p>正如我们在第 2 章中讨论的那样，作用域包含了一系列的“气泡”，每一个都可以作为容 器，其中包含了标识符(变量、函数)的定义。 这些气泡互相嵌套并且整齐地排列成蜂窝 型，排列的结构是在写代码时定义的。 </p>
<p>但是，究竟是什么生成了一个新的气泡?只有函数会生成新的气泡吗? JavaScript 中的其 他结构能生成作用域气泡吗? </p>
<h3 id="3-1-函数中的作用域"><a href="#3-1-函数中的作用域" class="headerlink" title="3.1 函数中的作用域"></a>3.1 函数中的作用域</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 一些代码</span>
    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 更多的代码 </span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>在这个代码片段中，foo(..) 的作用域气泡中包含了标识符 a、b、c 和 bar。无论标识符 声明出现在作用域中的何处，这个标识符所代表的变量或函数都将附属于所处作用域的气 泡。我们将在下一章讨论具体的原理。 bar(..) 拥有自己的作用域气泡。全局作用域也有自己的作用域气泡，它只包含了一个标 识符:foo。 </p>
<p>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复 用(事实上在嵌套的作用域中也可以使用)。 </p>
<h3 id="3-2-隐藏内部实现"><a href="#3-2-隐藏内部实现" class="headerlink" title="3.2 隐藏内部实现"></a>3.2 隐藏内部实现</h3><p>不合理</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span> a <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> b <span class="token operator">*</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token keyword">var</span> b<span class="token punctuation">;</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span></code></pre>
<p>在这个代码片段中，变量 b 和函数 doSomethingElse(..) 应该是 doSomething(..) 内部具体 实现的“私有”内容。给予外部作用域对 b 和 doSomethingElse(..) 的“访问权限”不仅 没有必要，而且可能是“危险”的，因为它们可能被有意或无意地以非预期的方式使用， 从而导致超出了 doSomething(..) 的适用条件。 </p>
<p>合理</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span> a <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> b <span class="token operator">*</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span></code></pre>
<h3 id="3-2-1-规避冲突"><a href="#3-2-1-规避冲突" class="headerlink" title="3.2.1 规避冲突"></a>3.2.1 规避冲突</h3><p>“隐藏”作用域中的变量和函数所带来的另一个好处，是可以避免同名标识符之间的冲突， 两个标识符可能具有相同的名字但用途却不一样，无意间可能造成命名冲突。 </p>
<h4 id="3-2-1-1-全局命名空间"><a href="#3-2-1-1-全局命名空间" class="headerlink" title="3.2.1.1 全局命名空间"></a>3.2.1.1 全局命名空间</h4><p>库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象 被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象(命名空间)的属 性，而不是将自己的标识符暴漏在顶级的词法作用域中。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> MyReallyCoolLibrary <span class="token operator">=</span> <span class="token punctuation">{</span>
    awesome<span class="token punctuation">:</span> <span class="token string">"stuff"</span><span class="token punctuation">,</span>
    doSomething<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    doSomethingElse<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="3-2-1-2-模块管理"><a href="#3-2-1-2-模块管理" class="headerlink" title="3.2.1.2 模块管理"></a>3.2.1.2 模块管理</h4><h3 id="3-3-函数作用域"><a href="#3-3-函数作用域" class="headerlink" title="3.3 函数作用域"></a>3.3 函数作用域</h3><p>我们已经知道，在任意代码片段外部添加包装函数，可以将内部的变量和函数定义“隐藏”起来，外部作用域无法访问包装函数内部的任何内容。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// &lt;-- 添加这一行</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// &lt;-- 以及这一行</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- 以及这一行</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre>
<p>这种技术可以解决一些问题，但是它并不理想，因为会导致一些额外的问题。首先， 必须声明一个具名函数 foo()，意味着 foo 这个名称本身“污染”了所在作用域(在这个 例子中是全局作用域)。其次，必须显式地通过函数名(foo())调用这个函数才能运行其 中的代码。 </p>
<p>解决方案</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// &lt;-- 添加这一行</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- 以及这一行</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre>
<p>函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处。 </p>
<p>区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位 置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中 的第一个词，那么就是一个函数声明，否则就是一个函数表达式。 </p>
<p>比较一下前面两个代码片段。第一个片段中 foo 被绑定在所在作用域中，可以直接通过foo() 来调用它。第二个片段中 foo 被绑定在函数表达式自身的函数中而不是所在作用域中。 </p>
<p>换句话说，(function foo(){ .. })作为函数表达式意味着foo只能在..所代表的位置中 被访问，外部作用域则不行。foo 变量名被隐藏在自身中意味着不会非必要地污染外部作 用域。 </p>
<h4 id="3-3-1-匿名和具名"><a href="#3-3-1-匿名和具名" class="headerlink" title="3.3.1 匿名和具名"></a>3.3.1 匿名和具名</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I waited 1 second!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>setTimeout 中的function 使用的也是函数表达式，是一种匿名函数表达式，，因为 function().. 没有名称标识符。</p>
<p>函数表达式可以是匿名的， 而函数声明则不可以省略函数名——在 JavaScript 的语法中这是非法的。</p>
<p>另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。 </p>
<p>始终给函数表达式命名是一个最佳实践。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timeoutHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// &lt;-- 快看，我有名字了! </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"I waited 1 second!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="3-3-2-立即执行函数表达式"><a href="#3-3-2-立即执行函数表达式" class="headerlink" title="3.3.2 立即执行函数表达式"></a>3.3.2 立即执行函数表达式</h4><p>(function foo(){ .. })()。第一个 ( ) 将函数变成表 达式，第二个 ( ) 执行了这个函数。 </p>
<p>IIFE 还有一种变化的用途是倒置代码的运行顺序，将需要运行的函数放在第二位，在 IIFE 执行之后当作参数传递进去。这种模式在 UMD(Universal Module Definition)项目中被广 泛使用。尽管这种模式略显冗长，但有些人认为它更易理解。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">IIFE</span><span class="token punctuation">(</span> def <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">def</span><span class="token punctuation">(</span> window <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">**</span><span class="token keyword">function</span><span class="token operator">**</span> <span class="token function">def</span><span class="token punctuation">(</span> global <span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> global<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>函数表达式 def 定义在片段的第二部分，然后当作参数(这个参数也叫作 def)被传递进 IIFE 函数定义的第一部分中。最后，参数 def(也就是传递进去的函数)被调用，并将 window 传入当作 global 参数的值。 </p>
<h3 id="3-4块作用域"><a href="#3-4块作用域" class="headerlink" title="3.4块作用域"></a>3.4块作用域</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"i:"</span><span class="token operator">+</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> bar <span class="token operator">=</span> foo <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    bar <span class="token operator">=</span> <span class="token function">something</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="3-4-1-with"><a href="#3-4-1-with" class="headerlink" title="3.4.1 with"></a>3.4.1 with</h4><p>用 with 从对象中创建出的作用域仅在 with 声明中而非外 部作用域中有效。 </p>
<h4 id="3-4-2-try-catch"><a href="#3-4-2-try-catch" class="headerlink" title="3.4.2 try / catch"></a>3.4.2 try / catch</h4><p>非常少有人会注意到 JavaScript 的 ES3 规范中规定 try/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。 </p>
<h4 id="3-4-3-let"><a href="#3-4-3-let" class="headerlink" title="3.4.3 let"></a>3.4.3 let</h4><p>let 关键字可以将变量绑定到所在的任意作用域中(通常是 { 。。。}内部）为其声明的变量隐式地创建了所在的块作用域。 </p>
<p>使用 let 进行的声明不会在块作用域中进行提升。声明的代码被运行之前，声明并不 “存在”。 </p>
<h5 id="3-4-3-1-垃圾回收"><a href="#3-4-3-1-垃圾回收" class="headerlink" title="3.4.3.1 垃圾回收"></a>3.4.3.1 垃圾回收</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 在这里做点有趣的事情</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 在这个块中定义的内容可以销毁了! </span>
<span class="token punctuation">{</span>
    <span class="token keyword">let</span> someReallyBigData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">process</span><span class="token punctuation">(</span> someReallyBigData <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span> <span class="token string">"my_button"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"button clicked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*capturingPhase=*/</span><span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h5 id="3-4-3-2-let-循环"><a href="#3-4-3-2-let-循环" class="headerlink" title="3.4.3.2 let 循环"></a>3.4.3.2 let 循环</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>

<span class="token comment" spellcheck="true">// 类似于</span>
<span class="token punctuation">{</span>
    <span class="token keyword">let</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每个迭代重新绑定!</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>###3.5 小结</p>
<p>函数是 JavaScript 中最常见的作用域单元。本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。 </p>
<h2 id="4-提升"><a href="#4-提升" class="headerlink" title="4 提升"></a>4 提升</h2><p>任何声明在 某个作用域内的变量，都将附属于这个作用域。 </p>
<p>直觉上会认为 JavaScript 代码在执行时是由上到下一行一行执行的。但实际上这并不完全正确，有一种特殊情况会导致这个假设是错误的。</p>
<pre class=" language-javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span></code></pre>
<p>编译之后变成</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre>
<p>另外一段代码</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre>
<p>编译之后变为</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre>
<p>引擎会 在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是找到所有的 声明，并用合适的作用域将它们关联起来，这正是词法作用域 的核心内容。 </p>
<p>包括变量和函数在内的所有声明都会在任何代码被执行前首先 被处理。 </p>
<p>当你看到<code>var a = 2;</code>时，可能会认为这是一个声明。但 JavaScript 实际上会将其看成两个 声明:var a;和a = 2;。第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在 原地等待执行阶段。 </p>
<p>这个过程就好像变量和函数声明从它们在代码中出现的位置被“移动” 到了最上面。这个过程就叫作提升。 </p>
<p>另外值得注意的是，每个作用域都会进行提升操作。 </p>
<p>函数声明会被提升，但是函数表达式却不会被提升。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不是 ReferenceError, 而是 TypeError!</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token operator">/</span> <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>这段程序中的变量标识符 foo() 被提升并分配给所在作用域(在这里是全局作用域)，因此 foo() 不会导致ReferenceError。但是 foo 此时并没有赋值(如果它是一个函数声明而不 是函数表达式，那么就会赋值)。foo() 由于对 undefined 值进行函数调用而导致非法操作， 因此抛出 TypeError 异常。 </p>
<p>函数声明和变量声明都会被提升。但是一个值得注意的细节(这个细节可以出现在有多个“重复”声明的代码中)是函数会首先被提升，然后才是变量。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
<span class="token keyword">var</span> foo<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    coonsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>会被解释成</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>注意，var foo 尽管出现在 function foo()… 的声明之前，但它是重复的声明(因此被忽 略了)，因为函数声明会被提升到普通变量之前。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>尽管重复的 var 声明会被忽略掉，但出现在后面的函数声明还是可以覆盖前面的。 </p>
<p>我们习惯将var a = 2;看作一个声明，而实际上JavaScript引擎并不这么认为。它将var a 和 a = 2 当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。 </p>
<p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。 可以将这个过程形象地想象成所有的声明(变量和函数)都会被“移动”到各自作用域的 最顶端，这个过程被称为提升。 </p>
<h2 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h2><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用 域之外执行。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
    <span class="token punctuation">}</span>
    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>函数 bar() 具有一个涵盖 foo() 作用域的闭包 (事实上，涵盖了它能访问的所有作用域，比如全局作用域) 。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre>
<p>在 foo() 执行后，其返回值(也就是内部的 bar() 函数)赋值给变量 baz 并调用 baz()，实 际上只是通过不同的标识符引用调用了内部的函数 bar()。 </p>
<p>bar() 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方执行。 </p>
<p>在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很自然地会考虑对其进行回收。 </p>
<p>而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此没有被回收。谁在使用这个内部作用域?原来是 bar() 本身在使用。 </p>
<p>拜 bar() 所声明的位置所赐，它拥有涵盖 foo() 内部作用域的闭包，使得该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。 </p>
<p>bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</p>
<pre class=" language-javascript"><code class="language-javascript">unction <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
  <span class="token punctuation">}</span>
    <span class="token function">bar</span><span class="token punctuation">(</span> baz <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 妈妈快看呀，这就是闭包!</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    fn <span class="token operator">=</span> baz<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将 baz 分配给全局变量</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 妈妈快看呀，这就是闭包!</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
</code></pre>
<p>无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">wait</span><span class="token punctuation">(</span> <span class="token string">"Hello, closure!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>将一个内部函数(名为 timer)传递给 setTimeout(..)。timer 具有涵盖 wait(..) 作用域的闭包，因此还保有对变量 message 的引用。</p>
<p>wait 函数执行之后，message 还是没有销毁。</p>
<p> wait(..) 执行 1000 毫秒后，它的内部作用域并不会消失，timer 函数依然保有 wait(..)作用域的闭包。 </p>
<p>深入到引擎的内部原理中，内置的工具函数 setTimeout(..) 持有对一个参数的引用，这个参数也许叫作 fn 或者 func，或者其他类似的名字。引擎会调用这个函数，在例子中就是内部的 timer 函数，而词法作用域在这个过程中保持完整。 </p>
<p>这就是闭包。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setupBot</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">$</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">activator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Activating: "</span> <span class="token operator">+</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">setupBot</span><span class="token punctuation">(</span> <span class="token string">"Closure Bot 1"</span><span class="token punctuation">,</span> <span class="token string">"#bot_1"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setupBot</span><span class="token punctuation">(</span> <span class="token string">"Closure Bot 2"</span><span class="token punctuation">,</span> <span class="token string">"#bot_2"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>本质上无论何时何地，如果将函数(访问它们各自的词法作用域)当作第一 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使用了回调函数，实际上就是在使用闭包! </p>
<h3 id="循环和闭包"><a href="#循环和闭包" class="headerlink" title="循环和闭包"></a>循环和闭包</h3><p>第 3 章介绍过，IIFE 会通过声明并立即执行一个函数来创建作用域。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> j <span class="token operator">=</span> i
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> j <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> j<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>仔细思考我们对前面的解决方案的分析。我们使用 IIFE 在每次迭代时都创建一个新的作用 域。换句话说，每次迭代我们都需要一个块作用域。第 3 章介绍了 let 声明，可以用来劫 持块作用域，并且在这个块作用域中声明一个变量。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CoolModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> something <span class="token operator">=</span> <span class="token string">"cool"</span>
    <span class="token keyword">var</span> another <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

    <span class="token keyword">function</span> doSomething <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">doAnother</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>another<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        doSomething<span class="token punctuation">:</span> doSomething<span class="token punctuation">,</span>
        doAnother<span class="token punctuation">:</span> doAnother
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">CoolModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
foo<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
foo<span class="token punctuation">.</span><span class="token function">doAnother</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>公共 API 模式</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">CoolModule</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 修改公共 API</span>
        publicAPI<span class="token punctuation">.</span>identify <span class="token operator">=</span> identify2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">identify1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> id <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">identify2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> id<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> publicAPI <span class="token operator">=</span> <span class="token punctuation">{</span>
        change<span class="token punctuation">:</span> change<span class="token punctuation">,</span>
    identify<span class="token punctuation">:</span> identify1
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> publicAPI<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token string">"foo module"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

foo<span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo module </span>
foo<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// FOO MODULE</span></code></pre>
<h4 id="现代的模块机制"><a href="#现代的模块机制" class="headerlink" title="现代的模块机制"></a>现代的模块机制</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> MyModules <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">define</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> impl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> modules<span class="token punctuation">[</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> impl<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> impl<span class="token punctuation">,</span> deps <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        define<span class="token punctuation">:</span> define<span class="token punctuation">,</span>
        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">get</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>使用</p>
<pre class=" language-javascript"><code class="language-javascript">MyModules<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>who<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Let me introduce: "</span> <span class="token operator">+</span> who
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        hello<span class="token punctuation">:</span> hello
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

MyModules<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> hungry <span class="token operator">=</span> <span class="token string">'hippo'</span>
    <span class="token keyword">function</span> <span class="token function">awesome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>hungry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        awesI ome<span class="token punctuation">:</span> awesome
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> MyModules<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> MyModules<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'hippo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
foo<span class="token punctuation">.</span><span class="token function">awesome</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h4 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h4><p>ES6 中为模块增加了一级语法支持。但通过模块系统进行加载时，ES6 会将文件当作独立的模块来处理。每个模块都可以导入其他模块或特定的 API 成员，同样也可以导出自己的API 成员。 </p>
<p>基于函数的模块并不是一个能被稳定识别的模式(编译器无法识别)，它们的API语义只有在运行时才会被考虑进来。因此可以在运行时修改一个模块的 API(参考前面关于公共 API 的讨论)。 </p>
<p>比之下，ES6 模块 API 更加稳定(API 不会在运行时改变)。由于编辑器知道这一点，因此可以在(的确也这样做了)编译期检查对导入模块的 API 成员的引用是否真实存在。如果 API 引用并不存在，编译器会在运行时抛出一个或多个“早期”错误，而不会像往常一样在运行期采用动态的解决方案。 </p>
<p>ES6 的模块没有“行内”格式，必须被定义在独立的文件中(一个文件一个模块)。浏览器或引擎有一个默认的“模块加载器”(可以被重载，但这远超出了我们的讨论范围)可以在导入模块时异步地加载模块文件。 </p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>实际上闭包只是一个标准，是关于如何在函数作为值按需传递的词法环境中书写代码的。 </p>
<p>当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时 就产生了闭包。 </p>
<p>模块有两个主要特征:(1)为创建内部作用域而调用了一个包装函数;(2)包装函数的返回值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。 </p>
<h2 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h2><p>词法作用域最重要的特征是它的定义过程发生在代码的书写阶段。</p>
<p>动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调用。</p>
<p>词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定的。 词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。 </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>词法作用域让 foo() 中的 a 通过 RHS 引用到了全局作用域中的 a，因此会输出 2。 </p>
<p>而动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。因此，如果 JavaScript 具有动态作用域，理论上，上面代码中的 foo() 在执行时将会输出 3。 </p>
<h2 id="this-词法（这一节只能存疑）"><a href="#this-词法（这一节只能存疑）" class="headerlink" title="this 词法（这一节只能存疑）"></a>this 词法（这一节只能存疑）</h2><p>ES6 添加了一个特殊的语法形式用于函数声明，叫作箭头函数。 它看起来是下面这样的: </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> a <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre>
<p>下面的代码出现了问题</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token string">'awesome'</span><span class="token punctuation">,</span>
    cool<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">coolFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token string">'not cool'</span>

obj<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>cool<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// not cool</span></code></pre>
<p>解决方案 self = this</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token string">'awesome'</span><span class="token punctuation">,</span>
    cool<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">coolFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token string">'not cool'</span>

obj<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>cool<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// not cool</span></code></pre>
<p>上面的方案 失败了</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token string">'awesome'</span><span class="token punctuation">,</span>
    cool<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token string">'not cool'</span>

obj<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>cool<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error</span></code></pre>
<p>上面的这个又失败了，下面这个成功了。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token string">'awesome'</span><span class="token punctuation">,</span>
    cool<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">coolFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token string">'not cool'</span>

obj<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>obj<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// awesome</span></code></pre>
<p>上面的又失败了</p>
<p>箭头函数在涉及 this 绑定时的行为和普通函数的行为完全不一致。它放弃了所 有普通 this 绑定的规则，取而代之的是用当前的词法作用域覆盖了 this 本来的值。 </p>
<p>这样除了可以少写一些代码，我认为箭头函数将程序员们经常犯的一个错误给标准化了， 也就是混淆了 this 绑定规则和词法作用域规则。 </p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>javascript</tag>
        <tag>编程语言</tag>
        <tag>摘录</tag>
      </tags>
  </entry>
</search>
